!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
Hiredis	contrib/hiredis/Hiredis.cc	/^Hiredis::Hiredis(EventLoop* loop, const InetAddress& serverAddr)$/;"	f	class:Hiredis
addRead	contrib/hiredis/Hiredis.cc	/^void Hiredis::addRead(void* privdata)$/;"	f	class:Hiredis
addWrite	contrib/hiredis/Hiredis.cc	/^void Hiredis::addWrite(void* privdata)$/;"	f	class:Hiredis
cleanup	contrib/hiredis/Hiredis.cc	/^void Hiredis::cleanup(void* privdata)$/;"	f	class:Hiredis
command	contrib/hiredis/Hiredis.cc	/^int Hiredis::command(const CommandCallback& cb, muduo::StringArg cmd, ...)$/;"	f	class:Hiredis
commandCallback	contrib/hiredis/Hiredis.cc	/^\/* static *\/ void Hiredis::commandCallback(redisAsyncContext* ac, void* r, void* privdata)$/;"	f	class:Hiredis
commandCallback	contrib/hiredis/Hiredis.cc	/^void Hiredis::commandCallback(redisReply* reply, CommandCallback* cb)$/;"	f	class:Hiredis
connect	contrib/hiredis/Hiredis.cc	/^void Hiredis::connect()$/;"	f	class:Hiredis
connectCallback	contrib/hiredis/Hiredis.cc	/^\/* static *\/ void Hiredis::connectCallback(const redisAsyncContext* ac, int status)$/;"	f	class:Hiredis
connectCallback	contrib/hiredis/Hiredis.cc	/^void Hiredis::connectCallback(int status)$/;"	f	class:Hiredis
connected	contrib/hiredis/Hiredis.cc	/^bool Hiredis::connected() const$/;"	f	class:Hiredis
delRead	contrib/hiredis/Hiredis.cc	/^void Hiredis::delRead(void* privdata)$/;"	f	class:Hiredis
delWrite	contrib/hiredis/Hiredis.cc	/^void Hiredis::delWrite(void* privdata)$/;"	f	class:Hiredis
disconnect	contrib/hiredis/Hiredis.cc	/^void Hiredis::disconnect()$/;"	f	class:Hiredis
disconnectCallback	contrib/hiredis/Hiredis.cc	/^\/* static *\/ void Hiredis::disconnectCallback(const redisAsyncContext* ac, int status)$/;"	f	class:Hiredis
disconnectCallback	contrib/hiredis/Hiredis.cc	/^void Hiredis::disconnectCallback(int status)$/;"	f	class:Hiredis
dummy	contrib/hiredis/Hiredis.cc	/^static void dummy(const boost::shared_ptr<Channel>&)$/;"	f	file:
errstr	contrib/hiredis/Hiredis.cc	/^const char* Hiredis::errstr() const$/;"	f	class:Hiredis
fd	contrib/hiredis/Hiredis.cc	/^int Hiredis::fd() const$/;"	f	class:Hiredis
getHiredis	contrib/hiredis/Hiredis.cc	/^\/* static *\/ Hiredis* Hiredis::getHiredis(const redisAsyncContext* ac)$/;"	f	class:Hiredis
handleRead	contrib/hiredis/Hiredis.cc	/^void Hiredis::handleRead(muduo::Timestamp receiveTime)$/;"	f	class:Hiredis
handleWrite	contrib/hiredis/Hiredis.cc	/^void Hiredis::handleWrite()$/;"	f	class:Hiredis
logConnection	contrib/hiredis/Hiredis.cc	/^void Hiredis::logConnection(bool up) const$/;"	f	class:Hiredis
ping	contrib/hiredis/Hiredis.cc	/^int Hiredis::ping()$/;"	f	class:Hiredis
pingCallback	contrib/hiredis/Hiredis.cc	/^void Hiredis::pingCallback(Hiredis* me, redisReply* reply)$/;"	f	class:Hiredis
removeChannel	contrib/hiredis/Hiredis.cc	/^void Hiredis::removeChannel()$/;"	f	class:Hiredis
setChannel	contrib/hiredis/Hiredis.cc	/^void Hiredis::setChannel()$/;"	f	class:Hiredis
~Hiredis	contrib/hiredis/Hiredis.cc	/^Hiredis::~Hiredis()$/;"	f	class:Hiredis
CommandCallback	contrib/hiredis/Hiredis.h	/^  typedef boost::function<void(Hiredis*, redisReply*)> CommandCallback;$/;"	t	class:hiredis::Hiredis
ConnectCallback	contrib/hiredis/Hiredis.h	/^  typedef boost::function<void(Hiredis*, int)> ConnectCallback;$/;"	t	class:hiredis::Hiredis
DisconnectCallback	contrib/hiredis/Hiredis.h	/^  typedef boost::function<void(Hiredis*, int)> DisconnectCallback;$/;"	t	class:hiredis::Hiredis
Hiredis	contrib/hiredis/Hiredis.h	/^class Hiredis : public boost::enable_shared_from_this<Hiredis>,$/;"	c	namespace:hiredis
MUDUO_EXAMPLES_HIREDIS_HIREDIS_H	contrib/hiredis/Hiredis.h	2;"	d
channel_	contrib/hiredis/Hiredis.h	/^  boost::shared_ptr<muduo::net::Channel> channel_;$/;"	m	class:hiredis::Hiredis
connectCb_	contrib/hiredis/Hiredis.h	/^  ConnectCallback connectCb_;$/;"	m	class:hiredis::Hiredis
context_	contrib/hiredis/Hiredis.h	/^  redisAsyncContext* context_;$/;"	m	class:hiredis::Hiredis
disconnectCb_	contrib/hiredis/Hiredis.h	/^  DisconnectCallback disconnectCb_;$/;"	m	class:hiredis::Hiredis
hiredis	contrib/hiredis/Hiredis.h	/^namespace hiredis$/;"	n
loop_	contrib/hiredis/Hiredis.h	/^  muduo::net::EventLoop* loop_;$/;"	m	class:hiredis::Hiredis
muduo	contrib/hiredis/Hiredis.h	/^namespace muduo$/;"	n
net	contrib/hiredis/Hiredis.h	/^namespace net$/;"	n	namespace:muduo
serverAddr_	contrib/hiredis/Hiredis.h	/^  const muduo::net::InetAddress serverAddr_;$/;"	m	class:hiredis::Hiredis
serverAddress	contrib/hiredis/Hiredis.h	/^  const muduo::net::InetAddress& serverAddress() const { return serverAddr_; }$/;"	f	class:hiredis::Hiredis
setConnectCallback	contrib/hiredis/Hiredis.h	/^  void setConnectCallback(const ConnectCallback& cb) { connectCb_ = cb; }$/;"	f	class:hiredis::Hiredis
setDisconnectCallback	contrib/hiredis/Hiredis.h	/^  void setDisconnectCallback(const DisconnectCallback& cb) { disconnectCb_ = cb; }$/;"	f	class:hiredis::Hiredis
authCallback	contrib/hiredis/mrediscli.cc	/^void authCallback(hiredis::Hiredis* c, redisReply* reply, string* password)$/;"	f
connectCallback	contrib/hiredis/mrediscli.cc	/^void connectCallback(hiredis::Hiredis* c, int status)$/;"	f
dbsizeCallback	contrib/hiredis/mrediscli.cc	/^void dbsizeCallback(hiredis::Hiredis* c, redisReply* reply)$/;"	f
disconnectCallback	contrib/hiredis/mrediscli.cc	/^void disconnectCallback(hiredis::Hiredis* c, int status)$/;"	f
echo	contrib/hiredis/mrediscli.cc	/^void echo(hiredis::Hiredis* c, string* s)$/;"	f
echoCallback	contrib/hiredis/mrediscli.cc	/^void echoCallback(hiredis::Hiredis* c, redisReply* reply, string* echo)$/;"	f
main	contrib/hiredis/mrediscli.cc	/^int main(int argc, char** argv)$/;"	f
redisReplyToString	contrib/hiredis/mrediscli.cc	/^string redisReplyToString(const redisReply* reply)$/;"	f
selectCallback	contrib/hiredis/mrediscli.cc	/^void selectCallback(hiredis::Hiredis* c, redisReply* reply, uint16_t* index)$/;"	f
timeCallback	contrib/hiredis/mrediscli.cc	/^void timeCallback(hiredis::Hiredis* c, redisReply* reply)$/;"	f
toString	contrib/hiredis/mrediscli.cc	/^string toString(long long value)$/;"	f
ThriftConnection	contrib/thrift/ThriftConnection.cc	/^ThriftConnection::ThriftConnection(ThriftServer* server,$/;"	f	class:ThriftConnection
close	contrib/thrift/ThriftConnection.cc	/^void ThriftConnection::close()$/;"	f	class:ThriftConnection
onMessage	contrib/thrift/ThriftConnection.cc	/^void ThriftConnection::onMessage(const TcpConnectionPtr& conn,$/;"	f	class:ThriftConnection
process	contrib/thrift/ThriftConnection.cc	/^void ThriftConnection::process()$/;"	f	class:ThriftConnection
MUDUO_EXAMPLES_THRIFT_THRIFTCONNECTION_H	contrib/thrift/ThriftConnection.h	2;"	d
State	contrib/thrift/ThriftConnection.h	/^  enum State$/;"	g	class:ThriftConnection
ThriftConnection	contrib/thrift/ThriftConnection.h	/^class ThriftConnection : boost::noncopyable,$/;"	c
ThriftConnectionPtr	contrib/thrift/ThriftConnection.h	/^typedef boost::shared_ptr<ThriftConnection> ThriftConnectionPtr;$/;"	t
conn_	contrib/thrift/ThriftConnection.h	/^  muduo::net::TcpConnectionPtr conn_;$/;"	m	class:ThriftConnection
factoryInputTransport_	contrib/thrift/ThriftConnection.h	/^  boost::shared_ptr<TTransport> factoryInputTransport_;$/;"	m	class:ThriftConnection
factoryOutputTransport_	contrib/thrift/ThriftConnection.h	/^  boost::shared_ptr<TTransport> factoryOutputTransport_;$/;"	m	class:ThriftConnection
frameSize_	contrib/thrift/ThriftConnection.h	/^  uint32_t frameSize_;$/;"	m	class:ThriftConnection
inputProtocol_	contrib/thrift/ThriftConnection.h	/^  boost::shared_ptr<TProtocol> inputProtocol_;$/;"	m	class:ThriftConnection
inputTransport_	contrib/thrift/ThriftConnection.h	/^  boost::shared_ptr<TMemoryBuffer> inputTransport_;$/;"	m	class:ThriftConnection
kExpectFrame	contrib/thrift/ThriftConnection.h	/^    kExpectFrame$/;"	e	enum:ThriftConnection::State
kExpectFrameSize	contrib/thrift/ThriftConnection.h	/^    kExpectFrameSize,$/;"	e	enum:ThriftConnection::State
nullTransport_	contrib/thrift/ThriftConnection.h	/^  boost::shared_ptr<TNullTransport> nullTransport_;$/;"	m	class:ThriftConnection
outputProtocol_	contrib/thrift/ThriftConnection.h	/^  boost::shared_ptr<TProtocol> outputProtocol_;$/;"	m	class:ThriftConnection
outputTransport_	contrib/thrift/ThriftConnection.h	/^  boost::shared_ptr<TMemoryBuffer> outputTransport_;$/;"	m	class:ThriftConnection
processor_	contrib/thrift/ThriftConnection.h	/^  boost::shared_ptr<TProcessor> processor_;$/;"	m	class:ThriftConnection
server_	contrib/thrift/ThriftConnection.h	/^  ThriftServer* server_;$/;"	m	class:ThriftConnection
state_	contrib/thrift/ThriftConnection.h	/^  enum State state_;$/;"	m	class:ThriftConnection	typeref:enum:ThriftConnection::State
onConnection	contrib/thrift/ThriftServer.cc	/^void ThriftServer::onConnection(const TcpConnectionPtr& conn)$/;"	f	class:ThriftServer
serve	contrib/thrift/ThriftServer.cc	/^void ThriftServer::serve()$/;"	f	class:ThriftServer
start	contrib/thrift/ThriftServer.cc	/^void ThriftServer::start()$/;"	f	class:ThriftServer
stop	contrib/thrift/ThriftServer.cc	/^void ThriftServer::stop()$/;"	f	class:ThriftServer
~ThriftServer	contrib/thrift/ThriftServer.cc	/^ThriftServer::~ThriftServer()$/;"	f	class:ThriftServer
MUDUO_EXAMPLES_THRIFT_THRIFTSERVER_H	contrib/thrift/ThriftServer.h	2;"	d
ThriftServer	contrib/thrift/ThriftServer.h	/^  ThriftServer(const boost::shared_ptr<Processor>& processor,$/;"	f	class:ThriftServer
ThriftServer	contrib/thrift/ThriftServer.h	/^  ThriftServer(const boost::shared_ptr<ProcessorFactory>& processorFactory,$/;"	f	class:ThriftServer
ThriftServer	contrib/thrift/ThriftServer.h	/^class ThriftServer : boost::noncopyable,$/;"	c
conns_	contrib/thrift/ThriftServer.h	/^  std::map<muduo::string, ThriftConnectionPtr> conns_;$/;"	m	class:ThriftServer
isWorkerThreadPoolProcessing	contrib/thrift/ThriftServer.h	/^  bool isWorkerThreadPoolProcessing() const$/;"	f	class:ThriftServer
mutex_	contrib/thrift/ThriftServer.h	/^  muduo::MutexLock mutex_;$/;"	m	class:ThriftServer
numWorkerThreads_	contrib/thrift/ThriftServer.h	/^  int numWorkerThreads_;$/;"	m	class:ThriftServer
server_	contrib/thrift/ThriftServer.h	/^  muduo::net::TcpServer server_;$/;"	m	class:ThriftServer
setThreadNum	contrib/thrift/ThriftServer.h	/^  void setThreadNum(int numThreads)$/;"	f	class:ThriftServer
setWorkerThreadNum	contrib/thrift/ThriftServer.h	/^  void setWorkerThreadNum(int numWorkerThreads)$/;"	f	class:ThriftServer
workerThreadPool	contrib/thrift/ThriftServer.h	/^  muduo::ThreadPool& workerThreadPool()$/;"	f	class:ThriftServer
workerThreadPool_	contrib/thrift/ThriftServer.h	/^  muduo::ThreadPool workerThreadPool_;$/;"	m	class:ThriftServer
EchoHandler	contrib/thrift/tests/echo/EchoServer.cc	/^  EchoHandler()$/;"	f	class:EchoHandler
EchoHandler	contrib/thrift/tests/echo/EchoServer.cc	/^class EchoHandler : virtual public EchoIf$/;"	c	file:
NumCPU	contrib/thrift/tests/echo/EchoServer.cc	/^int NumCPU()$/;"	f
echo	contrib/thrift/tests/echo/EchoServer.cc	/^  void echo(std::string& str, const std::string& s)$/;"	f	class:EchoHandler
main	contrib/thrift/tests/echo/EchoServer.cc	/^int main(int argc, char **argv)$/;"	f
echo	contrib/thrift/tests/echo/echoclient.py	/^def echo(s):$/;"	f
main	contrib/thrift/tests/echo/echoclient.py	/^def main():$/;"	f
PingHandler	contrib/thrift/tests/ping/PingServer.cc	/^  PingHandler()$/;"	f	class:PingHandler
PingHandler	contrib/thrift/tests/ping/PingServer.cc	/^class PingHandler : virtual public PingIf$/;"	c	file:
main	contrib/thrift/tests/ping/PingServer.cc	/^int main(int argc, char **argv)$/;"	f
ping	contrib/thrift/tests/ping/PingServer.cc	/^  void ping()$/;"	f	class:PingHandler
main	contrib/thrift/tests/ping/pingclient.py	/^def main():$/;"	f
ping	contrib/thrift/tests/ping/pingclient.py	/^def ping():$/;"	f
Codec	examples/ace/logging/client.cc	/^typedef ProtobufCodecLiteT<LogRecord, logtag> Codec;$/;"	t	namespace:logging	file:
LogClient	examples/ace/logging/client.cc	/^  LogClient(EventLoop* loop, const InetAddress& serverAddr)$/;"	f	class:logging::LogClient
LogClient	examples/ace/logging/client.cc	/^class LogClient : boost::noncopyable$/;"	c	namespace:logging	file:
client_	examples/ace/logging/client.cc	/^  TcpClient client_;$/;"	m	class:logging::LogClient	file:
codec_	examples/ace/logging/client.cc	/^  Codec codec_;$/;"	m	class:logging::LogClient	file:
connect	examples/ace/logging/client.cc	/^  void connect()$/;"	f	class:logging::LogClient
connection_	examples/ace/logging/client.cc	/^  TcpConnectionPtr connection_;$/;"	m	class:logging::LogClient	file:
disconnect	examples/ace/logging/client.cc	/^  void disconnect()$/;"	f	class:logging::LogClient
logRecord_	examples/ace/logging/client.cc	/^  LogRecord logRecord_;$/;"	m	class:logging::LogClient	file:
logging	examples/ace/logging/client.cc	/^namespace logging$/;"	n	file:
logtag	examples/ace/logging/client.cc	/^extern const char logtag[] = "LOG0";$/;"	m	namespace:logging	file:
main	examples/ace/logging/client.cc	/^int main(int argc, char* argv[])$/;"	f
mutex_	examples/ace/logging/client.cc	/^  MutexLock mutex_;$/;"	m	class:logging::LogClient	file:
onConnection	examples/ace/logging/client.cc	/^  void onConnection(const TcpConnectionPtr& conn)$/;"	f	class:logging::LogClient	file:
onMessage	examples/ace/logging/client.cc	/^  void onMessage(const TcpConnectionPtr&,$/;"	f	class:logging::LogClient	file:
updateLogRecord	examples/ace/logging/client.cc	/^  void updateLogRecord(const StringPiece& message)$/;"	f	class:logging::LogClient	file:
write	examples/ace/logging/client.cc	/^  void write(const StringPiece& message)$/;"	f	class:logging::LogClient
Codec	examples/ace/logging/server.cc	/^typedef ProtobufCodecLiteT<LogRecord, logtag> Codec;$/;"	t	namespace:logging	file:
LogServer	examples/ace/logging/server.cc	/^  LogServer(EventLoop* loop, const InetAddress& listenAddr, int numThreads)$/;"	f	class:logging::LogServer
LogServer	examples/ace/logging/server.cc	/^class LogServer : boost::noncopyable$/;"	c	namespace:logging	file:
Session	examples/ace/logging/server.cc	/^  explicit Session(const TcpConnectionPtr& conn)$/;"	f	class:logging::Session
Session	examples/ace/logging/server.cc	/^class Session : boost::noncopyable$/;"	c	namespace:logging	file:
SessionPtr	examples/ace/logging/server.cc	/^typedef boost::shared_ptr<Session> SessionPtr;$/;"	t	namespace:logging	file:
codec_	examples/ace/logging/server.cc	/^  Codec codec_;$/;"	m	class:logging::Session	file:
file_	examples/ace/logging/server.cc	/^  FileUtil::AppendFile file_;$/;"	m	class:logging::Session	file:
getFileName	examples/ace/logging/server.cc	/^  string getFileName(const TcpConnectionPtr& conn)$/;"	f	class:logging::Session	file:
globalCount_	examples/ace/logging/server.cc	/^  static AtomicInt32 globalCount_;$/;"	m	class:logging::Session	file:
globalCount_	examples/ace/logging/server.cc	/^AtomicInt32 Session::globalCount_;$/;"	m	class:logging::Session	file:
logging	examples/ace/logging/server.cc	/^namespace logging$/;"	n	file:
logtag	examples/ace/logging/server.cc	/^extern const char logtag[] = "LOG0";$/;"	m	namespace:logging	file:
loop_	examples/ace/logging/server.cc	/^  EventLoop* loop_;$/;"	m	class:logging::LogServer	file:
main	examples/ace/logging/server.cc	/^int main(int argc, char* argv[])$/;"	f
onConnection	examples/ace/logging/server.cc	/^  void onConnection(const TcpConnectionPtr& conn)$/;"	f	class:logging::LogServer	file:
onMessage	examples/ace/logging/server.cc	/^  void onMessage(const TcpConnectionPtr& conn,$/;"	f	class:logging::Session	file:
server_	examples/ace/logging/server.cc	/^  TcpServer server_;$/;"	m	class:logging::LogServer	file:
start	examples/ace/logging/server.cc	/^  void start()$/;"	f	class:logging::LogServer
parseCommandLine	examples/ace/ttcp/common.cc	/^bool parseCommandLine(int argc, char* argv[], Options* opt)$/;"	f
resolveOrDie	examples/ace/ttcp/common.cc	/^struct sockaddr_in resolveOrDie(const char* host, uint16_t port)$/;"	f
Options	examples/ace/ttcp/common.h	/^  Options()$/;"	f	struct:Options
Options	examples/ace/ttcp/common.h	/^struct Options$/;"	s
PayloadMessage	examples/ace/ttcp/common.h	/^struct PayloadMessage$/;"	s
SessionMessage	examples/ace/ttcp/common.h	/^struct SessionMessage$/;"	s
data	examples/ace/ttcp/common.h	/^  char data[0];$/;"	m	struct:PayloadMessage
host	examples/ace/ttcp/common.h	/^  std::string host;$/;"	m	struct:Options
length	examples/ace/ttcp/common.h	/^  int length;$/;"	m	struct:Options
length	examples/ace/ttcp/common.h	/^  int32_t length;$/;"	m	struct:PayloadMessage
length	examples/ace/ttcp/common.h	/^  int32_t length;$/;"	m	struct:SessionMessage
nodelay	examples/ace/ttcp/common.h	/^  bool transmit, receive, nodelay;$/;"	m	struct:Options
number	examples/ace/ttcp/common.h	/^  int number;$/;"	m	struct:Options
number	examples/ace/ttcp/common.h	/^  int32_t number;$/;"	m	struct:SessionMessage
port	examples/ace/ttcp/common.h	/^  uint16_t port;$/;"	m	struct:Options
receive	examples/ace/ttcp/common.h	/^  bool transmit, receive, nodelay;$/;"	m	struct:Options
transmit	examples/ace/ttcp/common.h	/^  bool transmit, receive, nodelay;$/;"	m	struct:Options
main	examples/ace/ttcp/main.cc	/^int main(int argc, char* argv[])$/;"	f
Context	examples/ace/ttcp/ttcp.cc	/^  Context()$/;"	f	struct:Context
Context	examples/ace/ttcp/ttcp.cc	/^struct Context$/;"	s	file:
bytes	examples/ace/ttcp/ttcp.cc	/^  int64_t bytes;$/;"	m	struct:Context	file:
count	examples/ace/ttcp/ttcp.cc	/^  int count;$/;"	m	struct:Context	file:
onConnection	examples/ace/ttcp/ttcp.cc	/^void onConnection(const Options& opt, const TcpConnectionPtr& conn)$/;"	f	namespace:trans
onConnection	examples/ace/ttcp/ttcp.cc	/^void onConnection(const TcpConnectionPtr& conn)$/;"	f	namespace:receiving
onMessage	examples/ace/ttcp/ttcp.cc	/^void onMessage(const TcpConnectionPtr& conn, Buffer* buf, Timestamp time)$/;"	f	namespace:receiving
onMessage	examples/ace/ttcp/ttcp.cc	/^void onMessage(const TcpConnectionPtr& conn, Buffer* buf, Timestamp time)$/;"	f	namespace:trans
output	examples/ace/ttcp/ttcp.cc	/^  Buffer output;$/;"	m	struct:Context	file:
receive	examples/ace/ttcp/ttcp.cc	/^void receive(const Options& opt)$/;"	f
receiving	examples/ace/ttcp/ttcp.cc	/^namespace receiving$/;"	n	file:
session	examples/ace/ttcp/ttcp.cc	/^  SessionMessage session;$/;"	m	struct:Context	file:
trans	examples/ace/ttcp/ttcp.cc	/^namespace trans$/;"	n	file:
transmit	examples/ace/ttcp/ttcp.cc	/^void transmit(const Options& opt)$/;"	f
NDEBUG	examples/ace/ttcp/ttcp_blocking.cc	4;"	d	file:
acceptOrDie	examples/ace/ttcp/ttcp_blocking.cc	/^static int acceptOrDie(uint16_t port)$/;"	f	file:
read_n	examples/ace/ttcp/ttcp_blocking.cc	/^static int read_n(int sockfd, void* buf, int length)$/;"	f	file:
receive	examples/ace/ttcp/ttcp_blocking.cc	/^void receive(const Options& opt)$/;"	f
transmit	examples/ace/ttcp/ttcp_blocking.cc	/^void transmit(const Options& opt)$/;"	f
write_n	examples/ace/ttcp/ttcp_blocking.cc	/^static int write_n(int sockfd, const void* buf, int length)$/;"	f	file:
ChatClient	examples/asio/chat/client.cc	/^  ChatClient(EventLoop* loop, const InetAddress& serverAddr)$/;"	f	class:ChatClient
ChatClient	examples/asio/chat/client.cc	/^class ChatClient : boost::noncopyable$/;"	c	file:
client_	examples/asio/chat/client.cc	/^  TcpClient client_;$/;"	m	class:ChatClient	file:
codec_	examples/asio/chat/client.cc	/^  LengthHeaderCodec codec_;$/;"	m	class:ChatClient	file:
connect	examples/asio/chat/client.cc	/^  void connect()$/;"	f	class:ChatClient
connection_	examples/asio/chat/client.cc	/^  TcpConnectionPtr connection_;$/;"	m	class:ChatClient	file:
disconnect	examples/asio/chat/client.cc	/^  void disconnect()$/;"	f	class:ChatClient
main	examples/asio/chat/client.cc	/^int main(int argc, char* argv[])$/;"	f
mutex_	examples/asio/chat/client.cc	/^  MutexLock mutex_;$/;"	m	class:ChatClient	file:
onConnection	examples/asio/chat/client.cc	/^  void onConnection(const TcpConnectionPtr& conn)$/;"	f	class:ChatClient	file:
onStringMessage	examples/asio/chat/client.cc	/^  void onStringMessage(const TcpConnectionPtr&,$/;"	f	class:ChatClient	file:
write	examples/asio/chat/client.cc	/^  void write(const StringPiece& message)$/;"	f	class:ChatClient
LengthHeaderCodec	examples/asio/chat/codec.h	/^  explicit LengthHeaderCodec(const StringMessageCallback& cb)   \/\/构造函数则是设置messageCallback_回调函数$/;"	f	class:LengthHeaderCodec
LengthHeaderCodec	examples/asio/chat/codec.h	/^class LengthHeaderCodec : boost::noncopyable$/;"	c
MUDUO_EXAMPLES_ASIO_CHAT_CODEC_H	examples/asio/chat/codec.h	2;"	d
StringMessageCallback	examples/asio/chat/codec.h	/^                                muduo::Timestamp)> StringMessageCallback;$/;"	t	class:LengthHeaderCodec
kHeaderLen	examples/asio/chat/codec.h	/^  const static size_t kHeaderLen = sizeof(int32_t);$/;"	m	class:LengthHeaderCodec
messageCallback_	examples/asio/chat/codec.h	/^  StringMessageCallback messageCallback_;$/;"	m	class:LengthHeaderCodec
onMessage	examples/asio/chat/codec.h	/^  void onMessage(const muduo::net::TcpConnectionPtr& conn,      $/;"	f	class:LengthHeaderCodec
send	examples/asio/chat/codec.h	/^  void send(muduo::net::TcpConnection* conn,      \/\/打包把muduo::string转换成muduo::Buffer的发送函数$/;"	f	class:LengthHeaderCodec
ChatClient	examples/asio/chat/loadtest.cc	/^  ChatClient(EventLoop* loop, const InetAddress& serverAddr)$/;"	f	class:ChatClient
ChatClient	examples/asio/chat/loadtest.cc	/^class ChatClient : boost::noncopyable$/;"	c	file:
client_	examples/asio/chat/loadtest.cc	/^  TcpClient client_;$/;"	m	class:ChatClient	file:
codec_	examples/asio/chat/loadtest.cc	/^  LengthHeaderCodec codec_;$/;"	m	class:ChatClient	file:
connect	examples/asio/chat/loadtest.cc	/^  void connect()$/;"	f	class:ChatClient
connection_	examples/asio/chat/loadtest.cc	/^  TcpConnectionPtr connection_;$/;"	m	class:ChatClient	file:
disconnect	examples/asio/chat/loadtest.cc	/^  void disconnect()$/;"	f	class:ChatClient
g_aliveConnections	examples/asio/chat/loadtest.cc	/^AtomicInt32 g_aliveConnections;$/;"	v
g_connections	examples/asio/chat/loadtest.cc	/^int g_connections = 0;$/;"	v
g_loop	examples/asio/chat/loadtest.cc	/^EventLoop* g_loop;$/;"	v
g_messagesReceived	examples/asio/chat/loadtest.cc	/^AtomicInt32 g_messagesReceived;$/;"	v
g_receiveTime	examples/asio/chat/loadtest.cc	/^std::vector<Timestamp> g_receiveTime;$/;"	v
g_startTime	examples/asio/chat/loadtest.cc	/^Timestamp g_startTime;$/;"	v
g_statistic	examples/asio/chat/loadtest.cc	/^boost::function<void()> g_statistic;$/;"	v
loop_	examples/asio/chat/loadtest.cc	/^  EventLoop* loop_;$/;"	m	class:ChatClient	file:
main	examples/asio/chat/loadtest.cc	/^int main(int argc, char* argv[])$/;"	f
onConnection	examples/asio/chat/loadtest.cc	/^  void onConnection(const TcpConnectionPtr& conn)$/;"	f	class:ChatClient	file:
onStringMessage	examples/asio/chat/loadtest.cc	/^  void onStringMessage(const TcpConnectionPtr&,$/;"	f	class:ChatClient	file:
receiveTime	examples/asio/chat/loadtest.cc	/^  Timestamp receiveTime() const { return receiveTime_; }$/;"	f	class:ChatClient
receiveTime_	examples/asio/chat/loadtest.cc	/^  Timestamp receiveTime_;$/;"	m	class:ChatClient	file:
send	examples/asio/chat/loadtest.cc	/^  void send()$/;"	f	class:ChatClient	file:
statistic	examples/asio/chat/loadtest.cc	/^void statistic(const boost::ptr_vector<ChatClient>& clients)$/;"	f
ChatServer	examples/asio/chat/server.cc	/^  ChatServer(EventLoop* loop,$/;"	f	class:ChatServer
ChatServer	examples/asio/chat/server.cc	/^class ChatServer : boost::noncopyable$/;"	c	file:
ConnectionList	examples/asio/chat/server.cc	/^  typedef std::set<TcpConnectionPtr> ConnectionList;$/;"	t	class:ChatServer	file:
codec_	examples/asio/chat/server.cc	/^  LengthHeaderCodec codec_;$/;"	m	class:ChatServer	file:
connections_	examples/asio/chat/server.cc	/^  ConnectionList connections_;$/;"	m	class:ChatServer	file:
main	examples/asio/chat/server.cc	/^int main(int argc, char* argv[])$/;"	f
onConnection	examples/asio/chat/server.cc	/^  void onConnection(const TcpConnectionPtr& conn)$/;"	f	class:ChatServer	file:
onStringMessage	examples/asio/chat/server.cc	/^  void onStringMessage(const TcpConnectionPtr&,$/;"	f	class:ChatServer	file:
server_	examples/asio/chat/server.cc	/^  TcpServer server_;$/;"	m	class:ChatServer	file:
start	examples/asio/chat/server.cc	/^  void start()$/;"	f	class:ChatServer
ChatServer	examples/asio/chat/server_threaded.cc	/^  ChatServer(EventLoop* loop,$/;"	f	class:ChatServer
ChatServer	examples/asio/chat/server_threaded.cc	/^class ChatServer : boost::noncopyable$/;"	c	file:
ConnectionList	examples/asio/chat/server_threaded.cc	/^  typedef std::set<TcpConnectionPtr> ConnectionList;$/;"	t	class:ChatServer	file:
codec_	examples/asio/chat/server_threaded.cc	/^  LengthHeaderCodec codec_;$/;"	m	class:ChatServer	file:
connections_	examples/asio/chat/server_threaded.cc	/^  ConnectionList connections_;$/;"	m	class:ChatServer	file:
main	examples/asio/chat/server_threaded.cc	/^int main(int argc, char* argv[])$/;"	f
mutex_	examples/asio/chat/server_threaded.cc	/^  MutexLock mutex_;$/;"	m	class:ChatServer	file:
onConnection	examples/asio/chat/server_threaded.cc	/^  void onConnection(const TcpConnectionPtr& conn)$/;"	f	class:ChatServer	file:
onStringMessage	examples/asio/chat/server_threaded.cc	/^  void onStringMessage(const TcpConnectionPtr&,$/;"	f	class:ChatServer	file:
server_	examples/asio/chat/server_threaded.cc	/^  TcpServer server_;$/;"	m	class:ChatServer	file:
setThreadNum	examples/asio/chat/server_threaded.cc	/^  void setThreadNum(int numThreads)$/;"	f	class:ChatServer
start	examples/asio/chat/server_threaded.cc	/^  void start()$/;"	f	class:ChatServer
ChatServer	examples/asio/chat/server_threaded_efficient.cc	/^  ChatServer(EventLoop* loop,$/;"	f	class:ChatServer
ChatServer	examples/asio/chat/server_threaded_efficient.cc	/^class ChatServer : boost::noncopyable$/;"	c	file:
ConnectionList	examples/asio/chat/server_threaded_efficient.cc	/^  typedef std::set<TcpConnectionPtr> ConnectionList;$/;"	t	class:ChatServer	file:
ConnectionListPtr	examples/asio/chat/server_threaded_efficient.cc	/^  typedef boost::shared_ptr<ConnectionList> ConnectionListPtr;$/;"	t	class:ChatServer	file:
codec_	examples/asio/chat/server_threaded_efficient.cc	/^  LengthHeaderCodec codec_;$/;"	m	class:ChatServer	file:
connections_	examples/asio/chat/server_threaded_efficient.cc	/^  ConnectionListPtr connections_;$/;"	m	class:ChatServer	file:
getConnectionList	examples/asio/chat/server_threaded_efficient.cc	/^  ConnectionListPtr getConnectionList()$/;"	f	class:ChatServer	file:
main	examples/asio/chat/server_threaded_efficient.cc	/^int main(int argc, char* argv[])$/;"	f
mutex_	examples/asio/chat/server_threaded_efficient.cc	/^  MutexLock mutex_;$/;"	m	class:ChatServer	file:
onConnection	examples/asio/chat/server_threaded_efficient.cc	/^  void onConnection(const TcpConnectionPtr& conn)$/;"	f	class:ChatServer	file:
onStringMessage	examples/asio/chat/server_threaded_efficient.cc	/^  void onStringMessage(const TcpConnectionPtr&,$/;"	f	class:ChatServer	file:
server_	examples/asio/chat/server_threaded_efficient.cc	/^  TcpServer server_;$/;"	m	class:ChatServer	file:
setThreadNum	examples/asio/chat/server_threaded_efficient.cc	/^  void setThreadNum(int numThreads)$/;"	f	class:ChatServer
start	examples/asio/chat/server_threaded_efficient.cc	/^  void start()$/;"	f	class:ChatServer
ChatServer	examples/asio/chat/server_threaded_highperformance.cc	/^  ChatServer(EventLoop* loop,$/;"	f	class:ChatServer
ChatServer	examples/asio/chat/server_threaded_highperformance.cc	/^class ChatServer : boost::noncopyable$/;"	c	file:
ConnectionList	examples/asio/chat/server_threaded_highperformance.cc	/^  typedef std::set<TcpConnectionPtr> ConnectionList;$/;"	t	class:ChatServer	file:
LocalConnections	examples/asio/chat/server_threaded_highperformance.cc	/^  typedef ThreadLocalSingleton<ConnectionList> LocalConnections;$/;"	t	class:ChatServer	file:
codec_	examples/asio/chat/server_threaded_highperformance.cc	/^  LengthHeaderCodec codec_;$/;"	m	class:ChatServer	file:
distributeMessage	examples/asio/chat/server_threaded_highperformance.cc	/^  void distributeMessage(const string& message)$/;"	f	class:ChatServer	file:
loops_	examples/asio/chat/server_threaded_highperformance.cc	/^  std::set<EventLoop*> loops_;$/;"	m	class:ChatServer	file:
main	examples/asio/chat/server_threaded_highperformance.cc	/^int main(int argc, char* argv[])$/;"	f
mutex_	examples/asio/chat/server_threaded_highperformance.cc	/^  MutexLock mutex_;$/;"	m	class:ChatServer	file:
onConnection	examples/asio/chat/server_threaded_highperformance.cc	/^  void onConnection(const TcpConnectionPtr& conn)$/;"	f	class:ChatServer	file:
onStringMessage	examples/asio/chat/server_threaded_highperformance.cc	/^  void onStringMessage(const TcpConnectionPtr&,$/;"	f	class:ChatServer	file:
server_	examples/asio/chat/server_threaded_highperformance.cc	/^  TcpServer server_;$/;"	m	class:ChatServer	file:
setThreadNum	examples/asio/chat/server_threaded_highperformance.cc	/^  void setThreadNum(int numThreads)$/;"	f	class:ChatServer
start	examples/asio/chat/server_threaded_highperformance.cc	/^  void start()$/;"	f	class:ChatServer
threadInit	examples/asio/chat/server_threaded_highperformance.cc	/^  void threadInit(EventLoop* loop)$/;"	f	class:ChatServer	file:
main	examples/asio/tutorial/timer2/timer.cc	/^int main()$/;"	f
print	examples/asio/tutorial/timer2/timer.cc	/^void print()$/;"	f
main	examples/asio/tutorial/timer3/timer.cc	/^int main()$/;"	f
print	examples/asio/tutorial/timer3/timer.cc	/^void print(muduo::net::EventLoop* loop, int* count)$/;"	f
Printer	examples/asio/tutorial/timer4/timer.cc	/^  Printer(muduo::net::EventLoop* loop)$/;"	f	class:Printer
Printer	examples/asio/tutorial/timer4/timer.cc	/^class Printer : boost::noncopyable$/;"	c	file:
count_	examples/asio/tutorial/timer4/timer.cc	/^  int count_;$/;"	m	class:Printer	file:
loop_	examples/asio/tutorial/timer4/timer.cc	/^  muduo::net::EventLoop* loop_;$/;"	m	class:Printer	file:
main	examples/asio/tutorial/timer4/timer.cc	/^int main()$/;"	f
print	examples/asio/tutorial/timer4/timer.cc	/^  void print()$/;"	f	class:Printer
~Printer	examples/asio/tutorial/timer4/timer.cc	/^  ~Printer()$/;"	f	class:Printer
Printer	examples/asio/tutorial/timer5/timer.cc	/^  Printer(muduo::net::EventLoop* loop1, muduo::net::EventLoop* loop2)$/;"	f	class:Printer
Printer	examples/asio/tutorial/timer5/timer.cc	/^class Printer : boost::noncopyable$/;"	c	file:
count_	examples/asio/tutorial/timer5/timer.cc	/^  int count_;$/;"	m	class:Printer	file:
loop1_	examples/asio/tutorial/timer5/timer.cc	/^  muduo::net::EventLoop* loop1_;$/;"	m	class:Printer	file:
loop2_	examples/asio/tutorial/timer5/timer.cc	/^  muduo::net::EventLoop* loop2_;$/;"	m	class:Printer	file:
main	examples/asio/tutorial/timer5/timer.cc	/^int main()$/;"	f
mutex_	examples/asio/tutorial/timer5/timer.cc	/^  muduo::MutexLock mutex_;$/;"	m	class:Printer	file:
print1	examples/asio/tutorial/timer5/timer.cc	/^  void print1()$/;"	f	class:Printer
print2	examples/asio/tutorial/timer5/timer.cc	/^  void print2()$/;"	f	class:Printer
~Printer	examples/asio/tutorial/timer5/timer.cc	/^  ~Printer()$/;"	f	class:Printer
Printer	examples/asio/tutorial/timer6/timer.cc	/^  Printer(muduo::net::EventLoop* loop1, muduo::net::EventLoop* loop2)$/;"	f	class:Printer
Printer	examples/asio/tutorial/timer6/timer.cc	/^class Printer : boost::noncopyable$/;"	c	file:
count_	examples/asio/tutorial/timer6/timer.cc	/^  int count_;$/;"	m	class:Printer	file:
loop1_	examples/asio/tutorial/timer6/timer.cc	/^  muduo::net::EventLoop* loop1_;$/;"	m	class:Printer	file:
loop2_	examples/asio/tutorial/timer6/timer.cc	/^  muduo::net::EventLoop* loop2_;$/;"	m	class:Printer	file:
main	examples/asio/tutorial/timer6/timer.cc	/^int main()$/;"	f
mutex_	examples/asio/tutorial/timer6/timer.cc	/^  muduo::MutexLock mutex_;$/;"	m	class:Printer	file:
print1	examples/asio/tutorial/timer6/timer.cc	/^  void print1()$/;"	f	class:Printer
print2	examples/asio/tutorial/timer6/timer.cc	/^  void print2()$/;"	f	class:Printer
~Printer	examples/asio/tutorial/timer6/timer.cc	/^  ~Printer()$/;"	f	class:Printer
Resolver	examples/cdns/Resolver.cc	/^Resolver::Resolver(EventLoop* loop, Option opt)$/;"	f	class:Resolver
ares_host_callback	examples/cdns/Resolver.cc	/^void Resolver::ares_host_callback(void* data, int status, int timeouts, struct hostent* hostent)$/;"	f	class:Resolver
ares_sock_create_callback	examples/cdns/Resolver.cc	/^int Resolver::ares_sock_create_callback(int sockfd, int type, void* data)$/;"	f	class:Resolver
ares_sock_state_callback	examples/cdns/Resolver.cc	/^void Resolver::ares_sock_state_callback(void* data, int sockfd, int read, int write)$/;"	f	class:Resolver
getSeconds	examples/cdns/Resolver.cc	/^double getSeconds(struct timeval* tv)$/;"	f	namespace:__anon10
getSocketType	examples/cdns/Resolver.cc	/^const char* getSocketType(int type)$/;"	f	namespace:__anon10
kDebug	examples/cdns/Resolver.cc	/^const bool kDebug = false;$/;"	m	namespace:__anon10	file:
onQueryResult	examples/cdns/Resolver.cc	/^void Resolver::onQueryResult(int status, struct hostent* result, const Callback& callback)$/;"	f	class:Resolver
onRead	examples/cdns/Resolver.cc	/^void Resolver::onRead(int sockfd, Timestamp t)$/;"	f	class:Resolver
onSockCreate	examples/cdns/Resolver.cc	/^void Resolver::onSockCreate(int sockfd, int type)$/;"	f	class:Resolver
onSockStateChange	examples/cdns/Resolver.cc	/^void Resolver::onSockStateChange(int sockfd, bool read, bool write)$/;"	f	class:Resolver
onTimer	examples/cdns/Resolver.cc	/^void Resolver::onTimer()$/;"	f	class:Resolver
resolve	examples/cdns/Resolver.cc	/^bool Resolver::resolve(StringArg hostname, const Callback& cb)$/;"	f	class:Resolver
~Resolver	examples/cdns/Resolver.cc	/^Resolver::~Resolver()$/;"	f	class:Resolver
Callback	examples/cdns/Resolver.h	/^  typedef boost::function<void(const muduo::net::InetAddress&)> Callback;$/;"	t	class:cdns::Resolver
ChannelList	examples/cdns/Resolver.h	/^  typedef boost::ptr_map<int, muduo::net::Channel> ChannelList;$/;"	t	class:cdns::Resolver
MUDUO_EXAMPLES_CDNS_RESOLVER_H	examples/cdns/Resolver.h	2;"	d
Option	examples/cdns/Resolver.h	/^  enum Option$/;"	g	class:cdns::Resolver
QueryData	examples/cdns/Resolver.h	/^    QueryData(Resolver* o, const Callback& cb)$/;"	f	struct:cdns::Resolver::QueryData
QueryData	examples/cdns/Resolver.h	/^  struct QueryData$/;"	s	class:cdns::Resolver
Resolver	examples/cdns/Resolver.h	/^class Resolver : boost::noncopyable$/;"	c	namespace:cdns
ares_channel	examples/cdns/Resolver.h	/^  typedef struct ares_channeldata* ares_channel;$/;"	t	typeref:struct:ares_channeldata
callback	examples/cdns/Resolver.h	/^    Callback callback;$/;"	m	struct:cdns::Resolver::QueryData
cdns	examples/cdns/Resolver.h	/^namespace cdns$/;"	n
channels_	examples/cdns/Resolver.h	/^  ChannelList channels_;$/;"	m	class:cdns::Resolver
ctx_	examples/cdns/Resolver.h	/^  ares_channel ctx_;$/;"	m	class:cdns::Resolver
kDNSandHostsFile	examples/cdns/Resolver.h	/^    kDNSandHostsFile,$/;"	e	enum:cdns::Resolver::Option
kDNSonly	examples/cdns/Resolver.h	/^    kDNSonly,$/;"	e	enum:cdns::Resolver::Option
loop_	examples/cdns/Resolver.h	/^  muduo::net::EventLoop* loop_;$/;"	m	class:cdns::Resolver
muduo	examples/cdns/Resolver.h	/^namespace muduo$/;"	n
net	examples/cdns/Resolver.h	/^namespace net$/;"	n	namespace:muduo
owner	examples/cdns/Resolver.h	/^    Resolver* owner;$/;"	m	struct:cdns::Resolver::QueryData
timerActive_	examples/cdns/Resolver.h	/^  bool timerActive_;$/;"	m	class:cdns::Resolver
count	examples/cdns/dns.cc	/^int count = 0;$/;"	v
main	examples/cdns/dns.cc	/^int main(int argc, char* argv[])$/;"	f
quit	examples/cdns/dns.cc	/^void quit()$/;"	f
resolve	examples/cdns/dns.cc	/^void resolve(Resolver* res, const string& host)$/;"	f
resolveCallback	examples/cdns/dns.cc	/^void resolveCallback(const string& host, const InetAddress& addr)$/;"	f
total	examples/cdns/dns.cc	/^int total = 0;$/;"	v
Curl	examples/curl/Curl.cc	/^Curl::Curl(EventLoop* loop)$/;"	f	class:Curl
Request	examples/curl/Curl.cc	/^Request::Request(Curl* owner, const char* url)$/;"	f	class:Request
checkFinish	examples/curl/Curl.cc	/^void Curl::checkFinish()$/;"	f	class:Curl
dataCallback	examples/curl/Curl.cc	/^void Request::dataCallback(const char* buffer, int len)$/;"	f	class:Request
done	examples/curl/Curl.cc	/^void Request::done(int code)$/;"	f	class:Request
dummy	examples/curl/Curl.cc	/^static void dummy(const boost::shared_ptr<Channel>&)$/;"	f	file:
getEffectiveUrl	examples/curl/Curl.cc	/^const char* Request::getEffectiveUrl()$/;"	f	class:Request
getRedirectUrl	examples/curl/Curl.cc	/^const char* Request::getRedirectUrl()$/;"	f	class:Request
getResponseCode	examples/curl/Curl.cc	/^int Request::getResponseCode()$/;"	f	class:Request
getUrl	examples/curl/Curl.cc	/^RequestPtr Curl::getUrl(StringArg url)$/;"	f	class:Curl
headerCallback	examples/curl/Curl.cc	/^void Request::headerCallback(const char* buffer, int len)$/;"	f	class:Request
headerData	examples/curl/Curl.cc	/^size_t Request::headerData(char* buffer, size_t size, size_t nmemb, void* userp)$/;"	f	class:Request
headerOnly	examples/curl/Curl.cc	/^void Request::headerOnly()$/;"	f	class:Request
initialize	examples/curl/Curl.cc	/^void Curl::initialize(Option opt)$/;"	f	class:Curl
onRead	examples/curl/Curl.cc	/^void Curl::onRead(int fd)$/;"	f	class:Curl
onTimer	examples/curl/Curl.cc	/^void Curl::onTimer()$/;"	f	class:Curl
onWrite	examples/curl/Curl.cc	/^void Curl::onWrite(int fd)$/;"	f	class:Curl
removeChannel	examples/curl/Curl.cc	/^void Request::removeChannel()$/;"	f	class:Request
setChannel	examples/curl/Curl.cc	/^Channel* Request::setChannel(int fd)$/;"	f	class:Request
setRange	examples/curl/Curl.cc	/^void Request::setRange(const StringArg range)$/;"	f	class:Request
socketCallback	examples/curl/Curl.cc	/^int Curl::socketCallback(CURL* c, int fd, int what, void* userp, void* socketp)$/;"	f	class:Curl
timerCallback	examples/curl/Curl.cc	/^int Curl::timerCallback(CURLM* curlm, long ms, void* userp)$/;"	f	class:Curl
writeData	examples/curl/Curl.cc	/^size_t Request::writeData(char* buffer, size_t size, size_t nmemb, void* userp)$/;"	f	class:Request
~Curl	examples/curl/Curl.cc	/^Curl::~Curl()$/;"	f	class:Curl
~Request	examples/curl/Curl.cc	/^Request::~Request()$/;"	f	class:Request
CURL	examples/curl/Curl.h	/^typedef void CURL;$/;"	t
CURLM	examples/curl/Curl.h	/^typedef void CURLM;$/;"	t
Curl	examples/curl/Curl.h	/^class Curl : boost::noncopyable$/;"	c	namespace:curl
DataCallback	examples/curl/Curl.h	/^  typedef boost::function<void(const char*, int)> DataCallback;$/;"	t	class:curl::Request
DoneCallback	examples/curl/Curl.h	/^  typedef boost::function<void(Request*, int)> DoneCallback;$/;"	t	class:curl::Request
MUDUO_EXAMPLES_CURL_CURL_H	examples/curl/Curl.h	2;"	d
Option	examples/curl/Curl.h	/^  enum Option$/;"	g	class:curl::Curl
Request	examples/curl/Curl.h	/^class Request : public boost::enable_shared_from_this<Request>,$/;"	c	namespace:curl
RequestPtr	examples/curl/Curl.h	/^typedef boost::shared_ptr<Request> RequestPtr;$/;"	t	namespace:curl
channel_	examples/curl/Curl.h	/^  boost::shared_ptr<muduo::net::Channel> channel_;$/;"	m	class:curl::Request
curl	examples/curl/Curl.h	/^namespace curl$/;"	n
curl_	examples/curl/Curl.h	/^  CURL* curl_;$/;"	m	class:curl::Request
curlm_	examples/curl/Curl.h	/^  CURLM* curlm_;$/;"	m	class:curl::Curl
dataCb_	examples/curl/Curl.h	/^  DataCallback dataCb_;$/;"	m	class:curl::Request
doneCb_	examples/curl/Curl.h	/^  DoneCallback doneCb_;$/;"	m	class:curl::Request
getChannel	examples/curl/Curl.h	/^  muduo::net::Channel* getChannel() { return get_pointer(channel_); }$/;"	f	class:curl::Request
getCurl	examples/curl/Curl.h	/^  CURL* getCurl() { return curl_; }$/;"	f	class:curl::Request
getCurlm	examples/curl/Curl.h	/^  CURLM* getCurlm() { return curlm_; }$/;"	f	class:curl::Curl
getLoop	examples/curl/Curl.h	/^  muduo::net::EventLoop* getLoop() { return loop_; }$/;"	f	class:curl::Curl
headerCb_	examples/curl/Curl.h	/^  DataCallback headerCb_;$/;"	m	class:curl::Request
kCURLnossl	examples/curl/Curl.h	/^    kCURLnossl = 0,$/;"	e	enum:curl::Curl::Option
kCURLssl	examples/curl/Curl.h	/^    kCURLssl   = 1,$/;"	e	enum:curl::Curl::Option
loop_	examples/curl/Curl.h	/^  muduo::net::EventLoop* loop_;$/;"	m	class:curl::Curl
muduo	examples/curl/Curl.h	/^namespace muduo$/;"	n
net	examples/curl/Curl.h	/^namespace net$/;"	n	namespace:muduo
owner_	examples/curl/Curl.h	/^  class Curl* owner_;$/;"	m	class:curl::Request	typeref:class:curl::Request::Curl
prevRunningHandles_	examples/curl/Curl.h	/^  int prevRunningHandles_;$/;"	m	class:curl::Curl
runningHandles_	examples/curl/Curl.h	/^  int runningHandles_;$/;"	m	class:curl::Curl
setDataCallback	examples/curl/Curl.h	/^  void setDataCallback(const DataCallback& cb)$/;"	f	class:curl::Request
setDoneCallback	examples/curl/Curl.h	/^  void setDoneCallback(const DoneCallback& cb)$/;"	f	class:curl::Request
setHeaderCallback	examples/curl/Curl.h	/^  void setHeaderCallback(const DataCallback& cb)$/;"	f	class:curl::Request
setopt	examples/curl/Curl.h	/^  int setopt(OPT opt, const char* p)$/;"	f	class:curl::Request
setopt	examples/curl/Curl.h	/^  int setopt(OPT opt, long p)$/;"	f	class:curl::Request
setopt	examples/curl/Curl.h	/^  int setopt(OPT opt, size_t (*p)(char *, size_t , size_t , void *))$/;"	f	class:curl::Request
setopt	examples/curl/Curl.h	/^  int setopt(OPT opt, void* p)$/;"	f	class:curl::Request
Downloader	examples/curl/download.cc	/^  Downloader(EventLoop* loop, const string& url)$/;"	f	class:Downloader
Downloader	examples/curl/download.cc	/^class Downloader : boost::noncopyable$/;"	c	file:
FilePtr	examples/curl/download.cc	/^typedef boost::shared_ptr<FILE> FilePtr;$/;"	t	file:
Piece	examples/curl/download.cc	/^  Piece(const curl::RequestPtr& req,$/;"	f	class:Piece
Piece	examples/curl/download.cc	/^class Piece : boost::noncopyable$/;"	c	file:
acceptRanges_	examples/curl/download.cc	/^  bool acceptRanges_;$/;"	m	class:Downloader	file:
concurrentDownload	examples/curl/download.cc	/^  void concurrentDownload()$/;"	f	class:Downloader	file:
concurrent_	examples/curl/download.cc	/^  int concurrent_;$/;"	m	class:Downloader	file:
curl_	examples/curl/download.cc	/^  curl::Curl curl_;$/;"	m	class:Downloader	file:
doneCb_	examples/curl/download.cc	/^  boost::function<void()> doneCb_;$/;"	m	class:Piece	file:
found_	examples/curl/download.cc	/^  bool found_;$/;"	m	class:Downloader	file:
kConcurrent	examples/curl/download.cc	/^  const static int kConcurrent = 4;$/;"	m	class:Downloader	file:
length_	examples/curl/download.cc	/^  int64_t length_;$/;"	m	class:Downloader	file:
loop_	examples/curl/download.cc	/^  EventLoop* loop_;$/;"	m	class:Downloader	file:
main	examples/curl/download.cc	/^int main(int argc, char* argv[])$/;"	f
onData	examples/curl/download.cc	/^  void onData(const char* data, int len)$/;"	f	class:Downloader	file:
onData	examples/curl/download.cc	/^  void onData(const char* data, int len)$/;"	f	class:Piece	file:
onDone	examples/curl/download.cc	/^  void onDone(curl::Request* c, int code)$/;"	f	class:Piece	file:
onDownloadDone	examples/curl/download.cc	/^  void onDownloadDone()$/;"	f	class:Downloader	file:
onHeader	examples/curl/download.cc	/^  void onHeader(const char* data, int len)$/;"	f	class:Downloader	file:
onHeaderDone	examples/curl/download.cc	/^  void onHeaderDone(curl::Request* c, int code)$/;"	f	class:Downloader	file:
out_	examples/curl/download.cc	/^  FilePtr out_;$/;"	m	class:Downloader	file:
out_	examples/curl/download.cc	/^  FilePtr out_;$/;"	m	class:Piece	file:
pieces_	examples/curl/download.cc	/^  boost::ptr_vector<Piece> pieces_;$/;"	m	class:Downloader	file:
range_	examples/curl/download.cc	/^  muduo::string range_;$/;"	m	class:Piece	file:
req2_	examples/curl/download.cc	/^  curl::RequestPtr req2_;$/;"	m	class:Downloader	file:
req_	examples/curl/download.cc	/^  curl::RequestPtr req_;$/;"	m	class:Downloader	file:
req_	examples/curl/download.cc	/^  curl::RequestPtr req_;$/;"	m	class:Piece	file:
startWith	examples/curl/download.cc	/^bool startWith(const string& str, const char (&prefix)[N])$/;"	f
url_	examples/curl/download.cc	/^  string url_;$/;"	m	class:Downloader	file:
done	examples/curl/mcurl.cc	/^void done(curl::Request* c, int code)$/;"	f
done2	examples/curl/mcurl.cc	/^void done2(curl::Request* c, int code)$/;"	f
main	examples/curl/mcurl.cc	/^int main(int argc, char* argv[])$/;"	f
onData	examples/curl/mcurl.cc	/^void onData(const char* data, int len)$/;"	f
FcgiConstant	examples/fastcgi/fastcgi.cc	/^enum FcgiConstant$/;"	g	file:
FcgiRole	examples/fastcgi/fastcgi.cc	/^enum FcgiRole$/;"	g	file:
FcgiType	examples/fastcgi/fastcgi.cc	/^enum FcgiType$/;"	g	file:
RecordHeader	examples/fastcgi/fastcgi.cc	/^struct FastCgiCodec::RecordHeader$/;"	s	class:FastCgiCodec	file:
endRequest	examples/fastcgi/fastcgi.cc	/^void FastCgiCodec::endRequest(Buffer* buf)$/;"	f	class:FastCgiCodec
endStdout	examples/fastcgi/fastcgi.cc	/^void FastCgiCodec::endStdout(Buffer* buf)$/;"	f	class:FastCgiCodec
id	examples/fastcgi/fastcgi.cc	/^  uint16_t id;$/;"	m	struct:FastCgiCodec::RecordHeader	file:
kFcgiAbortRequest	examples/fastcgi/fastcgi.cc	/^  kFcgiAbortRequest = 2,$/;"	e	enum:FcgiType	file:
kFcgiAuthorizer	examples/fastcgi/fastcgi.cc	/^  kFcgiAuthorizer = 2,$/;"	e	enum:FcgiRole	file:
kFcgiBeginRequest	examples/fastcgi/fastcgi.cc	/^  kFcgiBeginRequest = 1,$/;"	e	enum:FcgiType	file:
kFcgiData	examples/fastcgi/fastcgi.cc	/^  kFcgiData = 8,$/;"	e	enum:FcgiType	file:
kFcgiEndRequest	examples/fastcgi/fastcgi.cc	/^  kFcgiEndRequest = 3,$/;"	e	enum:FcgiType	file:
kFcgiGetValues	examples/fastcgi/fastcgi.cc	/^  kFcgiGetValues = 9,$/;"	e	enum:FcgiType	file:
kFcgiGetValuesResult	examples/fastcgi/fastcgi.cc	/^  kFcgiGetValuesResult = 10,$/;"	e	enum:FcgiType	file:
kFcgiInvalid	examples/fastcgi/fastcgi.cc	/^  kFcgiInvalid = 0,$/;"	e	enum:FcgiType	file:
kFcgiKeepConn	examples/fastcgi/fastcgi.cc	/^  kFcgiKeepConn = 1,$/;"	e	enum:FcgiConstant	file:
kFcgiParams	examples/fastcgi/fastcgi.cc	/^  kFcgiParams = 4,$/;"	e	enum:FcgiType	file:
kFcgiResponder	examples/fastcgi/fastcgi.cc	/^  kFcgiResponder = 1,$/;"	e	enum:FcgiRole	file:
kFcgiStderr	examples/fastcgi/fastcgi.cc	/^  kFcgiStderr = 7,$/;"	e	enum:FcgiType	file:
kFcgiStdin	examples/fastcgi/fastcgi.cc	/^  kFcgiStdin = 5,$/;"	e	enum:FcgiType	file:
kFcgiStdout	examples/fastcgi/fastcgi.cc	/^  kFcgiStdout = 6,$/;"	e	enum:FcgiType	file:
kRecordHeader	examples/fastcgi/fastcgi.cc	/^const unsigned FastCgiCodec::kRecordHeader = static_cast<unsigned>(sizeof(FastCgiCodec::RecordHeader));$/;"	m	class:FastCgiCodec	file:
length	examples/fastcgi/fastcgi.cc	/^  uint16_t length;$/;"	m	struct:FastCgiCodec::RecordHeader	file:
onBeginRequest	examples/fastcgi/fastcgi.cc	/^bool FastCgiCodec::onBeginRequest(const RecordHeader& header, const Buffer* buf)$/;"	f	class:FastCgiCodec
onParams	examples/fastcgi/fastcgi.cc	/^bool FastCgiCodec::onParams(const char* content, uint16_t length)$/;"	f	class:FastCgiCodec
onStdin	examples/fastcgi/fastcgi.cc	/^void FastCgiCodec::onStdin(const char* content, uint16_t length)$/;"	f	class:FastCgiCodec
padding	examples/fastcgi/fastcgi.cc	/^  uint8_t padding;$/;"	m	struct:FastCgiCodec::RecordHeader	file:
parseAllParams	examples/fastcgi/fastcgi.cc	/^bool FastCgiCodec::parseAllParams()$/;"	f	class:FastCgiCodec
parseRequest	examples/fastcgi/fastcgi.cc	/^bool FastCgiCodec::parseRequest(Buffer* buf)$/;"	f	class:FastCgiCodec
readInt16	examples/fastcgi/fastcgi.cc	/^uint16_t readInt16(const void* p)$/;"	f
readLen	examples/fastcgi/fastcgi.cc	/^uint32_t FastCgiCodec::readLen()$/;"	f	class:FastCgiCodec
respond	examples/fastcgi/fastcgi.cc	/^void FastCgiCodec::respond(Buffer* response)$/;"	f	class:FastCgiCodec
type	examples/fastcgi/fastcgi.cc	/^  uint8_t type;$/;"	m	struct:FastCgiCodec::RecordHeader	file:
unused	examples/fastcgi/fastcgi.cc	/^  uint8_t unused;$/;"	m	struct:FastCgiCodec::RecordHeader	file:
version	examples/fastcgi/fastcgi.cc	/^  uint8_t version;$/;"	m	struct:FastCgiCodec::RecordHeader	file:
Callback	examples/fastcgi/fastcgi.h	/^                                muduo::net::Buffer*)> Callback;$/;"	t	class:FastCgiCodec
FastCgiCodec	examples/fastcgi/fastcgi.h	/^  explicit FastCgiCodec(const Callback& cb)$/;"	f	class:FastCgiCodec
FastCgiCodec	examples/fastcgi/fastcgi.h	/^class FastCgiCodec : boost::noncopyable$/;"	c
MUDUO_EXAMPLES_FASTCGI_FASTCGI_H	examples/fastcgi/fastcgi.h	2;"	d
ParamMap	examples/fastcgi/fastcgi.h	/^  typedef std::map<string, string> ParamMap;$/;"	t	class:FastCgiCodec
cb_	examples/fastcgi/fastcgi.h	/^  Callback cb_;$/;"	m	class:FastCgiCodec
gotRequest_	examples/fastcgi/fastcgi.h	/^  bool gotRequest_;$/;"	m	class:FastCgiCodec
kRecordHeader	examples/fastcgi/fastcgi.h	/^  const static unsigned kRecordHeader;$/;"	m	class:FastCgiCodec
keepConn_	examples/fastcgi/fastcgi.h	/^  bool keepConn_;$/;"	m	class:FastCgiCodec
onMessage	examples/fastcgi/fastcgi.h	/^  void onMessage(const muduo::net::TcpConnectionPtr& conn,$/;"	f	class:FastCgiCodec
paramsStream_	examples/fastcgi/fastcgi.h	/^  muduo::net::Buffer paramsStream_;$/;"	m	class:FastCgiCodec
params_	examples/fastcgi/fastcgi.h	/^  ParamMap params_;$/;"	m	class:FastCgiCodec
stdin_	examples/fastcgi/fastcgi.h	/^  muduo::net::Buffer stdin_;$/;"	m	class:FastCgiCodec
kPath	examples/fastcgi/fastcgi_test.cc	/^const string kPath = "\/sudoku\/";$/;"	v
main	examples/fastcgi/fastcgi_test.cc	/^int main(int argc, char* argv[])$/;"	f
onConnection	examples/fastcgi/fastcgi_test.cc	/^void onConnection(const TcpConnectionPtr& conn)$/;"	f
onRequest	examples/fastcgi/fastcgi_test.cc	/^void onRequest(const TcpConnectionPtr& conn,$/;"	f
g_file	examples/filetransfer/download.cc	/^const char* g_file = NULL;$/;"	v
main	examples/filetransfer/download.cc	/^int main(int argc, char* argv[])$/;"	f
onConnection	examples/filetransfer/download.cc	/^void onConnection(const TcpConnectionPtr& conn)$/;"	f
onHighWaterMark	examples/filetransfer/download.cc	/^void onHighWaterMark(const TcpConnectionPtr& conn, size_t len)$/;"	f
readFile	examples/filetransfer/download.cc	/^string readFile(const char* filename)$/;"	f
g_file	examples/filetransfer/download2.cc	/^const char* g_file = NULL;$/;"	v
kBufSize	examples/filetransfer/download2.cc	/^const int kBufSize = 64*1024;$/;"	v
main	examples/filetransfer/download2.cc	/^int main(int argc, char* argv[])$/;"	f
onConnection	examples/filetransfer/download2.cc	/^void onConnection(const TcpConnectionPtr& conn)$/;"	f
onHighWaterMark	examples/filetransfer/download2.cc	/^void onHighWaterMark(const TcpConnectionPtr& conn, size_t len)$/;"	f
onWriteComplete	examples/filetransfer/download2.cc	/^void onWriteComplete(const TcpConnectionPtr& conn)  \/\/写完成回调。读取并发送下次数据.如此往复直到文件内容全部发送完毕$/;"	f
FilePtr	examples/filetransfer/download3.cc	/^typedef boost::shared_ptr<FILE> FilePtr;$/;"	t	file:
g_file	examples/filetransfer/download3.cc	/^const char* g_file = NULL;$/;"	v
kBufSize	examples/filetransfer/download3.cc	/^const int kBufSize = 64*1024;$/;"	v
main	examples/filetransfer/download3.cc	/^int main(int argc, char* argv[])$/;"	f
onConnection	examples/filetransfer/download3.cc	/^void onConnection(const TcpConnectionPtr& conn)$/;"	f
onHighWaterMark	examples/filetransfer/download3.cc	/^void onHighWaterMark(const TcpConnectionPtr& conn, size_t len)$/;"	f
onWriteComplete	examples/filetransfer/download3.cc	/^void onWriteComplete(const TcpConnectionPtr& conn)$/;"	f
Client	examples/filetransfer/loadtest/Client.java	/^public class Client {$/;"	c
PipelineFactory	examples/filetransfer/loadtest/Client.java	/^        private PipelineFactory(int kMinLength, int kMaxLength, CountDownLatch latch) {$/;"	m	class:Client.PipelineFactory	file:
PipelineFactory	examples/filetransfer/loadtest/Client.java	/^    private static final class PipelineFactory implements ChannelPipelineFactory {$/;"	c	class:Client
getPipeline	examples/filetransfer/loadtest/Client.java	/^        public ChannelPipeline getPipeline() throws Exception {$/;"	m	class:Client.PipelineFactory
kClients	examples/filetransfer/loadtest/Client.java	/^    static final int kClients = 500;$/;"	f	class:Client
kMB	examples/filetransfer/loadtest/Client.java	/^    static final int kMB = 1024 * 1024;$/;"	f	class:Client
kMaxLength	examples/filetransfer/loadtest/Client.java	/^        private final int kMaxLength;$/;"	f	class:Client.PipelineFactory	file:
kMaxLength	examples/filetransfer/loadtest/Client.java	/^    static final int kMaxLength = 6 * kMB;$/;"	f	class:Client
kMinLength	examples/filetransfer/loadtest/Client.java	/^        private final int kMinLength;$/;"	f	class:Client.PipelineFactory	file:
kMinLength	examples/filetransfer/loadtest/Client.java	/^    static final int kMinLength = 1 * kMB;$/;"	f	class:Client
latch	examples/filetransfer/loadtest/Client.java	/^        private final CountDownLatch latch;$/;"	f	class:Client.PipelineFactory	file:
main	examples/filetransfer/loadtest/Client.java	/^    public static void main(String[] args) throws Exception {$/;"	m	class:Client
random	examples/filetransfer/loadtest/Client.java	/^        Random random = new Random();$/;"	f	class:Client.PipelineFactory
Handler	examples/filetransfer/loadtest/Handler.java	/^    public Handler(int maxLength, CountDownLatch latch) throws Exception {$/;"	m	class:Handler
Handler	examples/filetransfer/loadtest/Handler.java	/^public class Handler extends SimpleChannelUpstreamHandler {$/;"	c
channelConnected	examples/filetransfer/loadtest/Handler.java	/^    public void channelConnected(ChannelHandlerContext ctx, ChannelStateEvent e)$/;"	m	class:Handler
channelDisconnected	examples/filetransfer/loadtest/Handler.java	/^    public void channelDisconnected(ChannelHandlerContext ctx, ChannelStateEvent e)$/;"	m	class:Handler
created	examples/filetransfer/loadtest/Handler.java	/^    private static int created = 0;$/;"	f	class:Handler	file:
digest	examples/filetransfer/loadtest/Handler.java	/^    private MessageDigest digest;$/;"	f	class:Handler	file:
exceptionCaught	examples/filetransfer/loadtest/Handler.java	/^    public void exceptionCaught(ChannelHandlerContext ctx, ExceptionEvent e) throws Exception {$/;"	m	class:Handler
id	examples/filetransfer/loadtest/Handler.java	/^    private int id;$/;"	f	class:Handler	file:
latch	examples/filetransfer/loadtest/Handler.java	/^    private CountDownLatch latch;$/;"	f	class:Handler	file:
maxLength	examples/filetransfer/loadtest/Handler.java	/^    private final int maxLength;$/;"	f	class:Handler	file:
messageReceived	examples/filetransfer/loadtest/Handler.java	/^    public void messageReceived(ChannelHandlerContext ctx, MessageEvent e) throws Exception {$/;"	m	class:Handler
received	examples/filetransfer/loadtest/Handler.java	/^    private int received = 0;$/;"	f	class:Handler	file:
parseMessage	examples/hub/codec.cc	/^ParseResult pubsub::parseMessage(Buffer* buf,$/;"	f	class:pubsub
MUDUO_EXAMPLES_HUB_CODEC_H	examples/hub/codec.h	2;"	d
ParseResult	examples/hub/codec.h	/^enum ParseResult$/;"	g	namespace:pubsub
kContinue	examples/hub/codec.h	/^  kContinue,$/;"	e	enum:pubsub::ParseResult
kError	examples/hub/codec.h	/^  kError,$/;"	e	enum:pubsub::ParseResult
kSuccess	examples/hub/codec.h	/^  kSuccess,$/;"	e	enum:pubsub::ParseResult
pubsub	examples/hub/codec.h	/^namespace pubsub$/;"	n
ConnectionSubscription	examples/hub/hub.cc	/^typedef std::set<string> ConnectionSubscription;$/;"	t	namespace:pubsub	file:
PubSubServer	examples/hub/hub.cc	/^  PubSubServer(muduo::net::EventLoop* loop,$/;"	f	class:pubsub::PubSubServer
PubSubServer	examples/hub/hub.cc	/^class PubSubServer : boost::noncopyable$/;"	c	namespace:pubsub	file:
Topic	examples/hub/hub.cc	/^  Topic(const string& topic)$/;"	f	class:pubsub::Topic
Topic	examples/hub/hub.cc	/^class Topic : public muduo::copyable$/;"	c	namespace:pubsub	file:
add	examples/hub/hub.cc	/^  void add(const TcpConnectionPtr& conn)$/;"	f	class:pubsub::Topic
audiences_	examples/hub/hub.cc	/^  std::set<TcpConnectionPtr> audiences_;$/;"	m	class:pubsub::Topic	file:
content_	examples/hub/hub.cc	/^  string content_;$/;"	m	class:pubsub::Topic	file:
doPublish	examples/hub/hub.cc	/^  void doPublish(const string& source,$/;"	f	class:pubsub::PubSubServer	file:
doSubscribe	examples/hub/hub.cc	/^  void doSubscribe(const TcpConnectionPtr& conn,$/;"	f	class:pubsub::PubSubServer	file:
doUnsubscribe	examples/hub/hub.cc	/^  void doUnsubscribe(const TcpConnectionPtr& conn,$/;"	f	class:pubsub::PubSubServer	file:
getTopic	examples/hub/hub.cc	/^  Topic& getTopic(const string& topic)$/;"	f	class:pubsub::PubSubServer	file:
lastPubTime_	examples/hub/hub.cc	/^  Timestamp lastPubTime_;$/;"	m	class:pubsub::Topic	file:
loop_	examples/hub/hub.cc	/^  EventLoop* loop_;$/;"	m	class:pubsub::PubSubServer	file:
main	examples/hub/hub.cc	/^int main(int argc, char* argv[])$/;"	f
makeMessage	examples/hub/hub.cc	/^  string makeMessage()$/;"	f	class:pubsub::Topic	file:
onConnection	examples/hub/hub.cc	/^  void onConnection(const TcpConnectionPtr& conn)$/;"	f	class:pubsub::PubSubServer	file:
onMessage	examples/hub/hub.cc	/^  void onMessage(const TcpConnectionPtr& conn,$/;"	f	class:pubsub::PubSubServer	file:
publish	examples/hub/hub.cc	/^  void publish(const string& content, Timestamp time)$/;"	f	class:pubsub::Topic
pubsub	examples/hub/hub.cc	/^namespace pubsub$/;"	n	file:
remove	examples/hub/hub.cc	/^  void remove(const TcpConnectionPtr& conn)$/;"	f	class:pubsub::Topic
server_	examples/hub/hub.cc	/^  TcpServer server_;$/;"	m	class:pubsub::PubSubServer	file:
start	examples/hub/hub.cc	/^  void start()$/;"	f	class:pubsub::PubSubServer
timePublish	examples/hub/hub.cc	/^  void timePublish()$/;"	f	class:pubsub::PubSubServer	file:
topic_	examples/hub/hub.cc	/^  string topic_;$/;"	m	class:pubsub::Topic	file:
topics_	examples/hub/hub.cc	/^  std::map<string, Topic> topics_;$/;"	m	class:pubsub::PubSubServer	file:
connection	examples/hub/pub.cc	/^void connection(PubSubClient* client)$/;"	f
g_content	examples/hub/pub.cc	/^string g_content;$/;"	v
g_topic	examples/hub/pub.cc	/^string g_topic;$/;"	v
main	examples/hub/pub.cc	/^int main(int argc, char* argv[])$/;"	f
PubSubClient	examples/hub/pubsub.cc	/^PubSubClient::PubSubClient(EventLoop* loop,$/;"	f	class:PubSubClient
connected	examples/hub/pubsub.cc	/^bool PubSubClient::connected() const$/;"	f	class:PubSubClient
onConnection	examples/hub/pubsub.cc	/^void PubSubClient::onConnection(const TcpConnectionPtr& conn)$/;"	f	class:PubSubClient
onMessage	examples/hub/pubsub.cc	/^void PubSubClient::onMessage(const TcpConnectionPtr& conn,$/;"	f	class:PubSubClient
publish	examples/hub/pubsub.cc	/^bool PubSubClient::publish(const string& topic, const string& content)$/;"	f	class:PubSubClient
send	examples/hub/pubsub.cc	/^bool PubSubClient::send(const string& message)$/;"	f	class:PubSubClient
start	examples/hub/pubsub.cc	/^void PubSubClient::start()$/;"	f	class:PubSubClient
stop	examples/hub/pubsub.cc	/^void PubSubClient::stop()$/;"	f	class:PubSubClient
subscribe	examples/hub/pubsub.cc	/^bool PubSubClient::subscribe(const string& topic, const SubscribeCallback& cb)$/;"	f	class:PubSubClient
unsubscribe	examples/hub/pubsub.cc	/^void PubSubClient::unsubscribe(const string& topic)$/;"	f	class:PubSubClient
ConnectionCallback	examples/hub/pubsub.h	/^  typedef boost::function<void (PubSubClient*)> ConnectionCallback;$/;"	t	class:pubsub::PubSubClient
MUDUO_EXAMPLES_HUB_PUBSUB_H	examples/hub/pubsub.h	2;"	d
PubSubClient	examples/hub/pubsub.h	/^class PubSubClient : boost::noncopyable$/;"	c	namespace:pubsub
SubscribeCallback	examples/hub/pubsub.h	/^                                Timestamp)> SubscribeCallback;$/;"	t	class:pubsub::PubSubClient
client_	examples/hub/pubsub.h	/^  muduo::net::TcpClient client_;$/;"	m	class:pubsub::PubSubClient
conn_	examples/hub/pubsub.h	/^  muduo::net::TcpConnectionPtr conn_;$/;"	m	class:pubsub::PubSubClient
connectionCallback_	examples/hub/pubsub.h	/^  ConnectionCallback connectionCallback_;$/;"	m	class:pubsub::PubSubClient
pubsub	examples/hub/pubsub.h	/^namespace pubsub$/;"	n
setConnectionCallback	examples/hub/pubsub.h	/^  void setConnectionCallback(const ConnectionCallback& cb)$/;"	f	class:pubsub::PubSubClient
subscribeCallback_	examples/hub/pubsub.h	/^  SubscribeCallback subscribeCallback_;$/;"	m	class:pubsub::PubSubClient
connection	examples/hub/sub.cc	/^void connection(PubSubClient* client)$/;"	f
g_topics	examples/hub/sub.cc	/^std::vector<string> g_topics;$/;"	v
main	examples/hub/sub.cc	/^int main(int argc, char* argv[])$/;"	f
subscription	examples/hub/sub.cc	/^void subscription(const string& topic, const string& content, Timestamp)$/;"	f
EchoServer	examples/idleconnection/echo.cc	/^EchoServer::EchoServer(EventLoop* loop,$/;"	f	class:EchoServer
dumpConnectionBuckets	examples/idleconnection/echo.cc	/^void EchoServer::dumpConnectionBuckets() const      \/\/打印circular_buffer的变化情况$/;"	f	class:EchoServer
onConnection	examples/idleconnection/echo.cc	/^void EchoServer::onConnection(const TcpConnectionPtr& conn)$/;"	f	class:EchoServer
onMessage	examples/idleconnection/echo.cc	/^void EchoServer::onMessage(const TcpConnectionPtr& conn,$/;"	f	class:EchoServer
onTimer	examples/idleconnection/echo.cc	/^void EchoServer::onTimer()  \/\/每秒的回调函数，模拟时间轮$/;"	f	class:EchoServer
start	examples/idleconnection/echo.cc	/^void EchoServer::start()$/;"	f	class:EchoServer
Bucket	examples/idleconnection/echo.h	/^  typedef boost::unordered_set<EntryPtr> Bucket;  \/\/unordered_set是散列容器，基于哈希表实现，通过相应哈希函数处理关键字得到相应关键值$/;"	t	class:EchoServer
EchoServer	examples/idleconnection/echo.h	/^class EchoServer$/;"	c
Entry	examples/idleconnection/echo.h	/^    explicit Entry(const WeakTcpConnectionPtr& weakConn)  \/*初始化时候获得muduo::net::TcpConnection类型对象的弱指针*\/$/;"	f	struct:EchoServer::Entry
Entry	examples/idleconnection/echo.h	/^  struct Entry : public muduo::copyable$/;"	s	class:EchoServer
EntryPtr	examples/idleconnection/echo.h	/^  typedef boost::shared_ptr<Entry> EntryPtr;$/;"	t	class:EchoServer
MUDUO_EXAMPLES_IDLECONNECTION_ECHO_H	examples/idleconnection/echo.h	2;"	d
WeakConnectionList	examples/idleconnection/echo.h	/^  typedef boost::circular_buffer<Bucket> WeakConnectionList;  \/\/circular_buffer实现了循环缓冲的数据结构，但大小固定，当到达容器末尾，将自动循环利用容器的另一端空间(如满时，在末尾添加，则begin处元素被删除，begin+1处成为新的begin，依次。。；如果在头添加则反过来)$/;"	t	class:EchoServer
WeakEntryPtr	examples/idleconnection/echo.h	/^  typedef boost::weak_ptr<Entry> WeakEntryPtr;  \/\/弱引用，weak_ptr不会增加shared_ptr对象的引用计数$/;"	t	class:EchoServer
WeakTcpConnectionPtr	examples/idleconnection/echo.h	/^  typedef boost::weak_ptr<muduo::net::TcpConnection> WeakTcpConnectionPtr;$/;"	t	class:EchoServer
boost	examples/idleconnection/echo.h	/^namespace boost$/;"	n
connectionBuckets_	examples/idleconnection/echo.h	/^  WeakConnectionList connectionBuckets_;  \/\/存放连接的强指针$/;"	m	class:EchoServer
hash_value	examples/idleconnection/echo.h	/^inline size_t hash_value(const boost::shared_ptr<T>& x)$/;"	f	namespace:boost
server_	examples/idleconnection/echo.h	/^  muduo::net::TcpServer server_;$/;"	m	class:EchoServer
weakConn_	examples/idleconnection/echo.h	/^    WeakTcpConnectionPtr weakConn_; $/;"	m	struct:EchoServer::Entry
~Entry	examples/idleconnection/echo.h	/^    ~Entry()     \/*析构时候将弱指针提升为强指针,提升成功则关闭写端*\/$/;"	f	struct:EchoServer::Entry
main	examples/idleconnection/main.cc	/^int main(int argc, char* argv[])$/;"	f
testHash	examples/idleconnection/main.cc	/^void testHash()$/;"	f
EchoServer	examples/idleconnection/sortedlist.cc	/^EchoServer::EchoServer(EventLoop* loop,$/;"	f	class:EchoServer
EchoServer	examples/idleconnection/sortedlist.cc	/^class EchoServer$/;"	c	file:
Node	examples/idleconnection/sortedlist.cc	/^  struct Node : public muduo::copyable$/;"	s	class:EchoServer	file:
WeakConnectionList	examples/idleconnection/sortedlist.cc	/^  typedef std::list<WeakTcpConnectionPtr> WeakConnectionList;$/;"	t	class:EchoServer	file:
WeakTcpConnectionPtr	examples/idleconnection/sortedlist.cc	/^  typedef boost::weak_ptr<TcpConnection> WeakTcpConnectionPtr;$/;"	t	class:EchoServer	file:
connectionList_	examples/idleconnection/sortedlist.cc	/^  WeakConnectionList connectionList_;$/;"	m	class:EchoServer	file:
dumpConnectionList	examples/idleconnection/sortedlist.cc	/^void EchoServer::dumpConnectionList() const$/;"	f	class:EchoServer
idleSeconds_	examples/idleconnection/sortedlist.cc	/^  int idleSeconds_;$/;"	m	class:EchoServer	file:
lastReceiveTime	examples/idleconnection/sortedlist.cc	/^    Timestamp lastReceiveTime;$/;"	m	struct:EchoServer::Node	file:
main	examples/idleconnection/sortedlist.cc	/^int main(int argc, char* argv[])$/;"	f
onConnection	examples/idleconnection/sortedlist.cc	/^void EchoServer::onConnection(const TcpConnectionPtr& conn)$/;"	f	class:EchoServer
onMessage	examples/idleconnection/sortedlist.cc	/^void EchoServer::onMessage(const TcpConnectionPtr& conn,$/;"	f	class:EchoServer
onTimer	examples/idleconnection/sortedlist.cc	/^void EchoServer::onTimer()$/;"	f	class:EchoServer
position	examples/idleconnection/sortedlist.cc	/^    WeakConnectionList::iterator position;$/;"	m	struct:EchoServer::Node	file:
server_	examples/idleconnection/sortedlist.cc	/^  TcpServer server_;$/;"	m	class:EchoServer	file:
start	examples/idleconnection/sortedlist.cc	/^  void start()$/;"	f	class:EchoServer
EchoServer	examples/maxconnection/echo.cc	/^EchoServer::EchoServer(EventLoop* loop,$/;"	f	class:EchoServer
onConnection	examples/maxconnection/echo.cc	/^void EchoServer::onConnection(const TcpConnectionPtr& conn)$/;"	f	class:EchoServer
onMessage	examples/maxconnection/echo.cc	/^void EchoServer::onMessage(const TcpConnectionPtr& conn,$/;"	f	class:EchoServer
start	examples/maxconnection/echo.cc	/^void EchoServer::start()$/;"	f	class:EchoServer
EchoServer	examples/maxconnection/echo.h	/^class EchoServer$/;"	c
MUDUO_EXAMPLES_SIMPLE_ECHO_ECHO_H	examples/maxconnection/echo.h	2;"	d
kMaxConnections_	examples/maxconnection/echo.h	/^  const int kMaxConnections_;$/;"	m	class:EchoServer
numConnected_	examples/maxconnection/echo.h	/^  int numConnected_; \/\/ should be atomic_int$/;"	m	class:EchoServer
server_	examples/maxconnection/echo.h	/^  muduo::net::TcpServer server_;$/;"	m	class:EchoServer
main	examples/maxconnection/main.cc	/^int main(int argc, char* argv[])$/;"	f
Client	examples/memcached/client/bench.cc	/^  Client(const string& name,$/;"	f	class:Client
Client	examples/memcached/client/bench.cc	/^class Client : boost::noncopyable$/;"	c	file:
Operation	examples/memcached/client/bench.cc	/^  enum Operation$/;"	g	class:Client	file:
acked_	examples/memcached/client/bench.cc	/^  int acked_;$/;"	m	class:Client	file:
client_	examples/memcached/client/bench.cc	/^  TcpClient client_;$/;"	m	class:Client	file:
conn_	examples/memcached/client/bench.cc	/^  TcpConnectionPtr conn_;$/;"	m	class:Client	file:
connected_	examples/memcached/client/bench.cc	/^  CountDownLatch* const connected_;$/;"	m	class:Client	file:
fill	examples/memcached/client/bench.cc	/^  void fill(Buffer* buf)$/;"	f	class:Client	file:
finished_	examples/memcached/client/bench.cc	/^  CountDownLatch* const finished_;$/;"	m	class:Client	file:
kGet	examples/memcached/client/bench.cc	/^    kGet,$/;"	e	enum:Client::Operation	file:
kSet	examples/memcached/client/bench.cc	/^    kSet,$/;"	e	enum:Client::Operation	file:
keys_	examples/memcached/client/bench.cc	/^  const int keys_;$/;"	m	class:Client	file:
main	examples/memcached/client/bench.cc	/^int main(int argc, char* argv[])$/;"	f
name_	examples/memcached/client/bench.cc	/^  string name_;$/;"	m	class:Client	file:
onConnection	examples/memcached/client/bench.cc	/^  void onConnection(const TcpConnectionPtr& conn)$/;"	f	class:Client	file:
onMessage	examples/memcached/client/bench.cc	/^  void onMessage(const TcpConnectionPtr& conn,$/;"	f	class:Client	file:
op_	examples/memcached/client/bench.cc	/^  const Operation op_;$/;"	m	class:Client	file:
requests_	examples/memcached/client/bench.cc	/^  const int requests_;$/;"	m	class:Client	file:
send	examples/memcached/client/bench.cc	/^  void send()$/;"	f	class:Client
sent_	examples/memcached/client/bench.cc	/^  int sent_;$/;"	m	class:Client	file:
value_	examples/memcached/client/bench.cc	/^  string value_;$/;"	m	class:Client	file:
valuelen_	examples/memcached/client/bench.cc	/^  const int valuelen_;$/;"	m	class:Client	file:
Item	examples/memcached/server/Item.cc	/^Item::Item(StringPiece keyArg,$/;"	f	class:Item
append	examples/memcached/server/Item.cc	/^void Item::append(const char* data, size_t len)$/;"	f	class:Item
output	examples/memcached/server/Item.cc	/^void Item::output(Buffer* out, bool needCas) const$/;"	f	class:Item
resetKey	examples/memcached/server/Item.cc	/^void Item::resetKey(StringPiece k)$/;"	f	class:Item
ConstItemPtr	examples/memcached/server/Item.h	/^typedef boost::shared_ptr<const Item> ConstItemPtr;  \/\/ TODO: use unique_ptr$/;"	t
Item	examples/memcached/server/Item.h	/^class Item : boost::noncopyable$/;"	c
ItemPtr	examples/memcached/server/Item.h	/^typedef boost::shared_ptr<Item> ItemPtr;  \/\/ TODO: use unique_ptr$/;"	t
MUDUO_EXAMPLES_MEMCACHED_SERVER_ITEM_H	examples/memcached/server/Item.h	2;"	d
UpdatePolicy	examples/memcached/server/Item.h	/^  enum UpdatePolicy$/;"	g	class:Item
cas	examples/memcached/server/Item.h	/^  uint64_t cas() const$/;"	f	class:Item
cas_	examples/memcached/server/Item.h	/^  uint64_t       cas_;$/;"	m	class:Item
data_	examples/memcached/server/Item.h	/^  char*          data_;$/;"	m	class:Item
endsWithCRLF	examples/memcached/server/Item.h	/^  bool endsWithCRLF() const$/;"	f	class:Item
flags	examples/memcached/server/Item.h	/^  uint32_t flags() const$/;"	f	class:Item
flags_	examples/memcached/server/Item.h	/^  const uint32_t flags_;$/;"	m	class:Item
hash	examples/memcached/server/Item.h	/^  size_t hash() const$/;"	f	class:Item
hash_	examples/memcached/server/Item.h	/^  size_t         hash_;$/;"	m	class:Item
kAdd	examples/memcached/server/Item.h	/^    kAdd,$/;"	e	enum:Item::UpdatePolicy
kAppend	examples/memcached/server/Item.h	/^    kAppend,$/;"	e	enum:Item::UpdatePolicy
kCas	examples/memcached/server/Item.h	/^    kCas,$/;"	e	enum:Item::UpdatePolicy
kInvalid	examples/memcached/server/Item.h	/^    kInvalid,$/;"	e	enum:Item::UpdatePolicy
kPrepend	examples/memcached/server/Item.h	/^    kPrepend,$/;"	e	enum:Item::UpdatePolicy
kReplace	examples/memcached/server/Item.h	/^    kReplace,$/;"	e	enum:Item::UpdatePolicy
kSet	examples/memcached/server/Item.h	/^    kSet,$/;"	e	enum:Item::UpdatePolicy
key	examples/memcached/server/Item.h	/^  muduo::StringPiece key() const$/;"	f	class:Item
keylen_	examples/memcached/server/Item.h	/^  int            keylen_;$/;"	m	class:Item
makeItem	examples/memcached/server/Item.h	/^  static ItemPtr makeItem(StringPiece keyArg,$/;"	f	class:Item
muduo	examples/memcached/server/Item.h	/^namespace muduo$/;"	n
neededBytes	examples/memcached/server/Item.h	/^  size_t neededBytes() const$/;"	f	class:Item
net	examples/memcached/server/Item.h	/^namespace net$/;"	n	namespace:muduo
receivedBytes_	examples/memcached/server/Item.h	/^  int            receivedBytes_;  \/\/ FIXME: remove this member$/;"	m	class:Item
rel_exptime	examples/memcached/server/Item.h	/^  int rel_exptime() const$/;"	f	class:Item
rel_exptime_	examples/memcached/server/Item.h	/^  const int      rel_exptime_;$/;"	m	class:Item
setCas	examples/memcached/server/Item.h	/^  void setCas(uint64_t casArg)$/;"	f	class:Item
totalLen	examples/memcached/server/Item.h	/^  int totalLen() const { return keylen_ + valuelen_; }$/;"	f	class:Item
value	examples/memcached/server/Item.h	/^  const char* value() const$/;"	f	class:Item
valueLength	examples/memcached/server/Item.h	/^  size_t valueLength() const$/;"	f	class:Item
valuelen_	examples/memcached/server/Item.h	/^  const int      valuelen_;$/;"	m	class:Item
~Item	examples/memcached/server/Item.h	/^  ~Item()$/;"	f	class:Item
MemcacheServer	examples/memcached/server/MemcacheServer.cc	/^MemcacheServer::MemcacheServer(muduo::net::EventLoop* loop, const Options& options)$/;"	f	class:MemcacheServer
Options	examples/memcached/server/MemcacheServer.cc	/^MemcacheServer::Options::Options()$/;"	f	class:MemcacheServer::Options
Stats	examples/memcached/server/MemcacheServer.cc	/^struct MemcacheServer::Stats$/;"	s	class:MemcacheServer	file:
deleteItem	examples/memcached/server/MemcacheServer.cc	/^bool MemcacheServer::deleteItem(const ConstItemPtr& key)$/;"	f	class:MemcacheServer
getItem	examples/memcached/server/MemcacheServer.cc	/^ConstItemPtr MemcacheServer::getItem(const ConstItemPtr& key) const$/;"	f	class:MemcacheServer
onConnection	examples/memcached/server/MemcacheServer.cc	/^void MemcacheServer::onConnection(const TcpConnectionPtr& conn)$/;"	f	class:MemcacheServer
start	examples/memcached/server/MemcacheServer.cc	/^void MemcacheServer::start()$/;"	f	class:MemcacheServer
stop	examples/memcached/server/MemcacheServer.cc	/^void MemcacheServer::stop()$/;"	f	class:MemcacheServer
storeItem	examples/memcached/server/MemcacheServer.cc	/^bool MemcacheServer::storeItem(const ItemPtr& item, const Item::UpdatePolicy policy, bool* exists)$/;"	f	class:MemcacheServer
~MemcacheServer	examples/memcached/server/MemcacheServer.cc	/^MemcacheServer::~MemcacheServer()$/;"	f	class:MemcacheServer
Equal	examples/memcached/server/MemcacheServer.h	/^  struct Equal$/;"	s	class:MemcacheServer
Hash	examples/memcached/server/MemcacheServer.h	/^  struct Hash$/;"	s	class:MemcacheServer
ItemMap	examples/memcached/server/MemcacheServer.h	/^  typedef boost::unordered_set<ConstItemPtr, Hash, Equal> ItemMap;$/;"	t	class:MemcacheServer
MUDUO_EXAMPLES_MEMCACHED_SERVER_MEMCACHESERVER_H	examples/memcached/server/MemcacheServer.h	2;"	d
MapWithLock	examples/memcached/server/MemcacheServer.h	/^  struct MapWithLock$/;"	s	class:MemcacheServer
MemcacheServer	examples/memcached/server/MemcacheServer.h	/^class MemcacheServer : boost::noncopyable$/;"	c
Options	examples/memcached/server/MemcacheServer.h	/^  struct Options$/;"	s	class:MemcacheServer
gperfport	examples/memcached/server/MemcacheServer.h	/^    uint16_t gperfport;$/;"	m	struct:MemcacheServer::Options
items	examples/memcached/server/MemcacheServer.h	/^    ItemMap items;$/;"	m	struct:MemcacheServer::MapWithLock
kShards	examples/memcached/server/MemcacheServer.h	/^  const static int kShards = 4096;$/;"	m	class:MemcacheServer
loop_	examples/memcached/server/MemcacheServer.h	/^  muduo::net::EventLoop* loop_;  \/\/ not own$/;"	m	class:MemcacheServer
mutex	examples/memcached/server/MemcacheServer.h	/^    mutable muduo::MutexLock mutex;$/;"	m	struct:MemcacheServer::MapWithLock
mutex_	examples/memcached/server/MemcacheServer.h	/^  mutable muduo::MutexLock mutex_;$/;"	m	class:MemcacheServer
operator ()	examples/memcached/server/MemcacheServer.h	/^    bool operator()(const ConstItemPtr& x, const ConstItemPtr& y) const$/;"	f	struct:MemcacheServer::Equal
operator ()	examples/memcached/server/MemcacheServer.h	/^    size_t operator()(const ConstItemPtr& x) const$/;"	f	struct:MemcacheServer::Hash
options_	examples/memcached/server/MemcacheServer.h	/^  Options options_;$/;"	m	class:MemcacheServer
server_	examples/memcached/server/MemcacheServer.h	/^  muduo::net::TcpServer server_;$/;"	m	class:MemcacheServer
sessions_	examples/memcached/server/MemcacheServer.h	/^  boost::unordered_map<string, SessionPtr> sessions_;$/;"	m	class:MemcacheServer
setThreadNum	examples/memcached/server/MemcacheServer.h	/^  void setThreadNum(int threads) { server_.setThreadNum(threads); }$/;"	f	class:MemcacheServer
shards_	examples/memcached/server/MemcacheServer.h	/^  boost::array<MapWithLock, kShards> shards_;$/;"	m	class:MemcacheServer
startTime	examples/memcached/server/MemcacheServer.h	/^  time_t startTime() const { return startTime_; }$/;"	f	class:MemcacheServer
startTime_	examples/memcached/server/MemcacheServer.h	/^  const time_t startTime_;$/;"	m	class:MemcacheServer
stats_	examples/memcached/server/MemcacheServer.h	/^  boost::scoped_ptr<Stats> stats_;$/;"	m	class:MemcacheServer
tcpport	examples/memcached/server/MemcacheServer.h	/^    uint16_t tcpport;$/;"	m	struct:MemcacheServer::Options
threads	examples/memcached/server/MemcacheServer.h	/^    int threads;$/;"	m	struct:MemcacheServer::Options
udpport	examples/memcached/server/MemcacheServer.h	/^    uint16_t udpport;$/;"	m	struct:MemcacheServer::Options
Reader	examples/memcached/server/Session.cc	/^  Reader(Tokenizer::iterator& beg, Tokenizer::iterator end)$/;"	f	struct:Session::Reader
Reader	examples/memcached/server/Session.cc	/^struct Session::Reader$/;"	s	class:Session	file:
discardValue	examples/memcached/server/Session.cc	/^void Session::discardValue(muduo::net::Buffer* buf)$/;"	f	class:Session
doDelete	examples/memcached/server/Session.cc	/^void Session::doDelete(Session::Tokenizer::iterator& beg, Session::Tokenizer::iterator end)$/;"	f	class:Session
doUpdate	examples/memcached/server/Session.cc	/^bool Session::doUpdate(Session::Tokenizer::iterator& beg, Session::Tokenizer::iterator end)$/;"	f	class:Session
first_	examples/memcached/server/Session.cc	/^  Tokenizer::iterator first_;$/;"	m	struct:Session::Reader	file:
isBinaryProtocol	examples/memcached/server/Session.cc	/^static bool isBinaryProtocol(uint8_t firstByte)$/;"	f	file:
kLongestKeySize	examples/memcached/server/Session.cc	/^const int kLongestKeySize = 250;$/;"	v
last_	examples/memcached/server/Session.cc	/^  Tokenizer::iterator last_;;$/;"	m	struct:Session::Reader	file:
onMessage	examples/memcached/server/Session.cc	/^void Session::onMessage(const muduo::net::TcpConnectionPtr& conn,$/;"	f	class:Session
operator ()	examples/memcached/server/Session.cc	/^bool Session::SpaceSeparator::operator()(InputIterator& next, InputIterator end, Token& tok)$/;"	f	class:Session::SpaceSeparator
processRequest	examples/memcached/server/Session.cc	/^bool Session::processRequest(StringPiece request)$/;"	f	class:Session
read	examples/memcached/server/Session.cc	/^  bool read(T* val)$/;"	f	struct:Session::Reader
receiveValue	examples/memcached/server/Session.cc	/^void Session::receiveValue(muduo::net::Buffer* buf)$/;"	f	class:Session
reply	examples/memcached/server/Session.cc	/^void Session::reply(muduo::StringPiece msg)$/;"	f	class:Session
resetRequest	examples/memcached/server/Session.cc	/^void Session::resetRequest()$/;"	f	class:Session
MUDUO_EXAMPLES_MEMCACHED_SERVER_SESSION_H	examples/memcached/server/Session.h	2;"	d
Protocol	examples/memcached/server/Session.h	/^  enum Protocol$/;"	g	class:Session
Session	examples/memcached/server/Session.h	/^  Session(MemcacheServer* owner, const muduo::net::TcpConnectionPtr& conn)$/;"	f	class:Session
Session	examples/memcached/server/Session.h	/^class Session : boost::noncopyable,$/;"	c
SessionPtr	examples/memcached/server/Session.h	/^typedef boost::shared_ptr<Session> SessionPtr;$/;"	t
SpaceSeparator	examples/memcached/server/Session.h	/^  struct SpaceSeparator$/;"	s	class:Session
State	examples/memcached/server/Session.h	/^  enum State$/;"	g	class:Session
Tokenizer	examples/memcached/server/Session.h	/^      muduo::StringPiece> Tokenizer;$/;"	t	class:Session
bytesRead_	examples/memcached/server/Session.h	/^  size_t bytesRead_;$/;"	m	class:Session
bytesToDiscard_	examples/memcached/server/Session.h	/^  size_t bytesToDiscard_;$/;"	m	class:Session
command_	examples/memcached/server/Session.h	/^  string command_;$/;"	m	class:Session
conn_	examples/memcached/server/Session.h	/^  muduo::net::TcpConnectionPtr conn_;$/;"	m	class:Session
currItem_	examples/memcached/server/Session.h	/^  ItemPtr currItem_;$/;"	m	class:Session
kAscii	examples/memcached/server/Session.h	/^    kAscii,$/;"	e	enum:Session::Protocol
kAuto	examples/memcached/server/Session.h	/^    kAuto,$/;"	e	enum:Session::Protocol
kBinary	examples/memcached/server/Session.h	/^    kBinary,$/;"	e	enum:Session::Protocol
kDiscardValue	examples/memcached/server/Session.h	/^    kDiscardValue,$/;"	e	enum:Session::State
kLongestKey	examples/memcached/server/Session.h	/^  static string kLongestKey;$/;"	m	class:Session
kNewCommand	examples/memcached/server/Session.h	/^    kNewCommand,$/;"	e	enum:Session::State
kReceiveValue	examples/memcached/server/Session.h	/^    kReceiveValue,$/;"	e	enum:Session::State
needle_	examples/memcached/server/Session.h	/^  ItemPtr needle_;$/;"	m	class:Session
noreply_	examples/memcached/server/Session.h	/^  bool noreply_;$/;"	m	class:Session
outputBuf_	examples/memcached/server/Session.h	/^  muduo::net::Buffer outputBuf_;$/;"	m	class:Session
owner_	examples/memcached/server/Session.h	/^  MemcacheServer* owner_;$/;"	m	class:Session
policy_	examples/memcached/server/Session.h	/^  Item::UpdatePolicy policy_;$/;"	m	class:Session
protocol_	examples/memcached/server/Session.h	/^  Protocol protocol_;$/;"	m	class:Session
requestsProcessed_	examples/memcached/server/Session.h	/^  size_t requestsProcessed_;$/;"	m	class:Session
reset	examples/memcached/server/Session.h	/^    void reset() {}$/;"	f	struct:Session::SpaceSeparator
state_	examples/memcached/server/Session.h	/^  State state_;$/;"	m	class:Session
~Session	examples/memcached/server/Session.h	/^  ~Session()$/;"	f	class:Session
main	examples/memcached/server/footprint_test.cc	/^int main(int argc, char* argv[])$/;"	f
main	examples/memcached/server/server.cc	/^int main(int argc, char* argv[])$/;"	f
parseCommandLine	examples/memcached/server/server.cc	/^bool parseCommandLine(int argc, char* argv[], MemcacheServer::Options* options)$/;"	f
DemuxServer	examples/multiplexer/demux.cc	/^  DemuxServer(EventLoop* loop, const InetAddress& listenAddr, const InetAddress& socksAddr)$/;"	f	class:DemuxServer
DemuxServer	examples/multiplexer/demux.cc	/^class DemuxServer : boost::noncopyable$/;"	c	file:
Entry	examples/multiplexer/demux.cc	/^struct Entry$/;"	s	file:
TcpClientPtr	examples/multiplexer/demux.cc	/^typedef boost::shared_ptr<TcpClient> TcpClientPtr;$/;"	t	file:
client	examples/multiplexer/demux.cc	/^  TcpClientPtr client;$/;"	m	struct:Entry	file:
connId	examples/multiplexer/demux.cc	/^  int connId;$/;"	m	struct:Entry	file:
connection	examples/multiplexer/demux.cc	/^  TcpConnectionPtr connection;$/;"	m	struct:Entry	file:
doCommand	examples/multiplexer/demux.cc	/^  void doCommand(const string& cmd)$/;"	f	class:DemuxServer
kHeaderLen	examples/multiplexer/demux.cc	/^const size_t kHeaderLen = 3;$/;"	v
kListenPort	examples/multiplexer/demux.cc	/^const uint16_t kListenPort = 9999;$/;"	v
kMaxPacketLen	examples/multiplexer/demux.cc	/^const size_t kMaxPacketLen = 255;$/;"	v
kSocksPort	examples/multiplexer/demux.cc	/^const uint16_t kSocksPort = 7777;$/;"	v
loop_	examples/multiplexer/demux.cc	/^  EventLoop* loop_;$/;"	m	class:DemuxServer	file:
main	examples/multiplexer/demux.cc	/^int main(int argc, char* argv[])$/;"	f
onServerConnection	examples/multiplexer/demux.cc	/^  void onServerConnection(const TcpConnectionPtr& conn)$/;"	f	class:DemuxServer
onServerMessage	examples/multiplexer/demux.cc	/^  void onServerMessage(const TcpConnectionPtr& conn, Buffer* buf, Timestamp)$/;"	f	class:DemuxServer
onSocksConnection	examples/multiplexer/demux.cc	/^  void onSocksConnection(int connId, const TcpConnectionPtr& conn)$/;"	f	class:DemuxServer
onSocksMessage	examples/multiplexer/demux.cc	/^  void onSocksMessage(int connId, const TcpConnectionPtr& conn, Buffer* buf, Timestamp)$/;"	f	class:DemuxServer
pending	examples/multiplexer/demux.cc	/^  Buffer pending;$/;"	m	struct:Entry	file:
sendServerPacket	examples/multiplexer/demux.cc	/^  void sendServerPacket(int connId, Buffer* buf)$/;"	f	class:DemuxServer
serverConn_	examples/multiplexer/demux.cc	/^  TcpConnectionPtr serverConn_;$/;"	m	class:DemuxServer	file:
server_	examples/multiplexer/demux.cc	/^  TcpServer server_;$/;"	m	class:DemuxServer	file:
socksAddr_	examples/multiplexer/demux.cc	/^  const InetAddress socksAddr_;$/;"	m	class:DemuxServer	file:
socksConns_	examples/multiplexer/demux.cc	/^  std::map<int, Entry> socksConns_;$/;"	m	class:DemuxServer	file:
socksIp	examples/multiplexer/demux.cc	/^const char* socksIp = "127.0.0.1";$/;"	v
start	examples/multiplexer/demux.cc	/^  void start()$/;"	f	class:DemuxServer
DataEvent	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/DataEvent.java	/^    public DataEvent(EventSource source, int whichClient, ChannelBuffer data) {$/;"	m	class:DataEvent
DataEvent	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/DataEvent.java	/^public class DataEvent extends Event {$/;"	c
com.chenshuo.muduo.example.multiplexer	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/DataEvent.java	/^package com.chenshuo.muduo.example.multiplexer;$/;"	p
data	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/DataEvent.java	/^    public final ChannelBuffer data;$/;"	f	class:DataEvent
getString	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/DataEvent.java	/^    public String getString() {$/;"	m	class:DataEvent
source	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/DataEvent.java	/^    public final EventSource source;$/;"	f	class:DataEvent
whichClient	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/DataEvent.java	/^    public final int whichClient;$/;"	f	class:DataEvent
Event	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/Event.java	/^public class Event {$/;"	c
com.chenshuo.muduo.example.multiplexer	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/Event.java	/^package com.chenshuo.muduo.example.multiplexer;$/;"	p
EventQueue	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/EventQueue.java	/^public class EventQueue {$/;"	c
com.chenshuo.muduo.example.multiplexer	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/EventQueue.java	/^package com.chenshuo.muduo.example.multiplexer;$/;"	p
isEmpty	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/EventQueue.java	/^    public boolean isEmpty() {$/;"	m	class:EventQueue
put	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/EventQueue.java	/^    public void put(Event e) {$/;"	m	class:EventQueue
queue	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/EventQueue.java	/^    private BlockingDeque<Event> queue = new LinkedBlockingDeque<Event>();$/;"	f	class:EventQueue	file:
take	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/EventQueue.java	/^    public Event take() {$/;"	m	class:EventQueue
EventSource	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/EventSource.java	/^public enum EventSource {$/;"	g
com.chenshuo.muduo.example.multiplexer	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/EventSource.java	/^package com.chenshuo.muduo.example.multiplexer;$/;"	p
kBackend	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/EventSource.java	/^    kBackend, kClient$/;"	e	enum:EventSource	file:
kClient	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/EventSource.java	/^    kBackend, kClient$/;"	e	enum:EventSource	file:
Handler	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/MockBackendServer.java	/^    private class Handler extends SimpleChannelHandler {$/;"	c	class:MockBackendServer
MockBackendServer	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/MockBackendServer.java	/^    public MockBackendServer(EventQueue queue, int listeningPort, Executor boss, Executor worker,$/;"	m	class:MockBackendServer
MockBackendServer	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/MockBackendServer.java	/^public class MockBackendServer {$/;"	c
boss	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/MockBackendServer.java	/^    private final Executor boss;$/;"	f	class:MockBackendServer	file:
channelConnected	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/MockBackendServer.java	/^        public void channelConnected(ChannelHandlerContext ctx, ChannelStateEvent e)$/;"	m	class:MockBackendServer.Handler
channelDisconnected	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/MockBackendServer.java	/^        public void channelDisconnected(ChannelHandlerContext ctx, ChannelStateEvent e)$/;"	m	class:MockBackendServer.Handler
com.chenshuo.muduo.example.multiplexer	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/MockBackendServer.java	/^package com.chenshuo.muduo.example.multiplexer;$/;"	p
connection	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/MockBackendServer.java	/^    private volatile Channel connection;$/;"	f	class:MockBackendServer	file:
exceptionCaught	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/MockBackendServer.java	/^        public void exceptionCaught(ChannelHandlerContext ctx, ExceptionEvent e)$/;"	m	class:MockBackendServer.Handler
getBootstrap	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/MockBackendServer.java	/^    private ServerBootstrap getBootstrap() {$/;"	m	class:MockBackendServer	file:
latch	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/MockBackendServer.java	/^    private final CountDownLatch latch;$/;"	f	class:MockBackendServer	file:
listener	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/MockBackendServer.java	/^    private Channel listener;$/;"	f	class:MockBackendServer	file:
logger	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/MockBackendServer.java	/^    private static final Logger logger = LoggerFactory.getLogger("MockBackendServer");$/;"	f	class:MockBackendServer	file:
messageReceived	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/MockBackendServer.java	/^        public void messageReceived(ChannelHandlerContext ctx, MessageEvent e)$/;"	m	class:MockBackendServer.Handler
port	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/MockBackendServer.java	/^    private final int port;$/;"	f	class:MockBackendServer	file:
queue	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/MockBackendServer.java	/^    private final EventQueue queue;$/;"	f	class:MockBackendServer	file:
sendToClient	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/MockBackendServer.java	/^    public ChannelBuffer sendToClient(int whichClient, String str) {$/;"	m	class:MockBackendServer
sendToClient	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/MockBackendServer.java	/^    public void sendToClient(int whichClient, ChannelBuffer data) {$/;"	m	class:MockBackendServer
start	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/MockBackendServer.java	/^    public void start() {$/;"	m	class:MockBackendServer
stop	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/MockBackendServer.java	/^    public void stop() {$/;"	m	class:MockBackendServer
worker	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/MockBackendServer.java	/^    private final Executor worker;$/;"	f	class:MockBackendServer	file:
Handler	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/MockClient.java	/^    private class Handler extends SimpleChannelHandler {$/;"	c	class:MockClient
MockClient	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/MockClient.java	/^    public MockClient(EventQueue queue, InetSocketAddress remoteAddress, Executor boss,$/;"	m	class:MockClient
MockClient	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/MockClient.java	/^public class MockClient {$/;"	c
bootstrap	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/MockClient.java	/^    private ClientBootstrap bootstrap;$/;"	f	class:MockClient	file:
boss	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/MockClient.java	/^    private final Executor boss;$/;"	f	class:MockClient	file:
channelConnected	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/MockClient.java	/^        public void channelConnected(ChannelHandlerContext ctx, ChannelStateEvent e)$/;"	m	class:MockClient.Handler
channelDisconnected	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/MockClient.java	/^        public void channelDisconnected(ChannelHandlerContext ctx, ChannelStateEvent e)$/;"	m	class:MockClient.Handler
com.chenshuo.muduo.example.multiplexer	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/MockClient.java	/^package com.chenshuo.muduo.example.multiplexer;$/;"	p
connId	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/MockClient.java	/^    private int connId;$/;"	f	class:MockClient	file:
connect	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/MockClient.java	/^    public ChannelFuture connect() {$/;"	m	class:MockClient
connectAndWait	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/MockClient.java	/^    public void connectAndWait() {$/;"	m	class:MockClient
connection	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/MockClient.java	/^    private volatile Channel connection;$/;"	f	class:MockClient	file:
disconnect	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/MockClient.java	/^    public void disconnect() {$/;"	m	class:MockClient
exceptionCaught	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/MockClient.java	/^        public void exceptionCaught(ChannelHandlerContext ctx, ExceptionEvent e)$/;"	m	class:MockClient.Handler
latch	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/MockClient.java	/^    private MyCountDownLatch latch;$/;"	f	class:MockClient	file:
logger	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/MockClient.java	/^    private static final Logger logger = LoggerFactory.getLogger("MockClient");$/;"	f	class:MockClient	file:
messageReceived	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/MockClient.java	/^        public void messageReceived(ChannelHandlerContext ctx, MessageEvent e)$/;"	m	class:MockClient.Handler
queue	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/MockClient.java	/^    private final EventQueue queue;$/;"	f	class:MockClient	file:
reconnect	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/MockClient.java	/^        private void reconnect() {$/;"	m	class:MockClient.Handler	file:
remoteAddress	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/MockClient.java	/^    private final InetSocketAddress remoteAddress;$/;"	f	class:MockClient	file:
send	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/MockClient.java	/^    public ChannelBuffer send(String str) {$/;"	m	class:MockClient
send	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/MockClient.java	/^    public void send(ChannelBuffer buf) {$/;"	m	class:MockClient
setId	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/MockClient.java	/^    public void setId(int connId) {$/;"	m	class:MockClient
timer	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/MockClient.java	/^    private final Timer timer;$/;"	f	class:MockClient	file:
worker	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/MockClient.java	/^    private final Executor worker;$/;"	f	class:MockClient	file:
MultiplexerTest	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/MultiplexerTest.java	/^    public MultiplexerTest(String multiplexerHost) {$/;"	m	class:MultiplexerTest
MultiplexerTest	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/MultiplexerTest.java	/^public class MultiplexerTest {$/;"	c
addTestCase	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/MultiplexerTest.java	/^    private void addTestCase(TestCase testCase) {$/;"	m	class:MultiplexerTest	file:
backend	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/MultiplexerTest.java	/^    private MockBackendServer backend;$/;"	f	class:MultiplexerTest	file:
boss	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/MultiplexerTest.java	/^    private final ExecutorService boss;$/;"	f	class:MultiplexerTest	file:
bufferFactory	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/MultiplexerTest.java	/^    public static final ChannelBufferFactory bufferFactory =$/;"	f	class:MultiplexerTest
com.chenshuo.muduo.example.multiplexer	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/MultiplexerTest.java	/^package com.chenshuo.muduo.example.multiplexer;$/;"	p
commandChannel	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/MultiplexerTest.java	/^    public final Pattern commandChannel = Pattern.compile("CONN (\\\\d+) FROM [0-9.:]+ IS ([A-Z]+)\\r\\n");$/;"	f	class:MultiplexerTest
getBackend	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/MultiplexerTest.java	/^    public MockBackendServer getBackend() {$/;"	m	class:MultiplexerTest
getEventQueue	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/MultiplexerTest.java	/^    public EventQueue getEventQueue() {$/;"	m	class:MultiplexerTest
kLogicalServerPort	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/MultiplexerTest.java	/^    private static final int kLogicalServerPort = 9999;$/;"	f	class:MultiplexerTest	file:
kMultiplexerServerPort	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/MultiplexerTest.java	/^    private static final int kMultiplexerServerPort = 3333;$/;"	f	class:MultiplexerTest	file:
latch	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/MultiplexerTest.java	/^    private MyCountDownLatch latch;$/;"	f	class:MultiplexerTest	file:
logger	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/MultiplexerTest.java	/^    private static final Logger logger = LoggerFactory.getLogger("MultiplexerTest");$/;"	f	class:MultiplexerTest	file:
main	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/MultiplexerTest.java	/^    public static void main(String[] args) {$/;"	m	class:MultiplexerTest
multiplexerAddress	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/MultiplexerTest.java	/^    private final InetSocketAddress multiplexerAddress;$/;"	f	class:MultiplexerTest	file:
newClient	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/MultiplexerTest.java	/^    public MockClient newClient() {$/;"	m	class:MultiplexerTest
queue	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/MultiplexerTest.java	/^    private EventQueue queue;$/;"	f	class:MultiplexerTest	file:
run	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/MultiplexerTest.java	/^    private void run() {$/;"	m	class:MultiplexerTest	file:
sleep	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/MultiplexerTest.java	/^    public void sleep(int millis) {$/;"	m	class:MultiplexerTest
testCases	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/MultiplexerTest.java	/^    private ArrayList<TestCase> testCases;$/;"	f	class:MultiplexerTest	file:
worker	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/MultiplexerTest.java	/^    private final ExecutorService worker;$/;"	f	class:MultiplexerTest	file:
MyCountDownLatch	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/MyCountDownLatch.java	/^    public MyCountDownLatch(int count) {$/;"	m	class:MyCountDownLatch
MyCountDownLatch	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/MyCountDownLatch.java	/^public class MyCountDownLatch extends CountDownLatch {$/;"	c
awaitUninterruptibly	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/MyCountDownLatch.java	/^    public void awaitUninterruptibly() {$/;"	m	class:MyCountDownLatch
awaitUninterruptibly	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/MyCountDownLatch.java	/^    public void awaitUninterruptibly(int millis) {$/;"	m	class:MyCountDownLatch
com.chenshuo.muduo.example.multiplexer	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/MyCountDownLatch.java	/^package com.chenshuo.muduo.example.multiplexer;$/;"	p
TestCase	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/TestCase.java	/^public abstract class TestCase {$/;"	c
assertEquals	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/TestCase.java	/^    protected void assertEquals(Object expected, Object actual) {$/;"	m	class:TestCase
assertTrue	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/TestCase.java	/^    protected void assertTrue(boolean yes) {$/;"	m	class:TestCase
backend	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/TestCase.java	/^    protected MockBackendServer backend;$/;"	f	class:TestCase
bufferFactory	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/TestCase.java	/^    protected static final ChannelBufferFactory bufferFactory = MultiplexerTest.bufferFactory;$/;"	f	class:TestCase
com.chenshuo.muduo.example.multiplexer	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/TestCase.java	/^package com.chenshuo.muduo.example.multiplexer;$/;"	p
fail	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/TestCase.java	/^    protected void fail(String message) {$/;"	m	class:TestCase
god	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/TestCase.java	/^    protected MultiplexerTest god;$/;"	f	class:TestCase
queue	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/TestCase.java	/^    protected EventQueue queue;$/;"	f	class:TestCase
run	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/TestCase.java	/^    public abstract void run();$/;"	m	class:TestCase
setOwner	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/TestCase.java	/^    public void setOwner(MultiplexerTest god) {$/;"	m	class:TestCase
test	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/TestCase.java	/^    public void test() {$/;"	m	class:TestCase
TestFailedException	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/TestFailedException.java	/^    public TestFailedException(String message) {$/;"	m	class:TestFailedException
TestFailedException	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/TestFailedException.java	/^public class TestFailedException extends RuntimeException {$/;"	c
com.chenshuo.muduo.example.multiplexer	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/TestFailedException.java	/^package com.chenshuo.muduo.example.multiplexer;$/;"	p
serialVersionUID	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/TestFailedException.java	/^    private static final long serialVersionUID = 1982L;$/;"	f	class:TestFailedException	file:
TestOneClientBackendSend	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/testcase/TestOneClientBackendSend.java	/^public class TestOneClientBackendSend extends TestCase {$/;"	c
com.chenshuo.muduo.example.multiplexer.testcase	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/testcase/TestOneClientBackendSend.java	/^package com.chenshuo.muduo.example.multiplexer.testcase;$/;"	p
run	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/testcase/TestOneClientBackendSend.java	/^    public void run() {$/;"	m	class:TestOneClientBackendSend
TestOneClientBothSend	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/testcase/TestOneClientBothSend.java	/^public class TestOneClientBothSend extends TestCase {$/;"	c
com.chenshuo.muduo.example.multiplexer.testcase	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/testcase/TestOneClientBothSend.java	/^package com.chenshuo.muduo.example.multiplexer.testcase;$/;"	p
run	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/testcase/TestOneClientBothSend.java	/^    public void run() {$/;"	m	class:TestOneClientBothSend
TestOneClientNoData	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/testcase/TestOneClientNoData.java	/^public class TestOneClientNoData extends TestCase {$/;"	c
com.chenshuo.muduo.example.multiplexer.testcase	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/testcase/TestOneClientNoData.java	/^package com.chenshuo.muduo.example.multiplexer.testcase;$/;"	p
run	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/testcase/TestOneClientNoData.java	/^    public void run() {$/;"	m	class:TestOneClientNoData
TestOneClientSend	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/testcase/TestOneClientSend.java	/^public class TestOneClientSend extends TestCase {$/;"	c
com.chenshuo.muduo.example.multiplexer.testcase	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/testcase/TestOneClientSend.java	/^package com.chenshuo.muduo.example.multiplexer.testcase;$/;"	p
run	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/testcase/TestOneClientSend.java	/^    public void run() {$/;"	m	class:TestOneClientSend
TestTwoClients	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/testcase/TestTwoClients.java	/^public class TestTwoClients extends TestCase {$/;"	c
com.chenshuo.muduo.example.multiplexer.testcase	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/testcase/TestTwoClients.java	/^package com.chenshuo.muduo.example.multiplexer.testcase;$/;"	p
run	examples/multiplexer/harness/src/com/chenshuo/muduo/example/multiplexer/testcase/TestTwoClients.java	/^    public void run() {$/;"	m	class:TestTwoClients
MultiplexServer	examples/multiplexer/multiplexer.cc	/^  MultiplexServer(EventLoop* loop,$/;"	f	class:MultiplexServer
MultiplexServer	examples/multiplexer/multiplexer.cc	/^class MultiplexServer$/;"	c	file:
availIds_	examples/multiplexer/multiplexer.cc	/^  std::queue<int> availIds_;$/;"	m	class:MultiplexServer	file:
backendConn_	examples/multiplexer/multiplexer.cc	/^  TcpConnectionPtr backendConn_;$/;"	m	class:MultiplexServer	file:
backendIp	examples/multiplexer/multiplexer.cc	/^const char* backendIp = "127.0.0.1";$/;"	v
backend_	examples/multiplexer/multiplexer.cc	/^  TcpClient backend_;$/;"	m	class:MultiplexServer	file:
clientConns_	examples/multiplexer/multiplexer.cc	/^  std::map<int, TcpConnectionPtr> clientConns_;$/;"	m	class:MultiplexServer	file:
kBackendPort	examples/multiplexer/multiplexer.cc	/^const uint16_t kBackendPort = 9999;$/;"	v
kClientPort	examples/multiplexer/multiplexer.cc	/^const uint16_t kClientPort = 3333;$/;"	v
kHeaderLen	examples/multiplexer/multiplexer.cc	/^const size_t kHeaderLen = 3;$/;"	v
kMaxConns	examples/multiplexer/multiplexer.cc	/^const int kMaxConns = 10;  \/\/ 65535$/;"	v
kMaxPacketLen	examples/multiplexer/multiplexer.cc	/^const size_t kMaxPacketLen = 255;$/;"	v
main	examples/multiplexer/multiplexer.cc	/^int main(int argc, char* argv[])$/;"	f
mutex_	examples/multiplexer/multiplexer.cc	/^  MutexLock mutex_;$/;"	m	class:MultiplexServer	file:
numThreads_	examples/multiplexer/multiplexer.cc	/^  int numThreads_;$/;"	m	class:MultiplexServer	file:
oldCounter_	examples/multiplexer/multiplexer.cc	/^  int64_t oldCounter_;$/;"	m	class:MultiplexServer	file:
onBackendConnection	examples/multiplexer/multiplexer.cc	/^  void onBackendConnection(const TcpConnectionPtr& conn)$/;"	f	class:MultiplexServer	file:
onBackendMessage	examples/multiplexer/multiplexer.cc	/^  void onBackendMessage(const TcpConnectionPtr& conn, Buffer* buf, Timestamp)$/;"	f	class:MultiplexServer	file:
onClientConnection	examples/multiplexer/multiplexer.cc	/^  void onClientConnection(const TcpConnectionPtr& conn)$/;"	f	class:MultiplexServer	file:
onClientMessage	examples/multiplexer/multiplexer.cc	/^  void onClientMessage(const TcpConnectionPtr& conn, Buffer* buf, Timestamp)$/;"	f	class:MultiplexServer	file:
printStatistics	examples/multiplexer/multiplexer.cc	/^  void printStatistics()$/;"	f	class:MultiplexServer	file:
receivedMessages_	examples/multiplexer/multiplexer.cc	/^  AtomicInt64 receivedMessages_;$/;"	m	class:MultiplexServer	file:
sendBackendBuffer	examples/multiplexer/multiplexer.cc	/^  void sendBackendBuffer(int id, Buffer* buf)$/;"	f	class:MultiplexServer	file:
sendBackendPacket	examples/multiplexer/multiplexer.cc	/^  void sendBackendPacket(int id, Buffer* buf)$/;"	f	class:MultiplexServer	file:
sendBackendString	examples/multiplexer/multiplexer.cc	/^  void sendBackendString(int id, const string& msg)$/;"	f	class:MultiplexServer	file:
sendToClient	examples/multiplexer/multiplexer.cc	/^  void sendToClient(Buffer* buf)$/;"	f	class:MultiplexServer	file:
server_	examples/multiplexer/multiplexer.cc	/^  TcpServer server_;$/;"	m	class:MultiplexServer	file:
start	examples/multiplexer/multiplexer.cc	/^  void start()$/;"	f	class:MultiplexServer
startTime_	examples/multiplexer/multiplexer.cc	/^  Timestamp startTime_;$/;"	m	class:MultiplexServer	file:
transferred_	examples/multiplexer/multiplexer.cc	/^  AtomicInt64 transferred_;$/;"	m	class:MultiplexServer	file:
MultiplexServer	examples/multiplexer/multiplexer_simple.cc	/^  MultiplexServer(EventLoop* loop, const InetAddress& listenAddr, const InetAddress& backendAddr)$/;"	f	class:MultiplexServer
MultiplexServer	examples/multiplexer/multiplexer_simple.cc	/^class MultiplexServer : boost::noncopyable$/;"	c	file:
availIds_	examples/multiplexer/multiplexer_simple.cc	/^  std::queue<int> availIds_;$/;"	m	class:MultiplexServer	file:
backendConn_	examples/multiplexer/multiplexer_simple.cc	/^  TcpConnectionPtr backendConn_;$/;"	m	class:MultiplexServer	file:
backendIp	examples/multiplexer/multiplexer_simple.cc	/^const char* backendIp = "127.0.0.1";$/;"	v
backend_	examples/multiplexer/multiplexer_simple.cc	/^  TcpClient backend_;$/;"	m	class:MultiplexServer	file:
clientConns_	examples/multiplexer/multiplexer_simple.cc	/^  std::map<int, TcpConnectionPtr> clientConns_;$/;"	m	class:MultiplexServer	file:
doCommand	examples/multiplexer/multiplexer_simple.cc	/^  void doCommand(const string& cmd)$/;"	f	class:MultiplexServer	file:
kBackendPort	examples/multiplexer/multiplexer_simple.cc	/^const uint16_t kBackendPort = 9999;$/;"	v
kClientPort	examples/multiplexer/multiplexer_simple.cc	/^const uint16_t kClientPort = 3333;$/;"	v
kHeaderLen	examples/multiplexer/multiplexer_simple.cc	/^const size_t kHeaderLen = 3;$/;"	v
kMaxConns	examples/multiplexer/multiplexer_simple.cc	/^const int kMaxConns = 10;  \/\/ 65535$/;"	v
kMaxPacketLen	examples/multiplexer/multiplexer_simple.cc	/^const size_t kMaxPacketLen = 255;$/;"	v
main	examples/multiplexer/multiplexer_simple.cc	/^int main(int argc, char* argv[])$/;"	f
onBackendConnection	examples/multiplexer/multiplexer_simple.cc	/^  void onBackendConnection(const TcpConnectionPtr& conn)$/;"	f	class:MultiplexServer	file:
onBackendMessage	examples/multiplexer/multiplexer_simple.cc	/^  void onBackendMessage(const TcpConnectionPtr& conn, Buffer* buf, Timestamp)$/;"	f	class:MultiplexServer	file:
onClientConnection	examples/multiplexer/multiplexer_simple.cc	/^  void onClientConnection(const TcpConnectionPtr& conn)$/;"	f	class:MultiplexServer	file:
onClientMessage	examples/multiplexer/multiplexer_simple.cc	/^  void onClientMessage(const TcpConnectionPtr& conn, Buffer* buf, Timestamp)$/;"	f	class:MultiplexServer	file:
sendBackendBuffer	examples/multiplexer/multiplexer_simple.cc	/^  void sendBackendBuffer(int id, Buffer* buf)$/;"	f	class:MultiplexServer	file:
sendBackendPacket	examples/multiplexer/multiplexer_simple.cc	/^  void sendBackendPacket(int id, Buffer* buf)$/;"	f	class:MultiplexServer	file:
sendBackendString	examples/multiplexer/multiplexer_simple.cc	/^  void sendBackendString(int id, const string& msg)$/;"	f	class:MultiplexServer	file:
sendToClient	examples/multiplexer/multiplexer_simple.cc	/^  void sendToClient(Buffer* buf)$/;"	f	class:MultiplexServer	file:
server_	examples/multiplexer/multiplexer_simple.cc	/^  TcpServer server_;$/;"	m	class:MultiplexServer	file:
start	examples/multiplexer/multiplexer_simple.cc	/^  void start()$/;"	f	class:MultiplexServer
DiscardClient	examples/netty/discard/client.cc	/^  DiscardClient(EventLoop* loop, const InetAddress& listenAddr, int size)$/;"	f	class:DiscardClient
DiscardClient	examples/netty/discard/client.cc	/^class DiscardClient : boost::noncopyable$/;"	c	file:
client_	examples/netty/discard/client.cc	/^  TcpClient client_;$/;"	m	class:DiscardClient	file:
connect	examples/netty/discard/client.cc	/^  void connect()$/;"	f	class:DiscardClient
loop_	examples/netty/discard/client.cc	/^  EventLoop* loop_;$/;"	m	class:DiscardClient	file:
main	examples/netty/discard/client.cc	/^int main(int argc, char* argv[])$/;"	f
message_	examples/netty/discard/client.cc	/^  string message_;$/;"	m	class:DiscardClient	file:
onConnection	examples/netty/discard/client.cc	/^  void onConnection(const TcpConnectionPtr& conn)$/;"	f	class:DiscardClient	file:
onMessage	examples/netty/discard/client.cc	/^  void onMessage(const TcpConnectionPtr& conn, Buffer* buf, Timestamp time)$/;"	f	class:DiscardClient	file:
onWriteComplete	examples/netty/discard/client.cc	/^  void onWriteComplete(const TcpConnectionPtr& conn)$/;"	f	class:DiscardClient	file:
DiscardServer	examples/netty/discard/server.cc	/^  DiscardServer(EventLoop* loop, const InetAddress& listenAddr)$/;"	f	class:DiscardServer
DiscardServer	examples/netty/discard/server.cc	/^class DiscardServer$/;"	c	file:
main	examples/netty/discard/server.cc	/^int main(int argc, char* argv[])$/;"	f
numThreads	examples/netty/discard/server.cc	/^int numThreads = 0;$/;"	v
oldCounter_	examples/netty/discard/server.cc	/^  int64_t oldCounter_;$/;"	m	class:DiscardServer	file:
onConnection	examples/netty/discard/server.cc	/^  void onConnection(const TcpConnectionPtr& conn)$/;"	f	class:DiscardServer	file:
onMessage	examples/netty/discard/server.cc	/^  void onMessage(const TcpConnectionPtr& conn, Buffer* buf, Timestamp)$/;"	f	class:DiscardServer	file:
printThroughput	examples/netty/discard/server.cc	/^  void printThroughput()$/;"	f	class:DiscardServer	file:
receivedMessages_	examples/netty/discard/server.cc	/^  AtomicInt64 receivedMessages_;$/;"	m	class:DiscardServer	file:
server_	examples/netty/discard/server.cc	/^  TcpServer server_;$/;"	m	class:DiscardServer	file:
start	examples/netty/discard/server.cc	/^  void start()$/;"	f	class:DiscardServer
startTime_	examples/netty/discard/server.cc	/^  Timestamp startTime_;$/;"	m	class:DiscardServer	file:
transferred_	examples/netty/discard/server.cc	/^  AtomicInt64 transferred_;$/;"	m	class:DiscardServer	file:
EchoClient	examples/netty/echo/client.cc	/^  EchoClient(EventLoop* loop, const InetAddress& listenAddr, int size)$/;"	f	class:EchoClient
EchoClient	examples/netty/echo/client.cc	/^class EchoClient : boost::noncopyable$/;"	c	file:
client_	examples/netty/echo/client.cc	/^  TcpClient client_;$/;"	m	class:EchoClient	file:
connect	examples/netty/echo/client.cc	/^  void connect()$/;"	f	class:EchoClient
loop_	examples/netty/echo/client.cc	/^  EventLoop* loop_;$/;"	m	class:EchoClient	file:
main	examples/netty/echo/client.cc	/^int main(int argc, char* argv[])$/;"	f
message_	examples/netty/echo/client.cc	/^  string message_;$/;"	m	class:EchoClient	file:
onConnection	examples/netty/echo/client.cc	/^  void onConnection(const TcpConnectionPtr& conn)$/;"	f	class:EchoClient	file:
onMessage	examples/netty/echo/client.cc	/^  void onMessage(const TcpConnectionPtr& conn, Buffer* buf, Timestamp time)$/;"	f	class:EchoClient	file:
EchoServer	examples/netty/echo/server.cc	/^  EchoServer(EventLoop* loop, const InetAddress& listenAddr)$/;"	f	class:EchoServer
EchoServer	examples/netty/echo/server.cc	/^class EchoServer$/;"	c	file:
main	examples/netty/echo/server.cc	/^int main(int argc, char* argv[])$/;"	f
numThreads	examples/netty/echo/server.cc	/^int numThreads = 0;$/;"	v
oldCounter_	examples/netty/echo/server.cc	/^  int64_t oldCounter_;$/;"	m	class:EchoServer	file:
onConnection	examples/netty/echo/server.cc	/^  void onConnection(const TcpConnectionPtr& conn)$/;"	f	class:EchoServer	file:
onMessage	examples/netty/echo/server.cc	/^  void onMessage(const TcpConnectionPtr& conn, Buffer* buf, Timestamp)$/;"	f	class:EchoServer	file:
printThroughput	examples/netty/echo/server.cc	/^  void printThroughput()$/;"	f	class:EchoServer	file:
receivedMessages_	examples/netty/echo/server.cc	/^  AtomicInt64 receivedMessages_;$/;"	m	class:EchoServer	file:
server_	examples/netty/echo/server.cc	/^  TcpServer server_;$/;"	m	class:EchoServer	file:
start	examples/netty/echo/server.cc	/^  void start()$/;"	f	class:EchoServer
startTime_	examples/netty/echo/server.cc	/^  Timestamp startTime_;$/;"	m	class:EchoServer	file:
transferred_	examples/netty/echo/server.cc	/^  AtomicInt64 transferred_;$/;"	m	class:EchoServer	file:
EchoServer	examples/netty/echo/server2.cc	/^  EchoServer(EventLoop* loop, const InetAddress& listenAddr)$/;"	f	class:EchoServer
EchoServer	examples/netty/echo/server2.cc	/^class EchoServer$/;"	c	file:
connections_	examples/netty/echo/server2.cc	/^  AtomicInt32 connections_;$/;"	m	class:EchoServer	file:
getLong	examples/netty/echo/server2.cc	/^  long getLong(const string& procStatus, const char* key)$/;"	f	class:EchoServer	file:
main	examples/netty/echo/server2.cc	/^int main(int argc, char* argv[])$/;"	f
numThreads	examples/netty/echo/server2.cc	/^int numThreads = 0;$/;"	v
onConnection	examples/netty/echo/server2.cc	/^  void onConnection(const TcpConnectionPtr& conn)$/;"	f	class:EchoServer	file:
onMessage	examples/netty/echo/server2.cc	/^  void onMessage(const TcpConnectionPtr& conn, Buffer* buf, Timestamp)$/;"	f	class:EchoServer	file:
printConnection	examples/netty/echo/server2.cc	/^  void printConnection()$/;"	f	class:EchoServer	file:
printThroughput	examples/netty/echo/server2.cc	/^  void printThroughput()$/;"	f	class:EchoServer	file:
receivedMessages_	examples/netty/echo/server2.cc	/^  AtomicInt32 receivedMessages_;$/;"	m	class:EchoServer	file:
server_	examples/netty/echo/server2.cc	/^  TcpServer server_;$/;"	m	class:EchoServer	file:
start	examples/netty/echo/server2.cc	/^  void start()$/;"	f	class:EchoServer
startTime_	examples/netty/echo/server2.cc	/^  Timestamp startTime_;$/;"	m	class:EchoServer	file:
transferredBytes_	examples/netty/echo/server2.cc	/^  AtomicInt64 transferredBytes_;$/;"	m	class:EchoServer	file:
UptimeClient	examples/netty/uptime/uptime.cc	/^  UptimeClient(EventLoop* loop, const InetAddress& listenAddr)$/;"	f	class:UptimeClient
UptimeClient	examples/netty/uptime/uptime.cc	/^class UptimeClient : boost::noncopyable$/;"	c	file:
client_	examples/netty/uptime/uptime.cc	/^  TcpClient client_;$/;"	m	class:UptimeClient	file:
connect	examples/netty/uptime/uptime.cc	/^  void connect()$/;"	f	class:UptimeClient
main	examples/netty/uptime/uptime.cc	/^int main(int argc, char* argv[])$/;"	f
onConnection	examples/netty/uptime/uptime.cc	/^  void onConnection(const TcpConnectionPtr& conn)$/;"	f	class:UptimeClient	file:
onMessage	examples/netty/uptime/uptime.cc	/^  void onMessage(const TcpConnectionPtr& conn, Buffer* buf, Timestamp time)$/;"	f	class:UptimeClient	file:
g_channels	examples/pingpong/bench.cc	/^boost::ptr_vector<Channel> g_channels;$/;"	v
g_fired	examples/pingpong/bench.cc	/^int g_reads, g_writes, g_fired;$/;"	v
g_loop	examples/pingpong/bench.cc	/^EventLoop* g_loop;$/;"	v
g_reads	examples/pingpong/bench.cc	/^int g_reads, g_writes, g_fired;$/;"	v
g_writes	examples/pingpong/bench.cc	/^int g_reads, g_writes, g_fired;$/;"	v
main	examples/pingpong/bench.cc	/^int main(int argc, char* argv[])$/;"	f
numActive	examples/pingpong/bench.cc	/^int numActive;$/;"	v
numPipes	examples/pingpong/bench.cc	/^int numPipes;$/;"	v
numWrites	examples/pingpong/bench.cc	/^int numWrites;$/;"	v
readCallback	examples/pingpong/bench.cc	/^void readCallback(Timestamp, int fd, int idx)$/;"	f
runOnce	examples/pingpong/bench.cc	/^std::pair<int, int> runOnce()$/;"	f
Client	examples/pingpong/client.cc	/^  Client(EventLoop* loop,$/;"	f	class:Client
Client	examples/pingpong/client.cc	/^class Client : boost::noncopyable$/;"	c	file:
Session	examples/pingpong/client.cc	/^  Session(EventLoop* loop,$/;"	f	class:Session
Session	examples/pingpong/client.cc	/^class Session : boost::noncopyable$/;"	c	file:
bytesRead	examples/pingpong/client.cc	/^  int64_t bytesRead() const$/;"	f	class:Session
bytesRead_	examples/pingpong/client.cc	/^  int64_t bytesRead_;$/;"	m	class:Session	file:
bytesWritten_	examples/pingpong/client.cc	/^  int64_t bytesWritten_;$/;"	m	class:Session	file:
client_	examples/pingpong/client.cc	/^  TcpClient client_;$/;"	m	class:Session	file:
handleTimeout	examples/pingpong/client.cc	/^  void handleTimeout()$/;"	f	class:Client	file:
loop_	examples/pingpong/client.cc	/^  EventLoop* loop_;$/;"	m	class:Client	file:
main	examples/pingpong/client.cc	/^int main(int argc, char* argv[])$/;"	f
message	examples/pingpong/client.cc	/^  const string& message() const$/;"	f	class:Client
message_	examples/pingpong/client.cc	/^  string message_;$/;"	m	class:Client	file:
messagesRead	examples/pingpong/client.cc	/^  int64_t messagesRead() const$/;"	f	class:Session
messagesRead_	examples/pingpong/client.cc	/^  int64_t messagesRead_;$/;"	m	class:Session	file:
numConnected_	examples/pingpong/client.cc	/^  AtomicInt32 numConnected_;$/;"	m	class:Client	file:
onConnect	examples/pingpong/client.cc	/^  void onConnect()$/;"	f	class:Client
onConnection	examples/pingpong/client.cc	/^void Session::onConnection(const TcpConnectionPtr& conn)$/;"	f	class:Session
onDisconnect	examples/pingpong/client.cc	/^  void onDisconnect(const TcpConnectionPtr& conn)$/;"	f	class:Client
onMessage	examples/pingpong/client.cc	/^  void onMessage(const TcpConnectionPtr& conn, Buffer* buf, Timestamp)$/;"	f	class:Session	file:
owner_	examples/pingpong/client.cc	/^  Client* owner_;$/;"	m	class:Session	file:
quit	examples/pingpong/client.cc	/^  void quit()$/;"	f	class:Client	file:
sessionCount_	examples/pingpong/client.cc	/^  int sessionCount_;$/;"	m	class:Client	file:
sessions_	examples/pingpong/client.cc	/^  boost::ptr_vector<Session> sessions_;$/;"	m	class:Client	file:
start	examples/pingpong/client.cc	/^  void start()$/;"	f	class:Session
stop	examples/pingpong/client.cc	/^  void stop()$/;"	f	class:Session
threadPool_	examples/pingpong/client.cc	/^  EventLoopThreadPool threadPool_;$/;"	m	class:Client	file:
timeout_	examples/pingpong/client.cc	/^  int timeout_;$/;"	m	class:Client	file:
main	examples/pingpong/server.cc	/^int main(int argc, char* argv[])$/;"	f
onConnection	examples/pingpong/server.cc	/^void onConnection(const TcpConnectionPtr& conn)$/;"	f
onMessage	examples/pingpong/server.cc	/^void onMessage(const TcpConnectionPtr& conn, Buffer* buf, Timestamp)$/;"	f
busy	examples/procmon/dummyload.cc	/^double busy(int cycles)$/;"	f
cosine	examples/procmon/dummyload.cc	/^void cosine()$/;"	f
findCycles	examples/procmon/dummyload.cc	/^void findCycles()$/;"	f
fixed	examples/procmon/dummyload.cc	/^void fixed()$/;"	f
g_busy	examples/procmon/dummyload.cc	/^bool g_busy = false;$/;"	v
g_cycles	examples/procmon/dummyload.cc	/^int g_cycles = 0;$/;"	v
g_done	examples/procmon/dummyload.cc	/^AtomicInt32 g_done;$/;"	v
g_mutex	examples/procmon/dummyload.cc	/^MutexLock g_mutex;$/;"	v
g_percent	examples/procmon/dummyload.cc	/^int g_percent = 82;$/;"	v
getSeconds	examples/procmon/dummyload.cc	/^double getSeconds(int cycles)$/;"	f
load	examples/procmon/dummyload.cc	/^void load(int percent)$/;"	f
main	examples/procmon/dummyload.cc	/^int main(int argc, char* argv[])$/;"	f
sawtooth	examples/procmon/dummyload.cc	/^void sawtooth()$/;"	f
threadFunc	examples/procmon/dummyload.cc	/^void threadFunc()$/;"	f
MyGdFont	examples/procmon/plot.cc	/^struct Plot::MyGdFont : public gdFont {};$/;"	s	class:Plot	file:
Plot	examples/procmon/plot.cc	/^Plot::Plot(int width, int height, int totalSeconds, int samplingPeriod)$/;"	f	class:Plot
getX	examples/procmon/plot.cc	/^int Plot::getX(ssize_t i, ssize_t total) const$/;"	f	class:Plot
getY	examples/procmon/plot.cc	/^int Plot::getY(double value) const$/;"	f	class:Plot
label	examples/procmon/plot.cc	/^void Plot::label(double maxValue)$/;"	f	class:Plot
plotCpu	examples/procmon/plot.cc	/^muduo::string Plot::plotCpu(const std::vector<double>& data)$/;"	f	class:Plot
toPng	examples/procmon/plot.cc	/^muduo::string Plot::toPng()$/;"	f	class:Plot
~Plot	examples/procmon/plot.cc	/^Plot::~Plot()$/;"	f	class:Plot
MyGdFontPtr	examples/procmon/plot.h	/^  typedef struct MyGdFont* MyGdFontPtr;$/;"	t	class:Plot	typeref:struct:Plot::MyGdFont
Plot	examples/procmon/plot.h	/^class Plot : boost::noncopyable$/;"	c
background_	examples/procmon/plot.h	/^  const int background_;$/;"	m	class:Plot
black_	examples/procmon/plot.h	/^  const int black_;$/;"	m	class:Plot
blue_	examples/procmon/plot.h	/^  const int blue_;$/;"	m	class:Plot
fontHeight_	examples/procmon/plot.h	/^  const int fontHeight_;$/;"	m	class:Plot
fontWidth_	examples/procmon/plot.h	/^  const int fontWidth_;$/;"	m	class:Plot
font_	examples/procmon/plot.h	/^  const MyGdFontPtr font_;$/;"	m	class:Plot
gdImagePtr	examples/procmon/plot.h	/^typedef struct gdImageStruct* gdImagePtr;$/;"	t	typeref:struct:gdImageStruct
gray_	examples/procmon/plot.h	/^  const int gray_;$/;"	m	class:Plot
height_	examples/procmon/plot.h	/^  const int height_;$/;"	m	class:Plot
image_	examples/procmon/plot.h	/^  const gdImagePtr image_;$/;"	m	class:Plot
kLeftMargin_	examples/procmon/plot.h	/^  static const int kLeftMargin_ = 5;$/;"	m	class:Plot
kMarginY_	examples/procmon/plot.h	/^  static const int kMarginY_ = 5;$/;"	m	class:Plot
kRightMargin_	examples/procmon/plot.h	/^  const int kRightMargin_;$/;"	m	class:Plot
ratioX_	examples/procmon/plot.h	/^  const double ratioX_;$/;"	m	class:Plot
samplingPeriod_	examples/procmon/plot.h	/^  const int samplingPeriod_;$/;"	m	class:Plot
totalSeconds_	examples/procmon/plot.h	/^  const int totalSeconds_;$/;"	m	class:Plot
width_	examples/procmon/plot.h	/^  const int width_;$/;"	m	class:Plot
main	examples/procmon/plot_test.cc	/^int main()$/;"	f
CpuTime	examples/procmon/procmon.cc	/^  struct CpuTime$/;"	s	class:Procmon	file:
Procmon	examples/procmon/procmon.cc	/^  Procmon(EventLoop* loop, pid_t pid, uint16_t port, const char* procname)$/;"	f	class:Procmon
Procmon	examples/procmon/procmon.cc	/^class Procmon : boost::noncopyable$/;"	c	file:
StatData	examples/procmon/procmon.cc	/^struct StatData$/;"	s	file:
appendResponse	examples/procmon/procmon.cc	/^int Procmon::appendResponse(const char* fmt, ...)$/;"	f	class:Procmon
appendTableRow	examples/procmon/procmon.cc	/^  void appendTableRow(const char* name, StringArg value)$/;"	f	class:Procmon	file:
appendTableRow	examples/procmon/procmon.cc	/^  void appendTableRow(const char* name, long value)$/;"	f	class:Procmon	file:
appendTableRowFloat	examples/procmon/procmon.cc	/^  void appendTableRowFloat(const char* name, double value)$/;"	f	class:Procmon	file:
cmajflt	examples/procmon/procmon.cc	/^  long cmajflt;$/;"	m	struct:StatData	file:
cmdline_	examples/procmon/procmon.cc	/^  const string cmdline_;$/;"	m	class:Procmon	file:
cminflt	examples/procmon/procmon.cc	/^  long cminflt;$/;"	m	struct:StatData	file:
cpuUsage	examples/procmon/procmon.cc	/^    double cpuUsage(double kPeriod, double kClockTicksPerSecond) const$/;"	f	struct:Procmon::CpuTime
cpu_chart_	examples/procmon/procmon.cc	/^  Plot cpu_chart_;$/;"	m	class:Procmon	file:
cpu_usage_	examples/procmon/procmon.cc	/^  boost::circular_buffer<CpuTime> cpu_usage_;$/;"	m	class:Procmon	file:
cstime	examples/procmon/procmon.cc	/^  long cstime;$/;"	m	struct:StatData	file:
cutime	examples/procmon/procmon.cc	/^  long cutime;$/;"	m	struct:StatData	file:
fillOverview	examples/procmon/procmon.cc	/^  void fillOverview(const string& query)$/;"	f	class:Procmon	file:
fillRefresh	examples/procmon/procmon.cc	/^  void fillRefresh(const string& query)$/;"	f	class:Procmon	file:
fillThreads	examples/procmon/procmon.cc	/^  void fillThreads()$/;"	f	class:Procmon	file:
flags	examples/procmon/procmon.cc	/^  int flags;$/;"	m	struct:StatData	file:
getBootTime	examples/procmon/procmon.cc	/^  static long getBootTime()$/;"	f	class:Procmon	file:
getCmdLine	examples/procmon/procmon.cc	/^  string getCmdLine()$/;"	f	class:Procmon	file:
getEnviron	examples/procmon/procmon.cc	/^  string getEnviron()$/;"	f	class:Procmon	file:
getLong	examples/procmon/procmon.cc	/^  static long getLong(const string& status, const char* key)$/;"	f	class:Procmon	file:
getName	examples/procmon/procmon.cc	/^  string getName() const$/;"	f	class:Procmon	file:
getSeconds	examples/procmon/procmon.cc	/^  double getSeconds(long ticks)$/;"	f	class:Procmon	file:
getStartTime	examples/procmon/procmon.cc	/^  Timestamp getStartTime(long starttime)$/;"	f	class:Procmon	file:
getState	examples/procmon/procmon.cc	/^  static const char* getState(char state)$/;"	f	class:Procmon	file:
hostname_	examples/procmon/procmon.cc	/^  const string hostname_;$/;"	m	class:Procmon	file:
itrealvalue	examples/procmon/procmon.cc	/^  long itrealvalue;$/;"	m	struct:StatData	file:
kBootTime_	examples/procmon/procmon.cc	/^  const long kBootTime_;  \/\/ in Unix-time$/;"	m	class:Procmon	file:
kClockTicksPerSecond_	examples/procmon/procmon.cc	/^  const int kClockTicksPerSecond_;$/;"	m	class:Procmon	file:
kPeriod_	examples/procmon/procmon.cc	/^  const static int kPeriod_ = 2.0;$/;"	m	class:Procmon	file:
kbPerPage_	examples/procmon/procmon.cc	/^  const int kbPerPage_;$/;"	m	class:Procmon	file:
lastStatData_	examples/procmon/procmon.cc	/^  StatData lastStatData_;$/;"	m	class:Procmon	file:
main	examples/procmon/procmon.cc	/^int main(int argc, char* argv[])$/;"	f
majflt	examples/procmon/procmon.cc	/^  long majflt;$/;"	m	struct:StatData	file:
minflt	examples/procmon/procmon.cc	/^  long minflt;$/;"	m	struct:StatData	file:
nice	examples/procmon/procmon.cc	/^  long nice;$/;"	m	struct:StatData	file:
num_threads	examples/procmon/procmon.cc	/^  long num_threads;$/;"	m	struct:StatData	file:
onRequest	examples/procmon/procmon.cc	/^  void onRequest(const HttpRequest& req, HttpResponse* resp)$/;"	f	class:Procmon	file:
parse	examples/procmon/procmon.cc	/^  void parse(const char* startAtState, int kbPerPage)$/;"	f	struct:StatData
pgrp	examples/procmon/procmon.cc	/^  int pgrp;$/;"	m	struct:StatData	file:
pid_	examples/procmon/procmon.cc	/^  const pid_t pid_;$/;"	m	class:Procmon	file:
ppid	examples/procmon/procmon.cc	/^  int ppid;$/;"	m	struct:StatData	file:
priority	examples/procmon/procmon.cc	/^  long priority;$/;"	m	struct:StatData	file:
processExists	examples/procmon/procmon.cc	/^bool processExists(pid_t pid)$/;"	f
procname_	examples/procmon/procmon.cc	/^  const string procname_;$/;"	m	class:Procmon	file:
ram_chart_	examples/procmon/procmon.cc	/^  Plot ram_chart_;$/;"	m	class:Procmon	file:
readLink	examples/procmon/procmon.cc	/^  string readLink(const char* basename)$/;"	f	class:Procmon	file:
readProcFile	examples/procmon/procmon.cc	/^  string readProcFile(const char* basename)$/;"	f	class:Procmon	file:
response_	examples/procmon/procmon.cc	/^  Buffer response_;$/;"	m	class:Procmon	file:
rssKb	examples/procmon/procmon.cc	/^  long rssKb;$/;"	m	struct:StatData	file:
rsslim	examples/procmon/procmon.cc	/^  long rsslim;$/;"	m	struct:StatData	file:
server_	examples/procmon/procmon.cc	/^  HttpServer server_;$/;"	m	class:Procmon	file:
session	examples/procmon/procmon.cc	/^  int session;$/;"	m	struct:StatData	file:
start	examples/procmon/procmon.cc	/^  void start()$/;"	f	class:Procmon
starttime	examples/procmon/procmon.cc	/^  long starttime;$/;"	m	struct:StatData	file:
state	examples/procmon/procmon.cc	/^  char state;$/;"	m	struct:StatData	file:
stime	examples/procmon/procmon.cc	/^  long stime;$/;"	m	struct:StatData	file:
sysTime_	examples/procmon/procmon.cc	/^    int sysTime_;$/;"	m	struct:Procmon::CpuTime	file:
tick	examples/procmon/procmon.cc	/^  void tick()$/;"	f	class:Procmon	file:
ticks_	examples/procmon/procmon.cc	/^  int ticks_;$/;"	m	class:Procmon	file:
tpgid	examples/procmon/procmon.cc	/^  int tpgid;$/;"	m	struct:StatData	file:
tty_nr	examples/procmon/procmon.cc	/^  int tty_nr;$/;"	m	struct:StatData	file:
userTime_	examples/procmon/procmon.cc	/^    int userTime_;$/;"	m	struct:Procmon::CpuTime	file:
utime	examples/procmon/procmon.cc	/^  long utime;$/;"	m	struct:StatData	file:
value	examples/procmon/procmon.cc	/^BOOST_STATIC_ASSERT(boost::is_pod<StatData>::value);$/;"	v
vsizeKb	examples/procmon/procmon.cc	/^  long vsizeKb;$/;"	m	struct:StatData	file:
AnswerPtr	examples/protobuf/codec/client.cc	/^typedef boost::shared_ptr<muduo::Answer> AnswerPtr;$/;"	t	file:
EmptyPtr	examples/protobuf/codec/client.cc	/^typedef boost::shared_ptr<muduo::Empty> EmptyPtr;$/;"	t	file:
QueryClient	examples/protobuf/codec/client.cc	/^  QueryClient(EventLoop* loop,$/;"	f	class:QueryClient
QueryClient	examples/protobuf/codec/client.cc	/^class QueryClient : boost::noncopyable$/;"	c	file:
client_	examples/protobuf/codec/client.cc	/^  TcpClient client_;$/;"	m	class:QueryClient	file:
codec_	examples/protobuf/codec/client.cc	/^  ProtobufCodec codec_;$/;"	m	class:QueryClient	file:
connect	examples/protobuf/codec/client.cc	/^  void connect()$/;"	f	class:QueryClient
dispatcher_	examples/protobuf/codec/client.cc	/^  ProtobufDispatcher dispatcher_;$/;"	m	class:QueryClient	file:
loop_	examples/protobuf/codec/client.cc	/^  EventLoop* loop_;$/;"	m	class:QueryClient	file:
main	examples/protobuf/codec/client.cc	/^int main(int argc, char* argv[])$/;"	f
messageToSend	examples/protobuf/codec/client.cc	/^google::protobuf::Message* messageToSend;$/;"	v
onAnswer	examples/protobuf/codec/client.cc	/^  void onAnswer(const muduo::net::TcpConnectionPtr&,$/;"	f	class:QueryClient	file:
onConnection	examples/protobuf/codec/client.cc	/^  void onConnection(const TcpConnectionPtr& conn)$/;"	f	class:QueryClient	file:
onEmpty	examples/protobuf/codec/client.cc	/^  void onEmpty(const muduo::net::TcpConnectionPtr&,$/;"	f	class:QueryClient	file:
onUnknownMessage	examples/protobuf/codec/client.cc	/^  void onUnknownMessage(const TcpConnectionPtr&,$/;"	f	class:QueryClient	file:
asInt32	examples/protobuf/codec/codec.cc	/^int32_t asInt32(const char* buf)$/;"	f
createMessage	examples/protobuf/codec/codec.cc	/^google::protobuf::Message* ProtobufCodec::createMessage(const std::string& typeName)$/;"	f	class:ProtobufCodec
defaultErrorCallback	examples/protobuf/codec/codec.cc	/^void ProtobufCodec::defaultErrorCallback(const muduo::net::TcpConnectionPtr& conn,$/;"	f	class:ProtobufCodec
errorCodeToString	examples/protobuf/codec/codec.cc	/^const string& ProtobufCodec::errorCodeToString(ErrorCode errorCode)$/;"	f	class:ProtobufCodec
fillEmptyBuffer	examples/protobuf/codec/codec.cc	/^void ProtobufCodec::fillEmptyBuffer(Buffer* buf, const google::protobuf::Message& message)$/;"	f	class:ProtobufCodec
kCheckSumErrorStr	examples/protobuf/codec/codec.cc	/^  const string kCheckSumErrorStr = "CheckSumError";$/;"	m	namespace:__anon11	file:
kInvalidLengthStr	examples/protobuf/codec/codec.cc	/^  const string kInvalidLengthStr = "InvalidLength";$/;"	m	namespace:__anon11	file:
kInvalidNameLenStr	examples/protobuf/codec/codec.cc	/^  const string kInvalidNameLenStr = "InvalidNameLen";$/;"	m	namespace:__anon11	file:
kNoErrorStr	examples/protobuf/codec/codec.cc	/^  const string kNoErrorStr = "NoError";$/;"	m	namespace:__anon11	file:
kParseErrorStr	examples/protobuf/codec/codec.cc	/^  const string kParseErrorStr = "ParseError";$/;"	m	namespace:__anon11	file:
kUnknownErrorStr	examples/protobuf/codec/codec.cc	/^  const string kUnknownErrorStr = "UnknownError";$/;"	m	namespace:__anon11	file:
kUnknownMessageTypeStr	examples/protobuf/codec/codec.cc	/^  const string kUnknownMessageTypeStr = "UnknownMessageType";$/;"	m	namespace:__anon11	file:
onMessage	examples/protobuf/codec/codec.cc	/^void ProtobufCodec::onMessage(const TcpConnectionPtr& conn,$/;"	f	class:ProtobufCodec
parse	examples/protobuf/codec/codec.cc	/^MessagePtr ProtobufCodec::parse(const char* buf, int len, ErrorCode* error)$/;"	f	class:ProtobufCodec
ErrorCallback	examples/protobuf/codec/codec.h	/^                                ErrorCode)> ErrorCallback;$/;"	t	class:ProtobufCodec
ErrorCode	examples/protobuf/codec/codec.h	/^  enum ErrorCode$/;"	g	class:ProtobufCodec
MUDUO_EXAMPLES_PROTOBUF_CODEC_CODEC_H	examples/protobuf/codec/codec.h	10;"	d
MessagePtr	examples/protobuf/codec/codec.h	/^typedef boost::shared_ptr<google::protobuf::Message> MessagePtr;$/;"	t
ProtobufCodec	examples/protobuf/codec/codec.h	/^  ProtobufCodec(const ProtobufMessageCallback& messageCb, const ErrorCallback& errorCb)$/;"	f	class:ProtobufCodec
ProtobufCodec	examples/protobuf/codec/codec.h	/^  explicit ProtobufCodec(const ProtobufMessageCallback& messageCb)$/;"	f	class:ProtobufCodec
ProtobufCodec	examples/protobuf/codec/codec.h	/^class ProtobufCodec : boost::noncopyable$/;"	c
ProtobufMessageCallback	examples/protobuf/codec/codec.h	/^                                muduo::Timestamp)> ProtobufMessageCallback;$/;"	t	class:ProtobufCodec
errorCallback_	examples/protobuf/codec/codec.h	/^  ErrorCallback errorCallback_;$/;"	m	class:ProtobufCodec
kCheckSumError	examples/protobuf/codec/codec.h	/^    kCheckSumError,$/;"	e	enum:ProtobufCodec::ErrorCode
kHeaderLen	examples/protobuf/codec/codec.h	/^  const static int kHeaderLen = sizeof(int32_t);$/;"	m	class:ProtobufCodec
kInvalidLength	examples/protobuf/codec/codec.h	/^    kInvalidLength,$/;"	e	enum:ProtobufCodec::ErrorCode
kInvalidNameLen	examples/protobuf/codec/codec.h	/^    kInvalidNameLen,$/;"	e	enum:ProtobufCodec::ErrorCode
kMaxMessageLen	examples/protobuf/codec/codec.h	/^  const static int kMaxMessageLen = 64*1024*1024; \/\/ same as codec_stream.h kDefaultTotalBytesLimit$/;"	m	class:ProtobufCodec
kMinMessageLen	examples/protobuf/codec/codec.h	/^  const static int kMinMessageLen = 2*kHeaderLen + 2; \/\/ nameLen + typeName + checkSum$/;"	m	class:ProtobufCodec
kNoError	examples/protobuf/codec/codec.h	/^    kNoError = 0,$/;"	e	enum:ProtobufCodec::ErrorCode
kParseError	examples/protobuf/codec/codec.h	/^    kParseError,$/;"	e	enum:ProtobufCodec::ErrorCode
kUnknownMessageType	examples/protobuf/codec/codec.h	/^    kUnknownMessageType,$/;"	e	enum:ProtobufCodec::ErrorCode
messageCallback_	examples/protobuf/codec/codec.h	/^  ProtobufMessageCallback messageCallback_;$/;"	m	class:ProtobufCodec
send	examples/protobuf/codec/codec.h	/^  void send(const muduo::net::TcpConnectionPtr& conn,$/;"	f	class:ProtobufCodec
g_count	examples/protobuf/codec/codec_test.cc	/^int g_count = 0;$/;"	v
main	examples/protobuf/codec/codec_test.cc	/^int main()$/;"	f
onMessage	examples/protobuf/codec/codec_test.cc	/^void onMessage(const muduo::net::TcpConnectionPtr& conn,$/;"	f
print	examples/protobuf/codec/codec_test.cc	/^void print(const Buffer& buf)$/;"	f
redoCheckSum	examples/protobuf/codec/codec_test.cc	/^void redoCheckSum(string& data, int len)$/;"	f
testAnswer	examples/protobuf/codec/codec_test.cc	/^void testAnswer()$/;"	f
testBadBuffer	examples/protobuf/codec/codec_test.cc	/^void testBadBuffer()$/;"	f
testEmpty	examples/protobuf/codec/codec_test.cc	/^void testEmpty()$/;"	f
testOnMessage	examples/protobuf/codec/codec_test.cc	/^void testOnMessage()$/;"	f
testQuery	examples/protobuf/codec/codec_test.cc	/^void testQuery()$/;"	f
Callback	examples/protobuf/codec/dispatcher.h	/^class Callback : boost::noncopyable$/;"	c
CallbackMap	examples/protobuf/codec/dispatcher.h	/^  typedef std::map<const google::protobuf::Descriptor*, boost::shared_ptr<Callback> > CallbackMap;$/;"	t	class:ProtobufDispatcher
CallbackT	examples/protobuf/codec/dispatcher.h	/^  CallbackT(const ProtobufMessageTCallback& callback)$/;"	f	class:CallbackT
CallbackT	examples/protobuf/codec/dispatcher.h	/^class CallbackT : public Callback$/;"	c
MUDUO_EXAMPLES_PROTOBUF_CODEC_DISPATCHER_H	examples/protobuf/codec/dispatcher.h	10;"	d
MessagePtr	examples/protobuf/codec/dispatcher.h	/^typedef boost::shared_ptr<google::protobuf::Message> MessagePtr;$/;"	t
ProtobufDispatcher	examples/protobuf/codec/dispatcher.h	/^  explicit ProtobufDispatcher(const ProtobufMessageCallback& defaultCb)$/;"	f	class:ProtobufDispatcher
ProtobufDispatcher	examples/protobuf/codec/dispatcher.h	/^class ProtobufDispatcher$/;"	c
ProtobufMessageCallback	examples/protobuf/codec/dispatcher.h	/^                                muduo::Timestamp)> ProtobufMessageCallback;$/;"	t	class:ProtobufDispatcher
ProtobufMessageTCallback	examples/protobuf/codec/dispatcher.h	/^                                muduo::Timestamp)> ProtobufMessageTCallback;$/;"	t	class:CallbackT
callback_	examples/protobuf/codec/dispatcher.h	/^  ProtobufMessageTCallback callback_;$/;"	m	class:CallbackT
callbacks_	examples/protobuf/codec/dispatcher.h	/^  CallbackMap callbacks_;$/;"	m	class:ProtobufDispatcher
defaultCallback_	examples/protobuf/codec/dispatcher.h	/^  ProtobufMessageCallback defaultCallback_;$/;"	m	class:ProtobufDispatcher
onMessage	examples/protobuf/codec/dispatcher.h	/^  virtual void onMessage(const muduo::net::TcpConnectionPtr& conn,$/;"	f	class:CallbackT
onProtobufMessage	examples/protobuf/codec/dispatcher.h	/^  void onProtobufMessage(const muduo::net::TcpConnectionPtr& conn,$/;"	f	class:ProtobufDispatcher
registerMessageCallback	examples/protobuf/codec/dispatcher.h	/^  void registerMessageCallback(const typename CallbackT<T>::ProtobufMessageTCallback& callback)$/;"	f	class:ProtobufDispatcher
~Callback	examples/protobuf/codec/dispatcher.h	/^  virtual ~Callback() {};$/;"	f	class:Callback
CallbackMap	examples/protobuf/codec/dispatcher_lite.h	/^  typedef std::map<const google::protobuf::Descriptor*, ProtobufMessageCallback> CallbackMap;$/;"	t	class:ProtobufDispatcherLite
MUDUO_EXAMPLES_PROTOBUF_CODEC_DISPATCHER_LITE_H	examples/protobuf/codec/dispatcher_lite.h	10;"	d
MessagePtr	examples/protobuf/codec/dispatcher_lite.h	/^typedef boost::shared_ptr<google::protobuf::Message> MessagePtr;$/;"	t
ProtobufDispatcherLite	examples/protobuf/codec/dispatcher_lite.h	/^  explicit ProtobufDispatcherLite(const ProtobufMessageCallback& defaultCb)$/;"	f	class:ProtobufDispatcherLite
ProtobufDispatcherLite	examples/protobuf/codec/dispatcher_lite.h	/^class ProtobufDispatcherLite : boost::noncopyable$/;"	c
ProtobufMessageCallback	examples/protobuf/codec/dispatcher_lite.h	/^                                muduo::Timestamp)> ProtobufMessageCallback;$/;"	t	class:ProtobufDispatcherLite
callbacks_	examples/protobuf/codec/dispatcher_lite.h	/^  CallbackMap callbacks_;$/;"	m	class:ProtobufDispatcherLite
defaultCallback_	examples/protobuf/codec/dispatcher_lite.h	/^  ProtobufMessageCallback defaultCallback_;$/;"	m	class:ProtobufDispatcherLite
onProtobufMessage	examples/protobuf/codec/dispatcher_lite.h	/^  void onProtobufMessage(const muduo::net::TcpConnectionPtr& conn,$/;"	f	class:ProtobufDispatcherLite
registerMessageCallback	examples/protobuf/codec/dispatcher_lite.h	/^  void registerMessageCallback(const google::protobuf::Descriptor* desc,$/;"	f	class:ProtobufDispatcherLite
main	examples/protobuf/codec/dispatcher_lite_test.cc	/^int main()$/;"	f
onAnswer	examples/protobuf/codec/dispatcher_lite_test.cc	/^void onAnswer(const muduo::net::TcpConnectionPtr&,$/;"	f
onQuery	examples/protobuf/codec/dispatcher_lite_test.cc	/^void onQuery(const muduo::net::TcpConnectionPtr&,$/;"	f
onUnknownMessageType	examples/protobuf/codec/dispatcher_lite_test.cc	/^void onUnknownMessageType(const muduo::net::TcpConnectionPtr&,$/;"	f
AnswerPtr	examples/protobuf/codec/dispatcher_test.cc	/^typedef boost::shared_ptr<muduo::Answer> AnswerPtr;$/;"	t	file:
QueryPtr	examples/protobuf/codec/dispatcher_test.cc	/^typedef boost::shared_ptr<muduo::Query> QueryPtr;$/;"	t	file:
main	examples/protobuf/codec/dispatcher_test.cc	/^int main()$/;"	f
onAnswer	examples/protobuf/codec/dispatcher_test.cc	/^void onAnswer(const muduo::net::TcpConnectionPtr&,$/;"	f
onQuery	examples/protobuf/codec/dispatcher_test.cc	/^void onQuery(const muduo::net::TcpConnectionPtr&,$/;"	f
onUnknownMessageType	examples/protobuf/codec/dispatcher_test.cc	/^void onUnknownMessageType(const muduo::net::TcpConnectionPtr&,$/;"	f
test_down_pointer_cast	examples/protobuf/codec/dispatcher_test.cc	/^void test_down_pointer_cast()$/;"	f
AnswerPtr	examples/protobuf/codec/server.cc	/^typedef boost::shared_ptr<muduo::Answer> AnswerPtr;$/;"	t	file:
QueryPtr	examples/protobuf/codec/server.cc	/^typedef boost::shared_ptr<muduo::Query> QueryPtr;$/;"	t	file:
QueryServer	examples/protobuf/codec/server.cc	/^  QueryServer(EventLoop* loop,$/;"	f	class:QueryServer
QueryServer	examples/protobuf/codec/server.cc	/^class QueryServer : boost::noncopyable$/;"	c	file:
codec_	examples/protobuf/codec/server.cc	/^  ProtobufCodec codec_;$/;"	m	class:QueryServer	file:
dispatcher_	examples/protobuf/codec/server.cc	/^  ProtobufDispatcher dispatcher_;$/;"	m	class:QueryServer	file:
main	examples/protobuf/codec/server.cc	/^int main(int argc, char* argv[])$/;"	f
onAnswer	examples/protobuf/codec/server.cc	/^  void onAnswer(const muduo::net::TcpConnectionPtr& conn,$/;"	f	class:QueryServer	file:
onConnection	examples/protobuf/codec/server.cc	/^  void onConnection(const TcpConnectionPtr& conn)$/;"	f	class:QueryServer	file:
onQuery	examples/protobuf/codec/server.cc	/^  void onQuery(const muduo::net::TcpConnectionPtr& conn,$/;"	f	class:QueryServer	file:
onUnknownMessage	examples/protobuf/codec/server.cc	/^  void onUnknownMessage(const TcpConnectionPtr& conn,$/;"	f	class:QueryServer	file:
server_	examples/protobuf/codec/server.cc	/^  TcpServer server_;$/;"	m	class:QueryServer	file:
start	examples/protobuf/codec/server.cc	/^  void start()$/;"	f	class:QueryServer
RpcClient	examples/protobuf/resolver/client.cc	/^  RpcClient(EventLoop* loop, const InetAddress& serverAddr)$/;"	f	class:RpcClient
RpcClient	examples/protobuf/resolver/client.cc	/^class RpcClient : boost::noncopyable$/;"	c	file:
channel_	examples/protobuf/resolver/client.cc	/^  RpcChannelPtr channel_;$/;"	m	class:RpcClient	file:
client_	examples/protobuf/resolver/client.cc	/^  TcpClient client_;$/;"	m	class:RpcClient	file:
connect	examples/protobuf/resolver/client.cc	/^  void connect()$/;"	f	class:RpcClient
got_	examples/protobuf/resolver/client.cc	/^  int got_;$/;"	m	class:RpcClient	file:
loop_	examples/protobuf/resolver/client.cc	/^  EventLoop* loop_;$/;"	m	class:RpcClient	file:
main	examples/protobuf/resolver/client.cc	/^int main(int argc, char* argv[])$/;"	f
onConnection	examples/protobuf/resolver/client.cc	/^  void onConnection(const TcpConnectionPtr& conn)$/;"	f	class:RpcClient	file:
resolve	examples/protobuf/resolver/client.cc	/^  void resolve(const std::string& host)$/;"	f	class:RpcClient	file:
resolved	examples/protobuf/resolver/client.cc	/^  void resolved(resolver::ResolveResponse* resp, std::string host)$/;"	f	class:RpcClient	file:
stub_	examples/protobuf/resolver/client.cc	/^  resolver::ResolverService::Stub stub_;$/;"	m	class:RpcClient	file:
total_	examples/protobuf/resolver/client.cc	/^  int total_;$/;"	m	class:RpcClient	file:
Resolve	examples/protobuf/resolver/server.cc	/^  virtual void Resolve(::google::protobuf::RpcController* controller,$/;"	f	class:resolver::ResolverServiceImpl
ResolverServiceImpl	examples/protobuf/resolver/server.cc	/^  ResolverServiceImpl(EventLoop* loop)$/;"	f	class:resolver::ResolverServiceImpl
ResolverServiceImpl	examples/protobuf/resolver/server.cc	/^class ResolverServiceImpl : public ResolverService$/;"	c	namespace:resolver	file:
doneCallback	examples/protobuf/resolver/server.cc	/^  void doneCallback(const std::string& host,$/;"	f	class:resolver::ResolverServiceImpl	file:
main	examples/protobuf/resolver/server.cc	/^int main()$/;"	f
resolver	examples/protobuf/resolver/server.cc	/^namespace resolver$/;"	n	file:
resolver_	examples/protobuf/resolver/server.cc	/^  cdns::Resolver resolver_;$/;"	m	class:resolver::ResolverServiceImpl	file:
RpcClient	examples/protobuf/rpc/client.cc	/^  RpcClient(EventLoop* loop, const InetAddress& serverAddr)$/;"	f	class:RpcClient
RpcClient	examples/protobuf/rpc/client.cc	/^class RpcClient : boost::noncopyable$/;"	c	file:
channel_	examples/protobuf/rpc/client.cc	/^  RpcChannelPtr channel_;$/;"	m	class:RpcClient	file:
client_	examples/protobuf/rpc/client.cc	/^  TcpClient client_;$/;"	m	class:RpcClient	file:
connect	examples/protobuf/rpc/client.cc	/^  void connect()$/;"	f	class:RpcClient
loop_	examples/protobuf/rpc/client.cc	/^  EventLoop* loop_;$/;"	m	class:RpcClient	file:
main	examples/protobuf/rpc/client.cc	/^int main(int argc, char* argv[])$/;"	f
onConnection	examples/protobuf/rpc/client.cc	/^  void onConnection(const TcpConnectionPtr& conn)$/;"	f	class:RpcClient	file:
solved	examples/protobuf/rpc/client.cc	/^  void solved(sudoku::SudokuResponse* resp)$/;"	f	class:RpcClient	file:
stub_	examples/protobuf/rpc/client.cc	/^  sudoku::SudokuService::Stub stub_;$/;"	m	class:RpcClient	file:
Solve	examples/protobuf/rpc/server.cc	/^  virtual void Solve(::google::protobuf::RpcController* controller,$/;"	f	class:sudoku::SudokuServiceImpl
SudokuServiceImpl	examples/protobuf/rpc/server.cc	/^class SudokuServiceImpl : public SudokuService$/;"	c	namespace:sudoku	file:
main	examples/protobuf/rpc/server.cc	/^int main()$/;"	f
sudoku	examples/protobuf/rpc/server.cc	/^namespace sudoku$/;"	n	file:
BackendSession	examples/protobuf/rpcbalancer/balancer.cc	/^  BackendSession(EventLoop* loop, const InetAddress& backendAddr, const string& name)$/;"	f	class:BackendSession
BackendSession	examples/protobuf/rpcbalancer/balancer.cc	/^class BackendSession : boost::noncopyable$/;"	c	file:
Balancer	examples/protobuf/rpcbalancer/balancer.cc	/^  Balancer(EventLoop* loop,$/;"	f	class:Balancer
Balancer	examples/protobuf/rpcbalancer/balancer.cc	/^class Balancer : boost::noncopyable$/;"	c	file:
PerThread	examples/protobuf/rpcbalancer/balancer.cc	/^    PerThread() : current(0) { }$/;"	f	struct:Balancer::PerThread
PerThread	examples/protobuf/rpcbalancer/balancer.cc	/^  struct PerThread$/;"	s	class:Balancer	file:
Request	examples/protobuf/rpcbalancer/balancer.cc	/^  struct Request$/;"	s	class:BackendSession	file:
backends	examples/protobuf/rpcbalancer/balancer.cc	/^    boost::ptr_vector<BackendSession> backends;$/;"	m	struct:Balancer::PerThread	file:
backends_	examples/protobuf/rpcbalancer/balancer.cc	/^  std::vector<InetAddress> backends_;$/;"	m	class:Balancer	file:
clientConn	examples/protobuf/rpcbalancer/balancer.cc	/^    boost::weak_ptr<TcpConnection> clientConn;$/;"	m	struct:BackendSession::Request	file:
client_	examples/protobuf/rpcbalancer/balancer.cc	/^  TcpClient client_;$/;"	m	class:BackendSession	file:
codec_	examples/protobuf/rpcbalancer/balancer.cc	/^  RpcCodec codec_;$/;"	m	class:BackendSession	file:
codec_	examples/protobuf/rpcbalancer/balancer.cc	/^  RpcCodec codec_;$/;"	m	class:Balancer	file:
conn_	examples/protobuf/rpcbalancer/balancer.cc	/^  TcpConnectionPtr conn_;$/;"	m	class:BackendSession	file:
connect	examples/protobuf/rpcbalancer/balancer.cc	/^  void connect()$/;"	f	class:BackendSession
current	examples/protobuf/rpcbalancer/balancer.cc	/^    size_t current;$/;"	m	struct:Balancer::PerThread	file:
initPerThread	examples/protobuf/rpcbalancer/balancer.cc	/^  void initPerThread(EventLoop* ioLoop)$/;"	f	class:Balancer	file:
loop_	examples/protobuf/rpcbalancer/balancer.cc	/^  EventLoop* loop_;$/;"	m	class:BackendSession	file:
loop_	examples/protobuf/rpcbalancer/balancer.cc	/^  EventLoop* loop_;$/;"	m	class:Balancer	file:
main	examples/protobuf/rpcbalancer/balancer.cc	/^int main(int argc, char* argv[])$/;"	f
nextId_	examples/protobuf/rpcbalancer/balancer.cc	/^  uint64_t nextId_;$/;"	m	class:BackendSession	file:
onConnection	examples/protobuf/rpcbalancer/balancer.cc	/^  void onConnection(const TcpConnectionPtr& conn)$/;"	f	class:BackendSession	file:
onConnection	examples/protobuf/rpcbalancer/balancer.cc	/^  void onConnection(const TcpConnectionPtr& conn)$/;"	f	class:Balancer	file:
onRpcMessage	examples/protobuf/rpcbalancer/balancer.cc	/^  void onRpcMessage(const TcpConnectionPtr& conn,$/;"	f	class:Balancer	file:
onRpcMessage	examples/protobuf/rpcbalancer/balancer.cc	/^  void onRpcMessage(const TcpConnectionPtr&,$/;"	f	class:BackendSession	file:
origId	examples/protobuf/rpcbalancer/balancer.cc	/^    uint64_t origId;$/;"	m	struct:BackendSession::Request	file:
outstandings_	examples/protobuf/rpcbalancer/balancer.cc	/^  std::map<uint64_t, Request> outstandings_;$/;"	m	class:BackendSession	file:
send	examples/protobuf/rpcbalancer/balancer.cc	/^  bool send(RpcMessage& msg, const TcpConnectionPtr& clientConn)$/;"	f	class:BackendSession
server_	examples/protobuf/rpcbalancer/balancer.cc	/^  TcpServer server_;$/;"	m	class:Balancer	file:
setThreadNum	examples/protobuf/rpcbalancer/balancer.cc	/^  void setThreadNum(int numThreads)$/;"	f	class:Balancer
start	examples/protobuf/rpcbalancer/balancer.cc	/^  void start()$/;"	f	class:Balancer
t_backends_	examples/protobuf/rpcbalancer/balancer.cc	/^  ThreadLocal<PerThread> t_backends_;$/;"	m	class:Balancer	file:
threadCount_	examples/protobuf/rpcbalancer/balancer.cc	/^  AtomicInt32 threadCount_;$/;"	m	class:Balancer	file:
~Balancer	examples/protobuf/rpcbalancer/balancer.cc	/^  ~Balancer()$/;"	f	class:Balancer
BackendSession	examples/protobuf/rpcbalancer/balancer_raw.cc	/^  BackendSession(EventLoop* loop, const InetAddress& backendAddr, const string& name)$/;"	f	class:BackendSession
BackendSession	examples/protobuf/rpcbalancer/balancer_raw.cc	/^class BackendSession : boost::noncopyable$/;"	c	file:
Balancer	examples/protobuf/rpcbalancer/balancer_raw.cc	/^  Balancer(EventLoop* loop,$/;"	f	class:Balancer
Balancer	examples/protobuf/rpcbalancer/balancer_raw.cc	/^class Balancer : boost::noncopyable$/;"	c	file:
PerThread	examples/protobuf/rpcbalancer/balancer_raw.cc	/^    PerThread() : current(0) { }$/;"	f	struct:Balancer::PerThread
PerThread	examples/protobuf/rpcbalancer/balancer_raw.cc	/^  struct PerThread$/;"	s	class:Balancer	file:
RawMessage	examples/protobuf/rpcbalancer/balancer_raw.cc	/^  RawMessage(StringPiece m)$/;"	f	struct:RawMessage
RawMessage	examples/protobuf/rpcbalancer/balancer_raw.cc	/^struct RawMessage$/;"	s	file:
Request	examples/protobuf/rpcbalancer/balancer_raw.cc	/^  struct Request$/;"	s	class:BackendSession	file:
backends	examples/protobuf/rpcbalancer/balancer_raw.cc	/^    boost::ptr_vector<BackendSession> backends;$/;"	m	struct:Balancer::PerThread	file:
backends_	examples/protobuf/rpcbalancer/balancer_raw.cc	/^  std::vector<InetAddress> backends_;$/;"	m	class:Balancer	file:
clientConn	examples/protobuf/rpcbalancer/balancer_raw.cc	/^    boost::weak_ptr<TcpConnection> clientConn;$/;"	m	struct:BackendSession::Request	file:
client_	examples/protobuf/rpcbalancer/balancer_raw.cc	/^  TcpClient client_;$/;"	m	class:BackendSession	file:
codec_	examples/protobuf/rpcbalancer/balancer_raw.cc	/^  RpcCodec codec_;$/;"	m	class:BackendSession	file:
codec_	examples/protobuf/rpcbalancer/balancer_raw.cc	/^  RpcCodec codec_;$/;"	m	class:Balancer	file:
conn_	examples/protobuf/rpcbalancer/balancer_raw.cc	/^  TcpConnectionPtr conn_;$/;"	m	class:BackendSession	file:
connect	examples/protobuf/rpcbalancer/balancer_raw.cc	/^  void connect()$/;"	f	class:BackendSession
current	examples/protobuf/rpcbalancer/balancer_raw.cc	/^    size_t current;$/;"	m	struct:Balancer::PerThread	file:
id	examples/protobuf/rpcbalancer/balancer_raw.cc	/^  uint64_t id() const { return id_; }$/;"	f	struct:RawMessage
id_	examples/protobuf/rpcbalancer/balancer_raw.cc	/^  uint64_t id_;$/;"	m	struct:RawMessage	file:
initPerThread	examples/protobuf/rpcbalancer/balancer_raw.cc	/^  void initPerThread(EventLoop* ioLoop)$/;"	f	class:Balancer	file:
loc_	examples/protobuf/rpcbalancer/balancer_raw.cc	/^  const void* loc_;$/;"	m	struct:RawMessage	file:
loop_	examples/protobuf/rpcbalancer/balancer_raw.cc	/^  EventLoop* loop_;$/;"	m	class:BackendSession	file:
loop_	examples/protobuf/rpcbalancer/balancer_raw.cc	/^  EventLoop* loop_;$/;"	m	class:Balancer	file:
main	examples/protobuf/rpcbalancer/balancer_raw.cc	/^int main(int argc, char* argv[])$/;"	f
message_	examples/protobuf/rpcbalancer/balancer_raw.cc	/^  StringPiece message_;$/;"	m	struct:RawMessage	file:
nextId_	examples/protobuf/rpcbalancer/balancer_raw.cc	/^  uint64_t nextId_;$/;"	m	class:BackendSession	file:
onConnection	examples/protobuf/rpcbalancer/balancer_raw.cc	/^  void onConnection(const TcpConnectionPtr& conn)$/;"	f	class:BackendSession	file:
onConnection	examples/protobuf/rpcbalancer/balancer_raw.cc	/^  void onConnection(const TcpConnectionPtr& conn)$/;"	f	class:Balancer	file:
onMessageT	examples/protobuf/rpcbalancer/balancer_raw.cc	/^  bool onMessageT(const TcpConnectionPtr& conn, MSG& msg)$/;"	f	class:Balancer	file:
onMessageT	examples/protobuf/rpcbalancer/balancer_raw.cc	/^  void onMessageT(MSG& msg)$/;"	f	class:BackendSession	file:
onRawMessage	examples/protobuf/rpcbalancer/balancer_raw.cc	/^  bool onRawMessage(const TcpConnectionPtr& conn,$/;"	f	class:Balancer	file:
onRawMessage	examples/protobuf/rpcbalancer/balancer_raw.cc	/^  bool onRawMessage(const TcpConnectionPtr&,$/;"	f	class:BackendSession	file:
onRpcMessage	examples/protobuf/rpcbalancer/balancer_raw.cc	/^  void onRpcMessage(const TcpConnectionPtr& conn,$/;"	f	class:Balancer	file:
onRpcMessage	examples/protobuf/rpcbalancer/balancer_raw.cc	/^  void onRpcMessage(const TcpConnectionPtr&,$/;"	f	class:BackendSession	file:
origId	examples/protobuf/rpcbalancer/balancer_raw.cc	/^    uint64_t origId;$/;"	m	struct:BackendSession::Request	file:
outstandings_	examples/protobuf/rpcbalancer/balancer_raw.cc	/^  std::map<uint64_t, Request> outstandings_;$/;"	m	class:BackendSession	file:
parse	examples/protobuf/rpcbalancer/balancer_raw.cc	/^  bool parse(const string& tag)$/;"	f	struct:RawMessage
send	examples/protobuf/rpcbalancer/balancer_raw.cc	/^  bool send(MSG& msg, const TcpConnectionPtr& clientConn)$/;"	f	class:BackendSession
sendTo	examples/protobuf/rpcbalancer/balancer_raw.cc	/^  void sendTo(const TcpConnectionPtr& conn, RawMessage& msg)$/;"	f	class:BackendSession	file:
sendTo	examples/protobuf/rpcbalancer/balancer_raw.cc	/^  void sendTo(const TcpConnectionPtr& conn, const RpcMessage& msg)$/;"	f	class:BackendSession	file:
server_	examples/protobuf/rpcbalancer/balancer_raw.cc	/^  TcpServer server_;$/;"	m	class:Balancer	file:
setThreadNum	examples/protobuf/rpcbalancer/balancer_raw.cc	/^  void setThreadNum(int numThreads)$/;"	f	class:Balancer
set_id	examples/protobuf/rpcbalancer/balancer_raw.cc	/^  void set_id(uint64_t x) { id_ = x; }$/;"	f	struct:RawMessage
start	examples/protobuf/rpcbalancer/balancer_raw.cc	/^  void start()$/;"	f	class:Balancer
t_backends_	examples/protobuf/rpcbalancer/balancer_raw.cc	/^  ThreadLocal<PerThread> t_backends_;$/;"	m	class:Balancer	file:
threadCount_	examples/protobuf/rpcbalancer/balancer_raw.cc	/^  AtomicInt32 threadCount_;$/;"	m	class:Balancer	file:
updateId	examples/protobuf/rpcbalancer/balancer_raw.cc	/^  void updateId()$/;"	f	struct:RawMessage
~Balancer	examples/protobuf/rpcbalancer/balancer_raw.cc	/^  ~Balancer()$/;"	f	class:Balancer
RpcClient	examples/protobuf/rpcbench/client.cc	/^  RpcClient(EventLoop* loop,$/;"	f	class:RpcClient
RpcClient	examples/protobuf/rpcbench/client.cc	/^class RpcClient : boost::noncopyable$/;"	c	file:
allConnected_	examples/protobuf/rpcbench/client.cc	/^  CountDownLatch* allConnected_;$/;"	m	class:RpcClient	file:
allFinished_	examples/protobuf/rpcbench/client.cc	/^  CountDownLatch* allFinished_;$/;"	m	class:RpcClient	file:
channel_	examples/protobuf/rpcbench/client.cc	/^  RpcChannelPtr channel_;$/;"	m	class:RpcClient	file:
client_	examples/protobuf/rpcbench/client.cc	/^  TcpClient client_;$/;"	m	class:RpcClient	file:
connect	examples/protobuf/rpcbench/client.cc	/^  void connect()$/;"	f	class:RpcClient
count_	examples/protobuf/rpcbench/client.cc	/^  int count_;$/;"	m	class:RpcClient	file:
kRequests	examples/protobuf/rpcbench/client.cc	/^static const int kRequests = 50000;$/;"	v	file:
main	examples/protobuf/rpcbench/client.cc	/^int main(int argc, char* argv[])$/;"	f
onConnection	examples/protobuf/rpcbench/client.cc	/^  void onConnection(const TcpConnectionPtr& conn)$/;"	f	class:RpcClient	file:
replied	examples/protobuf/rpcbench/client.cc	/^  void replied(echo::EchoResponse* resp)$/;"	f	class:RpcClient	file:
sendRequest	examples/protobuf/rpcbench/client.cc	/^  void sendRequest()$/;"	f	class:RpcClient
stub_	examples/protobuf/rpcbench/client.cc	/^  echo::EchoService::Stub stub_;$/;"	m	class:RpcClient	file:
Echo	examples/protobuf/rpcbench/server.cc	/^  virtual void Echo(::google::protobuf::RpcController* controller,$/;"	f	class:echo::EchoServiceImpl
EchoServiceImpl	examples/protobuf/rpcbench/server.cc	/^class EchoServiceImpl : public EchoService$/;"	c	namespace:echo	file:
echo	examples/protobuf/rpcbench/server.cc	/^namespace echo$/;"	n	file:
main	examples/protobuf/rpcbench/server.cc	/^int main(int argc, char* argv[])$/;"	f
clientConnection	examples/roundtrip/roundtrip.cc	/^TcpConnectionPtr clientConnection;$/;"	v
clientConnectionCallback	examples/roundtrip/roundtrip.cc	/^void clientConnectionCallback(const TcpConnectionPtr& conn)$/;"	f
clientMessageCallback	examples/roundtrip/roundtrip.cc	/^void clientMessageCallback(const TcpConnectionPtr&,$/;"	f
frameLen	examples/roundtrip/roundtrip.cc	/^const size_t frameLen = 2*sizeof(int64_t);$/;"	v
main	examples/roundtrip/roundtrip.cc	/^int main(int argc, char* argv[])$/;"	f
runClient	examples/roundtrip/roundtrip.cc	/^void runClient(const char* ip, uint16_t port)$/;"	f
runServer	examples/roundtrip/roundtrip.cc	/^void runServer(uint16_t port)$/;"	f
sendMyTime	examples/roundtrip/roundtrip.cc	/^void sendMyTime()$/;"	f
serverConnectionCallback	examples/roundtrip/roundtrip.cc	/^void serverConnectionCallback(const TcpConnectionPtr& conn)$/;"	f
serverMessageCallback	examples/roundtrip/roundtrip.cc	/^void serverMessageCallback(const TcpConnectionPtr& conn,$/;"	f
clientReadCallback	examples/roundtrip/roundtrip_udp.cc	/^void clientReadCallback(int sockfd, muduo::Timestamp receiveTime)$/;"	f
createNonblockingUDP	examples/roundtrip/roundtrip_udp.cc	/^int createNonblockingUDP()$/;"	f
frameLen	examples/roundtrip/roundtrip_udp.cc	/^const size_t frameLen = 2*sizeof(int64_t);$/;"	v
main	examples/roundtrip/roundtrip_udp.cc	/^int main(int argc, char* argv[])$/;"	f
runClient	examples/roundtrip/roundtrip_udp.cc	/^void runClient(const char* ip, uint16_t port)$/;"	f
runServer	examples/roundtrip/roundtrip_udp.cc	/^void runServer(uint16_t port)$/;"	f
sendMyTime	examples/roundtrip/roundtrip_udp.cc	/^void sendMyTime(int sockfd)$/;"	f
serverReadCallback	examples/roundtrip/roundtrip_udp.cc	/^void serverReadCallback(int sockfd, muduo::Timestamp receiveTime)$/;"	f
benchmark	examples/shorturl/shorturl.cc	/^bool benchmark = false;$/;"	v
favicon	examples/shorturl/shorturl.cc	/^char favicon[555] = {$/;"	v
main	examples/shorturl/shorturl.cc	/^int main(int argc, char* argv[])$/;"	f
onRequest	examples/shorturl/shorturl.cc	/^void onRequest(const HttpRequest& req, HttpResponse* resp)$/;"	f
redirections	examples/shorturl/shorturl.cc	/^std::map<string, string> redirections;$/;"	v
main	examples/simple/allinone/allinone.cc	/^int main()$/;"	f
ChargenServer	examples/simple/chargen/chargen.cc	/^ChargenServer::ChargenServer(EventLoop* loop,$/;"	f	class:ChargenServer
onConnection	examples/simple/chargen/chargen.cc	/^void ChargenServer::onConnection(const TcpConnectionPtr& conn)$/;"	f	class:ChargenServer
onMessage	examples/simple/chargen/chargen.cc	/^void ChargenServer::onMessage(const TcpConnectionPtr& conn,$/;"	f	class:ChargenServer
onWriteComplete	examples/simple/chargen/chargen.cc	/^void ChargenServer::onWriteComplete(const TcpConnectionPtr& conn)$/;"	f	class:ChargenServer
printThroughput	examples/simple/chargen/chargen.cc	/^void ChargenServer::printThroughput()$/;"	f	class:ChargenServer
start	examples/simple/chargen/chargen.cc	/^void ChargenServer::start()$/;"	f	class:ChargenServer
ChargenServer	examples/simple/chargen/chargen.h	/^class ChargenServer$/;"	c
MUDUO_EXAMPLES_SIMPLE_CHARGEN_CHARGEN_H	examples/simple/chargen/chargen.h	2;"	d
message_	examples/simple/chargen/chargen.h	/^  muduo::string message_;$/;"	m	class:ChargenServer
server_	examples/simple/chargen/chargen.h	/^  muduo::net::TcpServer server_;$/;"	m	class:ChargenServer
startTime_	examples/simple/chargen/chargen.h	/^  muduo::Timestamp startTime_;$/;"	m	class:ChargenServer
transferred_	examples/simple/chargen/chargen.h	/^  int64_t transferred_;$/;"	m	class:ChargenServer
main	examples/simple/chargen/main.cc	/^int main()$/;"	f
ChargenClient	examples/simple/chargenclient/chargenclient.cc	/^  ChargenClient(EventLoop* loop, const InetAddress& listenAddr)$/;"	f	class:ChargenClient
ChargenClient	examples/simple/chargenclient/chargenclient.cc	/^class ChargenClient : boost::noncopyable$/;"	c	file:
client_	examples/simple/chargenclient/chargenclient.cc	/^  TcpClient client_;$/;"	m	class:ChargenClient	file:
connect	examples/simple/chargenclient/chargenclient.cc	/^  void connect()$/;"	f	class:ChargenClient
loop_	examples/simple/chargenclient/chargenclient.cc	/^  EventLoop* loop_;$/;"	m	class:ChargenClient	file:
main	examples/simple/chargenclient/chargenclient.cc	/^int main(int argc, char* argv[])$/;"	f
onConnection	examples/simple/chargenclient/chargenclient.cc	/^  void onConnection(const TcpConnectionPtr& conn)$/;"	f	class:ChargenClient	file:
onMessage	examples/simple/chargenclient/chargenclient.cc	/^  void onMessage(const TcpConnectionPtr& conn, Buffer* buf, Timestamp receiveTime)$/;"	f	class:ChargenClient	file:
DaytimeServer	examples/simple/daytime/daytime.cc	/^DaytimeServer::DaytimeServer(EventLoop* loop,$/;"	f	class:DaytimeServer
onConnection	examples/simple/daytime/daytime.cc	/^void DaytimeServer::onConnection(const TcpConnectionPtr& conn)$/;"	f	class:DaytimeServer
onMessage	examples/simple/daytime/daytime.cc	/^void DaytimeServer::onMessage(const TcpConnectionPtr& conn,$/;"	f	class:DaytimeServer
start	examples/simple/daytime/daytime.cc	/^void DaytimeServer::start()$/;"	f	class:DaytimeServer
DaytimeServer	examples/simple/daytime/daytime.h	/^class DaytimeServer$/;"	c
MUDUO_EXAMPLES_SIMPLE_DAYTIME_DAYTIME_H	examples/simple/daytime/daytime.h	2;"	d
server_	examples/simple/daytime/daytime.h	/^  muduo::net::TcpServer server_;$/;"	m	class:DaytimeServer
main	examples/simple/daytime/main.cc	/^int main()$/;"	f
DiscardServer	examples/simple/discard/discard.cc	/^DiscardServer::DiscardServer(EventLoop* loop,$/;"	f	class:DiscardServer
onConnection	examples/simple/discard/discard.cc	/^void DiscardServer::onConnection(const TcpConnectionPtr& conn)$/;"	f	class:DiscardServer
onMessage	examples/simple/discard/discard.cc	/^void DiscardServer::onMessage(const TcpConnectionPtr& conn,$/;"	f	class:DiscardServer
start	examples/simple/discard/discard.cc	/^void DiscardServer::start()$/;"	f	class:DiscardServer
DiscardServer	examples/simple/discard/discard.h	/^class DiscardServer$/;"	c
MUDUO_EXAMPLES_SIMPLE_DISCARD_DISCARD_H	examples/simple/discard/discard.h	2;"	d
server_	examples/simple/discard/discard.h	/^  muduo::net::TcpServer server_;$/;"	m	class:DiscardServer
main	examples/simple/discard/main.cc	/^int main()$/;"	f
EchoServer	examples/simple/echo/echo.cc	/^EchoServer::EchoServer(muduo::net::EventLoop* loop,$/;"	f	class:EchoServer
onConnection	examples/simple/echo/echo.cc	/^void EchoServer::onConnection(const muduo::net::TcpConnectionPtr& conn)$/;"	f	class:EchoServer
onMessage	examples/simple/echo/echo.cc	/^void EchoServer::onMessage(const muduo::net::TcpConnectionPtr& conn,$/;"	f	class:EchoServer
start	examples/simple/echo/echo.cc	/^void EchoServer::start()$/;"	f	class:EchoServer
EchoServer	examples/simple/echo/echo.h	/^class EchoServer$/;"	c
MUDUO_EXAMPLES_SIMPLE_ECHO_ECHO_H	examples/simple/echo/echo.h	2;"	d
server_	examples/simple/echo/echo.h	/^  muduo::net::TcpServer server_;$/;"	m	class:EchoServer
main	examples/simple/echo/main.cc	/^int main()$/;"	f
main	examples/simple/time/main.cc	/^int main()$/;"	f
main	examples/simple/time/test.cpp	/^int main()$/;"	f
TimeServer	examples/simple/time/time.cc	/^TimeServer::TimeServer(muduo::net::EventLoop* loop,$/;"	f	class:TimeServer
onConnection	examples/simple/time/time.cc	/^void TimeServer::onConnection(const muduo::net::TcpConnectionPtr& conn)$/;"	f	class:TimeServer
onMessage	examples/simple/time/time.cc	/^void TimeServer::onMessage(const muduo::net::TcpConnectionPtr& conn,$/;"	f	class:TimeServer
start	examples/simple/time/time.cc	/^void TimeServer::start()$/;"	f	class:TimeServer
MUDUO_EXAMPLES_SIMPLE_TIME_TIME_H	examples/simple/time/time.h	2;"	d
TimeServer	examples/simple/time/time.h	/^class TimeServer$/;"	c
server_	examples/simple/time/time.h	/^  muduo::net::TcpServer server_;$/;"	m	class:TimeServer
TimeClient	examples/simple/timeclient/timeclient.cc	/^  TimeClient(EventLoop* loop, const InetAddress& serverAddr)$/;"	f	class:TimeClient
TimeClient	examples/simple/timeclient/timeclient.cc	/^class TimeClient : boost::noncopyable$/;"	c	file:
client_	examples/simple/timeclient/timeclient.cc	/^  TcpClient client_;$/;"	m	class:TimeClient	file:
connect	examples/simple/timeclient/timeclient.cc	/^  void connect()$/;"	f	class:TimeClient
loop_	examples/simple/timeclient/timeclient.cc	/^  EventLoop* loop_;$/;"	m	class:TimeClient	file:
main	examples/simple/timeclient/timeclient.cc	/^int main(int argc, char* argv[])$/;"	f
onConnection	examples/simple/timeclient/timeclient.cc	/^  void onConnection(const TcpConnectionPtr& conn)$/;"	f	class:TimeClient	file:
onMessage	examples/simple/timeclient/timeclient.cc	/^  void onMessage(const TcpConnectionPtr& conn, Buffer* buf, Timestamp receiveTime)$/;"	f	class:TimeClient	file:
g_current	examples/socks4a/balancer.cc	/^size_t g_current = 0;$/;"	v
g_mutex	examples/socks4a/balancer.cc	/^MutexLock g_mutex;$/;"	v
main	examples/socks4a/balancer.cc	/^int main(int argc, char* argv[])$/;"	f
onServerConnection	examples/socks4a/balancer.cc	/^void onServerConnection(const TcpConnectionPtr& conn)$/;"	f
onServerMessage	examples/socks4a/balancer.cc	/^void onServerMessage(const TcpConnectionPtr& conn, Buffer* buf, Timestamp)$/;"	f
t_tunnels	examples/socks4a/balancer.cc	/^ThreadLocal<std::map<string, TunnelPtr> > t_tunnels;$/;"	v
g_tunnels	examples/socks4a/socks4a.cc	/^std::map<string, TunnelPtr> g_tunnels;$/;"	v
main	examples/socks4a/socks4a.cc	/^int main(int argc, char* argv[])$/;"	f
onServerConnection	examples/socks4a/socks4a.cc	/^void onServerConnection(const TcpConnectionPtr& conn)$/;"	f
onServerMessage	examples/socks4a/socks4a.cc	/^void onServerMessage(const TcpConnectionPtr& conn, Buffer* buf, Timestamp)$/;"	f
g_serverAddr	examples/socks4a/tcprelay.cc	/^InetAddress* g_serverAddr;$/;"	v
g_tunnels	examples/socks4a/tcprelay.cc	/^std::map<string, TunnelPtr> g_tunnels;$/;"	v
main	examples/socks4a/tcprelay.cc	/^int main(int argc, char* argv[])$/;"	f
memstat	examples/socks4a/tcprelay.cc	/^void memstat()$/;"	f
onServerConnection	examples/socks4a/tcprelay.cc	/^void onServerConnection(const TcpConnectionPtr& conn)$/;"	f
onServerMessage	examples/socks4a/tcprelay.cc	/^void onServerMessage(const TcpConnectionPtr& conn, Buffer* buf, Timestamp)$/;"	f
MUDUO_EXAMPLES_SOCKS4A_TUNNEL_H	examples/socks4a/tunnel.h	2;"	d
ServerClient	examples/socks4a/tunnel.h	/^  enum ServerClient$/;"	g	class:Tunnel
Tunnel	examples/socks4a/tunnel.h	/^  Tunnel(muduo::net::EventLoop* loop,$/;"	f	class:Tunnel
Tunnel	examples/socks4a/tunnel.h	/^class Tunnel : public boost::enable_shared_from_this<Tunnel>,$/;"	c
TunnelPtr	examples/socks4a/tunnel.h	/^typedef boost::shared_ptr<Tunnel> TunnelPtr;$/;"	t
clientConn_	examples/socks4a/tunnel.h	/^  muduo::net::TcpConnectionPtr clientConn_;$/;"	m	class:Tunnel
client_	examples/socks4a/tunnel.h	/^  muduo::net::TcpClient client_;$/;"	m	class:Tunnel
connect	examples/socks4a/tunnel.h	/^  void connect()$/;"	f	class:Tunnel
disconnect	examples/socks4a/tunnel.h	/^  void disconnect()$/;"	f	class:Tunnel
kClient	examples/socks4a/tunnel.h	/^    kServer, kClient$/;"	e	enum:Tunnel::ServerClient
kServer	examples/socks4a/tunnel.h	/^    kServer, kClient$/;"	e	enum:Tunnel::ServerClient
onClientConnection	examples/socks4a/tunnel.h	/^  void onClientConnection(const muduo::net::TcpConnectionPtr& conn)$/;"	f	class:Tunnel
onClientMessage	examples/socks4a/tunnel.h	/^  void onClientMessage(const muduo::net::TcpConnectionPtr& conn,$/;"	f	class:Tunnel
onHighWaterMark	examples/socks4a/tunnel.h	/^  void onHighWaterMark(ServerClient which,$/;"	f	class:Tunnel
onHighWaterMarkWeak	examples/socks4a/tunnel.h	/^  static void onHighWaterMarkWeak(const boost::weak_ptr<Tunnel>& wkTunnel,$/;"	f	class:Tunnel
onWriteComplete	examples/socks4a/tunnel.h	/^  void onWriteComplete(ServerClient which, const muduo::net::TcpConnectionPtr& conn)$/;"	f	class:Tunnel
onWriteCompleteWeak	examples/socks4a/tunnel.h	/^  static void onWriteCompleteWeak(const boost::weak_ptr<Tunnel>& wkTunnel,$/;"	f	class:Tunnel
serverConn_	examples/socks4a/tunnel.h	/^  muduo::net::TcpConnectionPtr serverConn_;$/;"	m	class:Tunnel
setup	examples/socks4a/tunnel.h	/^  void setup()$/;"	f	class:Tunnel
teardown	examples/socks4a/tunnel.h	/^  void teardown()$/;"	f	class:Tunnel
~Tunnel	examples/socks4a/tunnel.h	/^  ~Tunnel()$/;"	f	class:Tunnel
DoneCallback	examples/sudoku/batch.cc	/^typedef boost::function<void(const string&, double, int)> DoneCallback;$/;"	t	file:
Input	examples/sudoku/batch.cc	/^typedef std::vector<string> Input;$/;"	t	file:
InputPtr	examples/sudoku/batch.cc	/^typedef boost::shared_ptr<Input> InputPtr;$/;"	t	file:
SudokuClient	examples/sudoku/batch.cc	/^  SudokuClient(EventLoop* loop,$/;"	f	class:SudokuClient
SudokuClient	examples/sudoku/batch.cc	/^class SudokuClient : boost::noncopyable$/;"	c	file:
cb_	examples/sudoku/batch.cc	/^  DoneCallback cb_;$/;"	m	class:SudokuClient	file:
client_	examples/sudoku/batch.cc	/^  TcpClient client_;$/;"	m	class:SudokuClient	file:
connect	examples/sudoku/batch.cc	/^  void connect()$/;"	f	class:SudokuClient
count_	examples/sudoku/batch.cc	/^  int count_;$/;"	m	class:SudokuClient	file:
done	examples/sudoku/batch.cc	/^void done(const string& name, double elapsed, int count)$/;"	f
g_connections	examples/sudoku/batch.cc	/^int g_connections;$/;"	v
g_finished	examples/sudoku/batch.cc	/^int g_finished;$/;"	v
g_loop	examples/sudoku/batch.cc	/^EventLoop* g_loop;$/;"	v
g_start	examples/sudoku/batch.cc	/^Timestamp g_start;$/;"	v
input_	examples/sudoku/batch.cc	/^  InputPtr input_;$/;"	m	class:SudokuClient	file:
main	examples/sudoku/batch.cc	/^int main(int argc, char* argv[])$/;"	f
name_	examples/sudoku/batch.cc	/^  string name_;$/;"	m	class:SudokuClient	file:
onConnection	examples/sudoku/batch.cc	/^  void onConnection(const TcpConnectionPtr& conn)$/;"	f	class:SudokuClient	file:
onMessage	examples/sudoku/batch.cc	/^  void onMessage(const TcpConnectionPtr& conn, Buffer* buf, Timestamp)$/;"	f	class:SudokuClient	file:
readInput	examples/sudoku/batch.cc	/^InputPtr readInput(std::istream& in)$/;"	f
runClient	examples/sudoku/batch.cc	/^void runClient(std::istream& in, const InetAddress& serverAddr, int conn)$/;"	f
runLocal	examples/sudoku/batch.cc	/^void runLocal(std::istream& in)$/;"	f
start_	examples/sudoku/batch.cc	/^  Timestamp start_;$/;"	m	class:SudokuClient	file:
verify	examples/sudoku/batch.cc	/^bool verify(const string& result)$/;"	f
Input	examples/sudoku/loadtest.cc	/^typedef std::vector<string> Input;$/;"	t	file:
InputPtr	examples/sudoku/loadtest.cc	/^typedef boost::shared_ptr<const Input> InputPtr;$/;"	t	file:
SudokuClient	examples/sudoku/loadtest.cc	/^  SudokuClient(EventLoop* loop,$/;"	f	class:SudokuClient
SudokuClient	examples/sudoku/loadtest.cc	/^class SudokuClient : boost::noncopyable$/;"	c	file:
SudokuLoadtest	examples/sudoku/loadtest.cc	/^  SudokuLoadtest()$/;"	f	class:SudokuLoadtest
SudokuLoadtest	examples/sudoku/loadtest.cc	/^class SudokuLoadtest : boost::noncopyable$/;"	c	file:
client_	examples/sudoku/loadtest.cc	/^  TcpClient client_;$/;"	m	class:SudokuClient	file:
clients_	examples/sudoku/loadtest.cc	/^  boost::ptr_vector<SudokuClient> clients_;$/;"	m	class:SudokuLoadtest	file:
conn_	examples/sudoku/loadtest.cc	/^  TcpConnectionPtr conn_;$/;"	m	class:SudokuClient	file:
connect	examples/sudoku/loadtest.cc	/^  void connect()$/;"	f	class:SudokuClient
count_	examples/sudoku/loadtest.cc	/^  int count_;$/;"	m	class:SudokuClient	file:
count_	examples/sudoku/loadtest.cc	/^  int count_;$/;"	m	class:SudokuLoadtest	file:
input_	examples/sudoku/loadtest.cc	/^  const InputPtr input_;$/;"	m	class:SudokuClient	file:
kHz	examples/sudoku/loadtest.cc	/^  static const int kHz = 100;$/;"	m	class:SudokuLoadtest	file:
latencies_	examples/sudoku/loadtest.cc	/^  std::vector<int> latencies_;$/;"	m	class:SudokuClient	file:
main	examples/sudoku/loadtest.cc	/^int main(int argc, char* argv[])$/;"	f
name_	examples/sudoku/loadtest.cc	/^  const string name_;$/;"	m	class:SudokuClient	file:
onConnection	examples/sudoku/loadtest.cc	/^  void onConnection(const TcpConnectionPtr& conn)$/;"	f	class:SudokuClient	file:
onMessage	examples/sudoku/loadtest.cc	/^  void onMessage(const TcpConnectionPtr& conn, Buffer* buf, Timestamp recvTime)$/;"	f	class:SudokuClient	file:
readInput	examples/sudoku/loadtest.cc	/^InputPtr readInput(std::istream& in)$/;"	f
report	examples/sudoku/loadtest.cc	/^  void report(std::vector<int>* latency, int* infly)$/;"	f	class:SudokuClient
requests_	examples/sudoku/loadtest.cc	/^  Buffer requests_;$/;"	m	class:SudokuClient	file:
runClient	examples/sudoku/loadtest.cc	/^  void runClient(const InputPtr& input, const InetAddress& serverAddr, int rps, int conn, bool nodelay)$/;"	f	class:SudokuLoadtest
send	examples/sudoku/loadtest.cc	/^  void send(int n)$/;"	f	class:SudokuClient
sendTime_	examples/sudoku/loadtest.cc	/^  boost::unordered_map<int, Timestamp> sendTime_;$/;"	m	class:SudokuClient	file:
sofar_	examples/sudoku/loadtest.cc	/^  int64_t sofar_;$/;"	m	class:SudokuLoadtest	file:
tcpNoDelay_	examples/sudoku/loadtest.cc	/^  const bool tcpNoDelay_;$/;"	m	class:SudokuClient	file:
tick	examples/sudoku/loadtest.cc	/^  void tick(int rps)$/;"	f	class:SudokuLoadtest	file:
ticks_	examples/sudoku/loadtest.cc	/^  int64_t ticks_;$/;"	m	class:SudokuLoadtest	file:
tock	examples/sudoku/loadtest.cc	/^  void tock()$/;"	f	class:SudokuLoadtest	file:
verify	examples/sudoku/loadtest.cc	/^  bool verify(const string& response, Timestamp recvTime)$/;"	f	class:SudokuClient	file:
Percentile	examples/sudoku/percentile.h	/^  Percentile(std::vector<int>& latencies, int infly)$/;"	f	class:Percentile
Percentile	examples/sudoku/percentile.h	/^class Percentile$/;"	c
getPercentile	examples/sudoku/percentile.h	/^  static int getPercentile(const std::vector<int>& latencies, int percent)$/;"	f	class:Percentile
report	examples/sudoku/percentile.h	/^  const muduo::LogStream::Buffer& report() const$/;"	f	class:Percentile
save	examples/sudoku/percentile.h	/^  void save(const std::vector<int>& latencies, muduo::StringArg name) const$/;"	f	class:Percentile
stat	examples/sudoku/percentile.h	/^  muduo::LogStream stat;$/;"	m	class:Percentile
Input	examples/sudoku/pipeline.cc	/^typedef std::vector<string> Input;$/;"	t	file:
InputPtr	examples/sudoku/pipeline.cc	/^typedef boost::shared_ptr<const Input> InputPtr;$/;"	t	file:
SudokuClient	examples/sudoku/pipeline.cc	/^  SudokuClient(EventLoop* loop,$/;"	f	class:SudokuClient
SudokuClient	examples/sudoku/pipeline.cc	/^class SudokuClient : boost::noncopyable$/;"	c	file:
client_	examples/sudoku/pipeline.cc	/^  TcpClient client_;$/;"	m	class:SudokuClient	file:
conn_	examples/sudoku/pipeline.cc	/^  TcpConnectionPtr conn_;$/;"	m	class:SudokuClient	file:
connect	examples/sudoku/pipeline.cc	/^  void connect()$/;"	f	class:SudokuClient
count_	examples/sudoku/pipeline.cc	/^  int count_;$/;"	m	class:SudokuClient	file:
input_	examples/sudoku/pipeline.cc	/^  const InputPtr input_;$/;"	m	class:SudokuClient	file:
latencies_	examples/sudoku/pipeline.cc	/^  std::vector<int> latencies_;$/;"	m	class:SudokuClient	file:
main	examples/sudoku/pipeline.cc	/^int main(int argc, char* argv[])$/;"	f
name_	examples/sudoku/pipeline.cc	/^  const string name_;$/;"	m	class:SudokuClient	file:
onConnection	examples/sudoku/pipeline.cc	/^  void onConnection(const TcpConnectionPtr& conn)$/;"	f	class:SudokuClient	file:
onMessage	examples/sudoku/pipeline.cc	/^  void onMessage(const TcpConnectionPtr& conn, Buffer* buf, Timestamp recvTime)$/;"	f	class:SudokuClient	file:
pipelines_	examples/sudoku/pipeline.cc	/^  const int pipelines_;$/;"	m	class:SudokuClient	file:
readInput	examples/sudoku/pipeline.cc	/^InputPtr readInput(std::istream& in)$/;"	f
report	examples/sudoku/pipeline.cc	/^  void report(std::vector<int>* latency, int* infly)$/;"	f	class:SudokuClient
report	examples/sudoku/pipeline.cc	/^void report(boost::ptr_vector<SudokuClient>* clients)$/;"	f
runClient	examples/sudoku/pipeline.cc	/^void runClient(const InputPtr& input,$/;"	f
send	examples/sudoku/pipeline.cc	/^  void send(int n)$/;"	f	class:SudokuClient	file:
sendTime_	examples/sudoku/pipeline.cc	/^  boost::unordered_map<int, Timestamp> sendTime_;$/;"	m	class:SudokuClient	file:
tcpNoDelay_	examples/sudoku/pipeline.cc	/^  const bool tcpNoDelay_;$/;"	m	class:SudokuClient	file:
verify	examples/sudoku/pipeline.cc	/^  bool verify(const string& response, Timestamp recvTime)$/;"	f	class:SudokuClient	file:
SudokuServer	examples/sudoku/server_basic.cc	/^  SudokuServer(EventLoop* loop, const InetAddress& listenAddr)$/;"	f	class:SudokuServer
SudokuServer	examples/sudoku/server_basic.cc	/^class SudokuServer$/;"	c	file:
main	examples/sudoku/server_basic.cc	/^int main(int argc, char* argv[])$/;"	f
onConnection	examples/sudoku/server_basic.cc	/^  void onConnection(const TcpConnectionPtr& conn)$/;"	f	class:SudokuServer	file:
onMessage	examples/sudoku/server_basic.cc	/^  void onMessage(const TcpConnectionPtr& conn, Buffer* buf, Timestamp)$/;"	f	class:SudokuServer	file:
processRequest	examples/sudoku/server_basic.cc	/^  bool processRequest(const TcpConnectionPtr& conn, const string& request)$/;"	f	class:SudokuServer	file:
server_	examples/sudoku/server_basic.cc	/^  TcpServer server_;$/;"	m	class:SudokuServer	file:
start	examples/sudoku/server_basic.cc	/^  void start()$/;"	f	class:SudokuServer
startTime_	examples/sudoku/server_basic.cc	/^  Timestamp startTime_;$/;"	m	class:SudokuServer	file:
Request	examples/sudoku/server_hybrid.cc	/^  struct Request$/;"	s	class:SudokuServer	file:
SudokuServer	examples/sudoku/server_hybrid.cc	/^  SudokuServer(EventLoop* loop,$/;"	f	class:SudokuServer
SudokuServer	examples/sudoku/server_hybrid.cc	/^class SudokuServer : boost::noncopyable$/;"	c	file:
id	examples/sudoku/server_hybrid.cc	/^    string id;$/;"	m	struct:SudokuServer::Request	file:
inspectThread_	examples/sudoku/server_hybrid.cc	/^  EventLoopThread inspectThread_;$/;"	m	class:SudokuServer	file:
inspector_	examples/sudoku/server_hybrid.cc	/^  Inspector inspector_;$/;"	m	class:SudokuServer	file:
main	examples/sudoku/server_hybrid.cc	/^int main(int argc, char* argv[])$/;"	f
numThreads_	examples/sudoku/server_hybrid.cc	/^  const int numThreads_;$/;"	m	class:SudokuServer	file:
onConnection	examples/sudoku/server_hybrid.cc	/^  void onConnection(const TcpConnectionPtr& conn)$/;"	f	class:SudokuServer	file:
onMessage	examples/sudoku/server_hybrid.cc	/^  void onMessage(const TcpConnectionPtr& conn, Buffer* buf, Timestamp receiveTime)$/;"	f	class:SudokuServer	file:
processRequest	examples/sudoku/server_hybrid.cc	/^  bool processRequest(const TcpConnectionPtr& conn, const string& request, Timestamp receiveTime)$/;"	f	class:SudokuServer	file:
puzzle	examples/sudoku/server_hybrid.cc	/^    string puzzle;$/;"	m	struct:SudokuServer::Request	file:
receiveTime	examples/sudoku/server_hybrid.cc	/^    Timestamp receiveTime;$/;"	m	struct:SudokuServer::Request	file:
server_	examples/sudoku/server_hybrid.cc	/^  TcpServer server_;$/;"	m	class:SudokuServer	file:
solve	examples/sudoku/server_hybrid.cc	/^  void solve(const TcpConnectionPtr& conn, const Request& req)$/;"	f	class:SudokuServer	file:
start	examples/sudoku/server_hybrid.cc	/^  void start()$/;"	f	class:SudokuServer
startTime_	examples/sudoku/server_hybrid.cc	/^  const Timestamp startTime_;$/;"	m	class:SudokuServer	file:
stat_	examples/sudoku/server_hybrid.cc	/^  SudokuStat stat_;$/;"	m	class:SudokuServer	file:
tcpNoDelay_	examples/sudoku/server_hybrid.cc	/^  const bool tcpNoDelay_;$/;"	m	class:SudokuServer	file:
threadPool_	examples/sudoku/server_hybrid.cc	/^  ThreadPool threadPool_;$/;"	m	class:SudokuServer	file:
SudokuServer	examples/sudoku/server_multiloop.cc	/^  SudokuServer(EventLoop* loop, const InetAddress& listenAddr, int numThreads)$/;"	f	class:SudokuServer
SudokuServer	examples/sudoku/server_multiloop.cc	/^class SudokuServer$/;"	c	file:
main	examples/sudoku/server_multiloop.cc	/^int main(int argc, char* argv[])$/;"	f
numThreads_	examples/sudoku/server_multiloop.cc	/^  int numThreads_;$/;"	m	class:SudokuServer	file:
onConnection	examples/sudoku/server_multiloop.cc	/^  void onConnection(const TcpConnectionPtr& conn)$/;"	f	class:SudokuServer	file:
onMessage	examples/sudoku/server_multiloop.cc	/^  void onMessage(const TcpConnectionPtr& conn, Buffer* buf, Timestamp)$/;"	f	class:SudokuServer	file:
processRequest	examples/sudoku/server_multiloop.cc	/^  bool processRequest(const TcpConnectionPtr& conn, const string& request)$/;"	f	class:SudokuServer	file:
server_	examples/sudoku/server_multiloop.cc	/^  TcpServer server_;$/;"	m	class:SudokuServer	file:
start	examples/sudoku/server_multiloop.cc	/^  void start()$/;"	f	class:SudokuServer
startTime_	examples/sudoku/server_multiloop.cc	/^  Timestamp startTime_;$/;"	m	class:SudokuServer	file:
Request	examples/sudoku/server_prod.cc	/^  struct Request$/;"	s	class:SudokuServer	file:
SudokuServer	examples/sudoku/server_prod.cc	/^  SudokuServer(EventLoop* loop,$/;"	f	class:SudokuServer
SudokuServer	examples/sudoku/server_prod.cc	/^class SudokuServer : boost::noncopyable$/;"	c	file:
highWaterMark	examples/sudoku/server_prod.cc	/^  void highWaterMark(const TcpConnectionPtr& conn, size_t tosend)$/;"	f	class:SudokuServer	file:
id	examples/sudoku/server_prod.cc	/^    string id;$/;"	m	struct:SudokuServer::Request	file:
inspectThread_	examples/sudoku/server_prod.cc	/^  EventLoopThread inspectThread_;$/;"	m	class:SudokuServer	file:
inspector_	examples/sudoku/server_prod.cc	/^  Inspector inspector_;$/;"	m	class:SudokuServer	file:
main	examples/sudoku/server_prod.cc	/^int main(int argc, char* argv[])$/;"	f
numThreads_	examples/sudoku/server_prod.cc	/^  const int numThreads_;$/;"	m	class:SudokuServer	file:
onConnection	examples/sudoku/server_prod.cc	/^  void onConnection(const TcpConnectionPtr& conn)$/;"	f	class:SudokuServer	file:
onMessage	examples/sudoku/server_prod.cc	/^  void onMessage(const TcpConnectionPtr& conn, Buffer* buf, Timestamp receiveTime)$/;"	f	class:SudokuServer	file:
processRequest	examples/sudoku/server_prod.cc	/^  bool processRequest(const TcpConnectionPtr& conn, const string& request, Timestamp receiveTime)$/;"	f	class:SudokuServer	file:
puzzle	examples/sudoku/server_prod.cc	/^    string puzzle;$/;"	m	struct:SudokuServer::Request	file:
receiveTime	examples/sudoku/server_prod.cc	/^    Timestamp receiveTime;$/;"	m	struct:SudokuServer::Request	file:
server_	examples/sudoku/server_prod.cc	/^  TcpServer server_;$/;"	m	class:SudokuServer	file:
solve	examples/sudoku/server_prod.cc	/^  void solve(const TcpConnectionPtr& conn, const Request& req)$/;"	f	class:SudokuServer	file:
start	examples/sudoku/server_prod.cc	/^  void start()$/;"	f	class:SudokuServer
startTime_	examples/sudoku/server_prod.cc	/^  const Timestamp startTime_;$/;"	m	class:SudokuServer	file:
stat_	examples/sudoku/server_prod.cc	/^  SudokuStat stat_;$/;"	m	class:SudokuServer	file:
tcpNoDelay_	examples/sudoku/server_prod.cc	/^  const bool tcpNoDelay_;$/;"	m	class:SudokuServer	file:
threadPool_	examples/sudoku/server_prod.cc	/^  ThreadPool threadPool_;$/;"	m	class:SudokuServer	file:
writeComplete	examples/sudoku/server_prod.cc	/^  void writeComplete(const TcpConnectionPtr& conn)$/;"	f	class:SudokuServer	file:
SudokuServer	examples/sudoku/server_threadpool.cc	/^  SudokuServer(EventLoop* loop, const InetAddress& listenAddr, int numThreads)$/;"	f	class:SudokuServer
SudokuServer	examples/sudoku/server_threadpool.cc	/^class SudokuServer$/;"	c	file:
main	examples/sudoku/server_threadpool.cc	/^int main(int argc, char* argv[])$/;"	f
numThreads_	examples/sudoku/server_threadpool.cc	/^  int numThreads_;$/;"	m	class:SudokuServer	file:
onConnection	examples/sudoku/server_threadpool.cc	/^  void onConnection(const TcpConnectionPtr& conn)$/;"	f	class:SudokuServer	file:
onMessage	examples/sudoku/server_threadpool.cc	/^  void onMessage(const TcpConnectionPtr& conn, Buffer* buf, Timestamp)$/;"	f	class:SudokuServer	file:
processRequest	examples/sudoku/server_threadpool.cc	/^  bool processRequest(const TcpConnectionPtr& conn, const string& request)$/;"	f	class:SudokuServer	file:
server_	examples/sudoku/server_threadpool.cc	/^  TcpServer server_;$/;"	m	class:SudokuServer	file:
solve	examples/sudoku/server_threadpool.cc	/^  static void solve(const TcpConnectionPtr& conn,$/;"	f	class:SudokuServer	file:
start	examples/sudoku/server_threadpool.cc	/^  void start()$/;"	f	class:SudokuServer
startTime_	examples/sudoku/server_threadpool.cc	/^  Timestamp startTime_;$/;"	m	class:SudokuServer	file:
threadPool_	examples/sudoku/server_threadpool.cc	/^  ThreadPool threadPool_;$/;"	m	class:SudokuServer	file:
SudokuStat	examples/sudoku/stat.h	/^  SudokuStat(const ThreadPool& pool)$/;"	f	class:SudokuStat
SudokuStat	examples/sudoku/stat.h	/^class SudokuStat : boost::noncopyable$/;"	c
badLatency_	examples/sudoku/stat.h	/^  int64_t totalRequests_, totalResponses_, totalSolved_, badRequests_, droppedRequests_, totalLatency_, badLatency_;$/;"	m	class:SudokuStat
badRequests_	examples/sudoku/stat.h	/^  int64_t totalRequests_, totalResponses_, totalSolved_, badRequests_, droppedRequests_, totalLatency_, badLatency_;$/;"	m	class:SudokuStat
droppedRequests_	examples/sudoku/stat.h	/^  int64_t totalRequests_, totalResponses_, totalSolved_, badRequests_, droppedRequests_, totalLatency_, badLatency_;$/;"	m	class:SudokuStat
kSeconds	examples/sudoku/stat.h	/^  static const int kSeconds = 60;$/;"	m	class:SudokuStat
lastSecond_	examples/sudoku/stat.h	/^  time_t lastSecond_;$/;"	m	class:SudokuStat
latencies_	examples/sudoku/stat.h	/^  boost::circular_buffer<int64_t> latencies_;$/;"	m	class:SudokuStat
mutex_	examples/sudoku/stat.h	/^  mutable MutexLock mutex_;$/;"	m	class:SudokuStat
pool_	examples/sudoku/stat.h	/^  const ThreadPool& pool_;  \/\/ only for ThreadPool::queueSize()$/;"	m	class:SudokuStat
recordBadRequest	examples/sudoku/stat.h	/^  void recordBadRequest()$/;"	f	class:SudokuStat
recordDroppedRequest	examples/sudoku/stat.h	/^  void recordDroppedRequest()$/;"	f	class:SudokuStat
recordRequest	examples/sudoku/stat.h	/^  void recordRequest()$/;"	f	class:SudokuStat
recordResponse	examples/sudoku/stat.h	/^  void recordResponse(Timestamp now, Timestamp receive, bool solved)$/;"	f	class:SudokuStat
report	examples/sudoku/stat.h	/^  string report() const$/;"	f	class:SudokuStat
requests_	examples/sudoku/stat.h	/^  boost::circular_buffer<int64_t> requests_;$/;"	m	class:SudokuStat
reset	examples/sudoku/stat.h	/^  string reset()$/;"	f	class:SudokuStat
totalLatency_	examples/sudoku/stat.h	/^  int64_t totalRequests_, totalResponses_, totalSolved_, badRequests_, droppedRequests_, totalLatency_, badLatency_;$/;"	m	class:SudokuStat
totalRequests_	examples/sudoku/stat.h	/^  int64_t totalRequests_, totalResponses_, totalSolved_, badRequests_, droppedRequests_, totalLatency_, badLatency_;$/;"	m	class:SudokuStat
totalResponses_	examples/sudoku/stat.h	/^  int64_t totalRequests_, totalResponses_, totalSolved_, badRequests_, droppedRequests_, totalLatency_, badLatency_;$/;"	m	class:SudokuStat
totalSolved_	examples/sudoku/stat.h	/^  int64_t totalRequests_, totalResponses_, totalSolved_, badRequests_, droppedRequests_, totalLatency_, badLatency_;$/;"	m	class:SudokuStat
BOOST_AUTO_TEST_CASE	examples/sudoku/stat_unittest.cc	/^BOOST_AUTO_TEST_CASE(testSudokuStatFuzz)$/;"	f
BOOST_AUTO_TEST_CASE	examples/sudoku/stat_unittest.cc	/^BOOST_AUTO_TEST_CASE(testSudokuStatJumpAhead5)$/;"	f
BOOST_AUTO_TEST_CASE	examples/sudoku/stat_unittest.cc	/^BOOST_AUTO_TEST_CASE(testSudokuStatJumpAhead59)$/;"	f
BOOST_AUTO_TEST_CASE	examples/sudoku/stat_unittest.cc	/^BOOST_AUTO_TEST_CASE(testSudokuStatJumpAhead60)$/;"	f
BOOST_AUTO_TEST_CASE	examples/sudoku/stat_unittest.cc	/^BOOST_AUTO_TEST_CASE(testSudokuStatJumpBack3)$/;"	f
BOOST_AUTO_TEST_CASE	examples/sudoku/stat_unittest.cc	/^BOOST_AUTO_TEST_CASE(testSudokuStatNextSecond)$/;"	f
BOOST_AUTO_TEST_CASE	examples/sudoku/stat_unittest.cc	/^BOOST_AUTO_TEST_CASE(testSudokuStatSameSecond)$/;"	f
BOOST_TEST_DYN_LINK	examples/sudoku/stat_unittest.cc	8;"	d	file:
BOOST_TEST_MAIN	examples/sudoku/stat_unittest.cc	7;"	d	file:
Column	examples/sudoku/sudoku.cc	/^typedef Node Column;$/;"	t	file:
Node	examples/sudoku/sudoku.cc	/^struct Node$/;"	s	file:
SudokuSolver	examples/sudoku/sudoku.cc	/^    SudokuSolver(int board[kCells])$/;"	f	class:SudokuSolver
SudokuSolver	examples/sudoku/sudoku.cc	/^class SudokuSolver$/;"	c	file:
append_column	examples/sudoku/sudoku.cc	/^    void append_column(int n)$/;"	f	class:SudokuSolver	file:
col	examples/sudoku/sudoku.cc	/^    Column* col;$/;"	m	struct:Node	file:
columns_	examples/sudoku/sudoku.cc	/^    Column* columns_[400];$/;"	m	class:SudokuSolver	file:
cover	examples/sudoku/sudoku.cc	/^    void cover(Column* c)$/;"	f	class:SudokuSolver	file:
cur_node_	examples/sudoku/sudoku.cc	/^    int     cur_node_;$/;"	m	class:SudokuSolver	file:
down	examples/sudoku/sudoku.cc	/^    Node* down;$/;"	m	struct:Node	file:
get_box_col	examples/sudoku/sudoku.cc	/^    int get_box_col(int box, int val)$/;"	f	class:SudokuSolver	file:
get_col_col	examples/sudoku/sudoku.cc	/^    int get_col_col(int col, int val)$/;"	f	class:SudokuSolver	file:
get_min_column	examples/sudoku/sudoku.cc	/^    Column* get_min_column()$/;"	f	class:SudokuSolver	file:
get_row_col	examples/sudoku/sudoku.cc	/^    int get_row_col(int row, int val)$/;"	f	class:SudokuSolver	file:
inout_	examples/sudoku/sudoku.cc	/^    int*    inout_;$/;"	m	class:SudokuSolver	file:
kBox	examples/sudoku/sudoku.cc	/^const int kRow = 100, kCol = 200, kBox = 300;$/;"	v
kCol	examples/sudoku/sudoku.cc	/^const int kRow = 100, kCol = 200, kBox = 300;$/;"	v
kMaxNodes	examples/sudoku/sudoku.cc	/^const int kMaxNodes = 1 + 81*4 + 9*9*9*4;$/;"	v
kNoSolution	examples/sudoku/sudoku.cc	/^extern const char kNoSolution[] = "NoSolution";$/;"	v
kRow	examples/sudoku/sudoku.cc	/^const int kRow = 100, kCol = 200, kBox = 300;$/;"	v
left	examples/sudoku/sudoku.cc	/^    Node* left;$/;"	m	struct:Node	file:
name	examples/sudoku/sudoku.cc	/^    int name;$/;"	m	struct:Node	file:
new_column	examples/sudoku/sudoku.cc	/^    Column* new_column(int n = 0)$/;"	f	class:SudokuSolver	file:
new_row	examples/sudoku/sudoku.cc	/^    Node* new_row(int col)$/;"	f	class:SudokuSolver	file:
nodes_	examples/sudoku/sudoku.cc	/^    Node    nodes_[kMaxNodes];$/;"	m	class:SudokuSolver	file:
put_left	examples/sudoku/sudoku.cc	/^    void put_left(Column* old, Column* nnew)$/;"	f	class:SudokuSolver	file:
put_up	examples/sudoku/sudoku.cc	/^    void put_up(Column* old, Node* nnew)$/;"	f	class:SudokuSolver	file:
right	examples/sudoku/sudoku.cc	/^    Node* right;$/;"	m	struct:Node	file:
root_	examples/sudoku/sudoku.cc	/^    Column* root_;$/;"	m	class:SudokuSolver	file:
size	examples/sudoku/sudoku.cc	/^    int size;$/;"	m	struct:Node	file:
solve	examples/sudoku/sudoku.cc	/^    bool solve()$/;"	f	class:SudokuSolver
solveSudoku	examples/sudoku/sudoku.cc	/^string solveSudoku(const StringPiece& puzzle)$/;"	f
stack_	examples/sudoku/sudoku.cc	/^    std::vector<Node*> stack_;$/;"	m	class:SudokuSolver	file:
uncover	examples/sudoku/sudoku.cc	/^    void uncover(Column* c)$/;"	f	class:SudokuSolver	file:
up	examples/sudoku/sudoku.cc	/^    Node* up;$/;"	m	struct:Node	file:
MUDUO_EXAMPLES_SUDOKU_SUDOKU_H	examples/sudoku/sudoku.h	2;"	d
kCells	examples/sudoku/sudoku.h	/^const int kCells = 81;$/;"	v
main	examples/twisted/finger/finger01.cc	/^int main()$/;"	f
main	examples/twisted/finger/finger02.cc	/^int main()$/;"	f
main	examples/twisted/finger/finger03.cc	/^int main()$/;"	f
onConnection	examples/twisted/finger/finger03.cc	/^void onConnection(const TcpConnectionPtr& conn)$/;"	f
main	examples/twisted/finger/finger04.cc	/^int main()$/;"	f
onMessage	examples/twisted/finger/finger04.cc	/^void onMessage(const TcpConnectionPtr& conn,$/;"	f
main	examples/twisted/finger/finger05.cc	/^int main()$/;"	f
onMessage	examples/twisted/finger/finger05.cc	/^void onMessage(const TcpConnectionPtr& conn,$/;"	f
UserMap	examples/twisted/finger/finger06.cc	/^typedef std::map<string, string> UserMap;$/;"	t	file:
getUser	examples/twisted/finger/finger06.cc	/^string getUser(const string& user)$/;"	f
main	examples/twisted/finger/finger06.cc	/^int main()$/;"	f
onMessage	examples/twisted/finger/finger06.cc	/^void onMessage(const TcpConnectionPtr& conn,$/;"	f
users	examples/twisted/finger/finger06.cc	/^UserMap users;$/;"	v
UserMap	examples/twisted/finger/finger07.cc	/^typedef std::map<string, string> UserMap;$/;"	t	file:
getUser	examples/twisted/finger/finger07.cc	/^string getUser(const string& user)$/;"	f
main	examples/twisted/finger/finger07.cc	/^int main()$/;"	f
onMessage	examples/twisted/finger/finger07.cc	/^void onMessage(const TcpConnectionPtr& conn,$/;"	f
users	examples/twisted/finger/finger07.cc	/^UserMap users;$/;"	v
alphabet	examples/wordcount/gen.py	/^alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_-'$/;"	v
arr	examples/wordcount/gen.py	/^	arr = [random.choice(alphabet) for i in range(word_len)]$/;"	v
output	examples/wordcount/gen.py	/^output = open('random_words', 'w')$/;"	v
word	examples/wordcount/gen.py	/^	word = ''.join(arr)$/;"	v
word_len	examples/wordcount/gen.py	/^word_len = 5$/;"	v
words	examples/wordcount/gen.py	/^words = 1000000$/;"	v
MUDUO_EXAMPLES_WORDCOUNT_HASH_H	examples/wordcount/hash.h	2;"	d
WordCountMap	examples/wordcount/hash.h	/^typedef boost::unordered_map<muduo::string, int64_t> WordCountMap;$/;"	t
boost	examples/wordcount/hash.h	/^namespace boost$/;"	n
hash_value	examples/wordcount/hash.h	/^inline std::size_t hash_value(const muduo::string& x)$/;"	f	namespace:boost
SendThrottler	examples/wordcount/hasher.cc	/^  SendThrottler(EventLoop* loop, const InetAddress& addr)$/;"	f	class:SendThrottler
SendThrottler	examples/wordcount/hasher.cc	/^class SendThrottler : boost::noncopyable$/;"	c	file:
WordCountSender	examples/wordcount/hasher.cc	/^WordCountSender::WordCountSender(const std::string& receivers)$/;"	f	class:WordCountSender
WordCountSender	examples/wordcount/hasher.cc	/^class WordCountSender : boost::noncopyable$/;"	c	file:
__STDC_FORMAT_MACROS	examples/wordcount/hasher.cc	17;"	d	file:
buckets_	examples/wordcount/hasher.cc	/^  boost::ptr_vector<SendThrottler> buckets_;$/;"	m	class:WordCountSender	file:
buffer_	examples/wordcount/hasher.cc	/^  Buffer buffer_;$/;"	m	class:SendThrottler	file:
client_	examples/wordcount/hasher.cc	/^  TcpClient client_;$/;"	m	class:SendThrottler	file:
cond_	examples/wordcount/hasher.cc	/^  Condition cond_;$/;"	m	class:SendThrottler	file:
congestion_	examples/wordcount/hasher.cc	/^  bool congestion_;$/;"	m	class:SendThrottler	file:
conn_	examples/wordcount/hasher.cc	/^  TcpConnectionPtr conn_;$/;"	m	class:SendThrottler	file:
connect	examples/wordcount/hasher.cc	/^  void connect()$/;"	f	class:SendThrottler
connectAll	examples/wordcount/hasher.cc	/^  void connectAll()$/;"	f	class:WordCountSender
connectLatch_	examples/wordcount/hasher.cc	/^  CountDownLatch connectLatch_;$/;"	m	class:SendThrottler	file:
disconnect	examples/wordcount/hasher.cc	/^  void disconnect()$/;"	f	class:SendThrottler
disconnectAll	examples/wordcount/hasher.cc	/^  void disconnectAll()$/;"	f	class:WordCountSender
disconnectLatch_	examples/wordcount/hasher.cc	/^  CountDownLatch disconnectLatch_;$/;"	m	class:SendThrottler	file:
kMaxHashSize	examples/wordcount/hasher.cc	/^const size_t kMaxHashSize = 10 * 1000 * 1000;$/;"	v
loopThread_	examples/wordcount/hasher.cc	/^  EventLoopThread loopThread_;$/;"	m	class:WordCountSender	file:
loop_	examples/wordcount/hasher.cc	/^  EventLoop* loop_;$/;"	m	class:WordCountSender	file:
main	examples/wordcount/hasher.cc	/^int main(int argc, char* argv[])$/;"	f
mutex_	examples/wordcount/hasher.cc	/^  MutexLock mutex_;$/;"	m	class:SendThrottler	file:
onConnection	examples/wordcount/hasher.cc	/^  void onConnection(const TcpConnectionPtr& conn)$/;"	f	class:SendThrottler	file:
onHighWaterMark	examples/wordcount/hasher.cc	/^  void onHighWaterMark()$/;"	f	class:SendThrottler	file:
onWriteComplete	examples/wordcount/hasher.cc	/^  void onWriteComplete()$/;"	f	class:SendThrottler	file:
processFile	examples/wordcount/hasher.cc	/^void WordCountSender::processFile(const char* filename)$/;"	f	class:WordCountSender
send	examples/wordcount/hasher.cc	/^  void send(const string& word, int64_t count)$/;"	f	class:SendThrottler
throttle	examples/wordcount/hasher.cc	/^  void throttle()$/;"	f	class:SendThrottler	file:
WordCountReceiver	examples/wordcount/receiver.cc	/^  WordCountReceiver(EventLoop* loop, const InetAddress& listenAddr)$/;"	f	class:WordCountReceiver
WordCountReceiver	examples/wordcount/receiver.cc	/^class WordCountReceiver : boost::noncopyable$/;"	c	file:
loop_	examples/wordcount/receiver.cc	/^  EventLoop* loop_;$/;"	m	class:WordCountReceiver	file:
main	examples/wordcount/receiver.cc	/^int main(int argc, char* argv[])$/;"	f
onConnection	examples/wordcount/receiver.cc	/^  void onConnection(const TcpConnectionPtr& conn)$/;"	f	class:WordCountReceiver	file:
onMessage	examples/wordcount/receiver.cc	/^  void onMessage(const TcpConnectionPtr& conn, Buffer* buf, Timestamp)$/;"	f	class:WordCountReceiver	file:
output	examples/wordcount/receiver.cc	/^  void output()$/;"	f	class:WordCountReceiver	file:
senders_	examples/wordcount/receiver.cc	/^  int senders_;$/;"	m	class:WordCountReceiver	file:
server_	examples/wordcount/receiver.cc	/^  TcpServer server_;$/;"	m	class:WordCountReceiver	file:
start	examples/wordcount/receiver.cc	/^  void start(int senders)$/;"	f	class:WordCountReceiver
wordcounts_	examples/wordcount/receiver.cc	/^  WordCountMap wordcounts_;$/;"	m	class:WordCountReceiver	file:
BUFSIZE	examples/wordcount/slowsink.py	/^BUFSIZE = int(bps\/10) # sleep 100ms at full speed$/;"	v
bps	examples/wordcount/slowsink.py	/^bps = mps * 1000000$/;"	v
client_socket	examples/wordcount/slowsink.py	/^	client_socket = socket.create_connection((host, port))$/;"	v
data	examples/wordcount/slowsink.py	/^	data = client_socket.recv(BUFSIZE)$/;"	v
dot	examples/wordcount/slowsink.py	/^dot = bps$/;"	v
elapsed	examples/wordcount/slowsink.py	/^elapsed = end - start$/;"	v
end	examples/wordcount/slowsink.py	/^end = time.time()$/;"	v
host	examples/wordcount/slowsink.py	/^	host = sys.argv[2]$/;"	v
host	examples/wordcount/slowsink.py	/^host = ''$/;"	v
listen_address	examples/wordcount/slowsink.py	/^	listen_address = ("", port)$/;"	v
mps	examples/wordcount/slowsink.py	/^	mps = 1.0$/;"	v
mps	examples/wordcount/slowsink.py	/^	mps = float(sys.argv[1])$/;"	v
port	examples/wordcount/slowsink.py	/^	port = int(sys.argv[3])$/;"	v
port	examples/wordcount/slowsink.py	/^port = 2007$/;"	v
server_socket	examples/wordcount/slowsink.py	/^	server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)$/;"	v
size	examples/wordcount/slowsink.py	/^		size = len(data)$/;"	v
start	examples/wordcount/slowsink.py	/^start = time.time()$/;"	v
total_size	examples/wordcount/slowsink.py	/^total_size = 0$/;"	v
g_tcpNoDelay	examples/zeromq/local_lat.cc	/^bool g_tcpNoDelay = false;$/;"	v
main	examples/zeromq/local_lat.cc	/^int main(int argc, char* argv[])$/;"	f
onConnection	examples/zeromq/local_lat.cc	/^void onConnection(const muduo::net::TcpConnectionPtr& conn)$/;"	f
onStringMessage	examples/zeromq/local_lat.cc	/^void onStringMessage(LengthHeaderCodec* codec,$/;"	f
g_message	examples/zeromq/remote_lat.cc	/^muduo::string g_message;$/;"	v
g_msgCount	examples/zeromq/remote_lat.cc	/^int g_msgCount = 0;$/;"	v
g_msgSize	examples/zeromq/remote_lat.cc	/^int g_msgSize = 0;$/;"	v
g_start	examples/zeromq/remote_lat.cc	/^muduo::Timestamp g_start;$/;"	v
g_tcpNoDelay	examples/zeromq/remote_lat.cc	/^bool g_tcpNoDelay = false;$/;"	v
g_totalMsgs	examples/zeromq/remote_lat.cc	/^int g_totalMsgs = 0;$/;"	v
main	examples/zeromq/remote_lat.cc	/^int main(int argc, char* argv[])$/;"	f
onConnection	examples/zeromq/remote_lat.cc	/^void onConnection(LengthHeaderCodec* codec, const muduo::net::TcpConnectionPtr& conn)$/;"	f
onStringMessage	examples/zeromq/remote_lat.cc	/^void onStringMessage(LengthHeaderCodec* codec,$/;"	f
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
AsyncLogging	muduo/base/AsyncLogging.cc	/^AsyncLogging::AsyncLogging(const string& basename,$/;"	f	class:AsyncLogging
append	muduo/base/AsyncLogging.cc	/^void AsyncLogging::append(const char* logline, int len)$/;"	f	class:AsyncLogging
threadFunc	muduo/base/AsyncLogging.cc	/^void AsyncLogging::threadFunc()$/;"	f	class:AsyncLogging
AsyncLogging	muduo/base/AsyncLogging.h	/^class AsyncLogging : boost::noncopyable$/;"	c	namespace:muduo
Buffer	muduo/base/AsyncLogging.h	/^  typedef muduo::detail::FixedBuffer<muduo::detail::kLargeBuffer> Buffer;$/;"	t	class:muduo::AsyncLogging
BufferPtr	muduo/base/AsyncLogging.h	/^  typedef BufferVector::auto_type BufferPtr;  \/\/auto_type类似std::unique_ptr，具备移动语义，能自动管理对象生命期$/;"	t	class:muduo::AsyncLogging
BufferVector	muduo/base/AsyncLogging.h	/^  typedef boost::ptr_vector<Buffer> BufferVector;$/;"	t	class:muduo::AsyncLogging
MUDUO_BASE_ASYNCLOGGING_H	muduo/base/AsyncLogging.h	2;"	d
basename_	muduo/base/AsyncLogging.h	/^  string basename_;$/;"	m	class:muduo::AsyncLogging
buffers_	muduo/base/AsyncLogging.h	/^  BufferVector buffers_;  \/\/待写入文件的已填满的缓冲，供后端写入的buffer$/;"	m	class:muduo::AsyncLogging
cond_	muduo/base/AsyncLogging.h	/^  muduo::Condition cond_;$/;"	m	class:muduo::AsyncLogging
currentBuffer_	muduo/base/AsyncLogging.h	/^  BufferPtr currentBuffer_; \/\/当前缓冲$/;"	m	class:muduo::AsyncLogging
flushInterval_	muduo/base/AsyncLogging.h	/^  const int flushInterval_;$/;"	m	class:muduo::AsyncLogging
latch_	muduo/base/AsyncLogging.h	/^  muduo::CountDownLatch latch_;$/;"	m	class:muduo::AsyncLogging
muduo	muduo/base/AsyncLogging.h	/^namespace muduo$/;"	n
mutex_	muduo/base/AsyncLogging.h	/^  muduo::MutexLock mutex_;$/;"	m	class:muduo::AsyncLogging
nextBuffer_	muduo/base/AsyncLogging.h	/^  BufferPtr nextBuffer_;  \/\/预备缓冲$/;"	m	class:muduo::AsyncLogging
rollSize_	muduo/base/AsyncLogging.h	/^  size_t rollSize_;$/;"	m	class:muduo::AsyncLogging
running_	muduo/base/AsyncLogging.h	/^  bool running_;$/;"	m	class:muduo::AsyncLogging
start	muduo/base/AsyncLogging.h	/^  void start()$/;"	f	class:muduo::AsyncLogging
stop	muduo/base/AsyncLogging.h	/^  void stop()$/;"	f	class:muduo::AsyncLogging
thread_	muduo/base/AsyncLogging.h	/^  muduo::Thread thread_;$/;"	m	class:muduo::AsyncLogging
~AsyncLogging	muduo/base/AsyncLogging.h	/^  ~AsyncLogging()$/;"	f	class:muduo::AsyncLogging
AtomicInt32	muduo/base/Atomic.h	/^typedef detail::AtomicIntegerT<int32_t> AtomicInt32;$/;"	t	namespace:muduo
AtomicInt64	muduo/base/Atomic.h	/^typedef detail::AtomicIntegerT<int64_t> AtomicInt64;$/;"	t	namespace:muduo
AtomicIntegerT	muduo/base/Atomic.h	/^  AtomicIntegerT()$/;"	f	class:muduo::detail::AtomicIntegerT
AtomicIntegerT	muduo/base/Atomic.h	/^class AtomicIntegerT : boost::noncopyable$/;"	c	namespace:muduo::detail
MUDUO_BASE_ATOMIC_H	muduo/base/Atomic.h	7;"	d
add	muduo/base/Atomic.h	/^  void add(T x)$/;"	f	class:muduo::detail::AtomicIntegerT
addAndGet	muduo/base/Atomic.h	/^  T addAndGet(T x)$/;"	f	class:muduo::detail::AtomicIntegerT
decrement	muduo/base/Atomic.h	/^  void decrement()$/;"	f	class:muduo::detail::AtomicIntegerT
decrementAndGet	muduo/base/Atomic.h	/^  T decrementAndGet()$/;"	f	class:muduo::detail::AtomicIntegerT
detail	muduo/base/Atomic.h	/^namespace detail$/;"	n	namespace:muduo
get	muduo/base/Atomic.h	/^  T get()$/;"	f	class:muduo::detail::AtomicIntegerT
getAndAdd	muduo/base/Atomic.h	/^  T getAndAdd(T x)$/;"	f	class:muduo::detail::AtomicIntegerT
getAndSet	muduo/base/Atomic.h	/^  T getAndSet(T newValue)$/;"	f	class:muduo::detail::AtomicIntegerT
increment	muduo/base/Atomic.h	/^  void increment()$/;"	f	class:muduo::detail::AtomicIntegerT
incrementAndGet	muduo/base/Atomic.h	/^  T incrementAndGet()$/;"	f	class:muduo::detail::AtomicIntegerT
muduo	muduo/base/Atomic.h	/^namespace muduo$/;"	n
value_	muduo/base/Atomic.h	/^  volatile T value_;$/;"	m	class:muduo::detail::AtomicIntegerT
BlockingQueue	muduo/base/BlockingQueue.h	/^  BlockingQueue()$/;"	f	class:muduo::BlockingQueue
BlockingQueue	muduo/base/BlockingQueue.h	/^class BlockingQueue : boost::noncopyable$/;"	c	namespace:muduo
MUDUO_BASE_BLOCKINGQUEUE_H	muduo/base/BlockingQueue.h	7;"	d
muduo	muduo/base/BlockingQueue.h	/^namespace muduo$/;"	n
mutex_	muduo/base/BlockingQueue.h	/^  mutable MutexLock mutex_;$/;"	m	class:muduo::BlockingQueue
notEmpty_	muduo/base/BlockingQueue.h	/^  Condition         notEmpty_;$/;"	m	class:muduo::BlockingQueue
put	muduo/base/BlockingQueue.h	/^  void put(T&& x)$/;"	f	class:muduo::BlockingQueue
put	muduo/base/BlockingQueue.h	/^  void put(const T& x)$/;"	f	class:muduo::BlockingQueue
queue_	muduo/base/BlockingQueue.h	/^  std::deque<T>     queue_;$/;"	m	class:muduo::BlockingQueue
size	muduo/base/BlockingQueue.h	/^  size_t size() const$/;"	f	class:muduo::BlockingQueue
take	muduo/base/BlockingQueue.h	/^  T take()$/;"	f	class:muduo::BlockingQueue
BoundedBlockingQueue	muduo/base/BoundedBlockingQueue.h	/^  explicit BoundedBlockingQueue(int maxSize)$/;"	f	class:muduo::BoundedBlockingQueue
BoundedBlockingQueue	muduo/base/BoundedBlockingQueue.h	/^class BoundedBlockingQueue : boost::noncopyable$/;"	c	namespace:muduo
MUDUO_BASE_BOUNDEDBLOCKINGQUEUE_H	muduo/base/BoundedBlockingQueue.h	7;"	d
capacity	muduo/base/BoundedBlockingQueue.h	/^  size_t capacity() const$/;"	f	class:muduo::BoundedBlockingQueue
empty	muduo/base/BoundedBlockingQueue.h	/^  bool empty() const$/;"	f	class:muduo::BoundedBlockingQueue
full	muduo/base/BoundedBlockingQueue.h	/^  bool full() const$/;"	f	class:muduo::BoundedBlockingQueue
muduo	muduo/base/BoundedBlockingQueue.h	/^namespace muduo$/;"	n
mutex_	muduo/base/BoundedBlockingQueue.h	/^  mutable MutexLock          mutex_;$/;"	m	class:muduo::BoundedBlockingQueue
notEmpty_	muduo/base/BoundedBlockingQueue.h	/^  Condition                  notEmpty_;$/;"	m	class:muduo::BoundedBlockingQueue
notFull_	muduo/base/BoundedBlockingQueue.h	/^  Condition                  notFull_;$/;"	m	class:muduo::BoundedBlockingQueue
put	muduo/base/BoundedBlockingQueue.h	/^  void put(const T& x)$/;"	f	class:muduo::BoundedBlockingQueue
queue_	muduo/base/BoundedBlockingQueue.h	/^  boost::circular_buffer<T>  queue_;$/;"	m	class:muduo::BoundedBlockingQueue
size	muduo/base/BoundedBlockingQueue.h	/^  size_t size() const$/;"	f	class:muduo::BoundedBlockingQueue
take	muduo/base/BoundedBlockingQueue.h	/^  T take()$/;"	f	class:muduo::BoundedBlockingQueue
waitForSeconds	muduo/base/Condition.cc	/^bool muduo::Condition::waitForSeconds(double seconds)$/;"	f	class:muduo::Condition
Condition	muduo/base/Condition.h	/^  explicit Condition(MutexLock& mutex)$/;"	f	class:muduo::Condition
Condition	muduo/base/Condition.h	/^class Condition : boost::noncopyable$/;"	c	namespace:muduo
MUDUO_BASE_CONDITION_H	muduo/base/Condition.h	7;"	d
muduo	muduo/base/Condition.h	/^namespace muduo$/;"	n
mutex_	muduo/base/Condition.h	/^  MutexLock& mutex_;$/;"	m	class:muduo::Condition
notify	muduo/base/Condition.h	/^  void notify()$/;"	f	class:muduo::Condition
notifyAll	muduo/base/Condition.h	/^  void notifyAll()$/;"	f	class:muduo::Condition
pcond_	muduo/base/Condition.h	/^  pthread_cond_t pcond_;$/;"	m	class:muduo::Condition
wait	muduo/base/Condition.h	/^  void wait()$/;"	f	class:muduo::Condition
~Condition	muduo/base/Condition.h	/^  ~Condition()$/;"	f	class:muduo::Condition
CountDownLatch	muduo/base/CountDownLatch.cc	/^CountDownLatch::CountDownLatch(int count)$/;"	f	class:CountDownLatch
countDown	muduo/base/CountDownLatch.cc	/^void CountDownLatch::countDown()$/;"	f	class:CountDownLatch
getCount	muduo/base/CountDownLatch.cc	/^int CountDownLatch::getCount() const$/;"	f	class:CountDownLatch
wait	muduo/base/CountDownLatch.cc	/^void CountDownLatch::wait()$/;"	f	class:CountDownLatch
CountDownLatch	muduo/base/CountDownLatch.h	/^class CountDownLatch : boost::noncopyable$/;"	c	namespace:muduo
MUDUO_BASE_COUNTDOWNLATCH_H	muduo/base/CountDownLatch.h	7;"	d
condition_	muduo/base/CountDownLatch.h	/^  Condition condition_;$/;"	m	class:muduo::CountDownLatch
count_	muduo/base/CountDownLatch.h	/^  int count_;$/;"	m	class:muduo::CountDownLatch
muduo	muduo/base/CountDownLatch.h	/^namespace muduo$/;"	n
mutex_	muduo/base/CountDownLatch.h	/^  mutable MutexLock mutex_;$/;"	m	class:muduo::CountDownLatch
CurrentThread	muduo/base/CurrentThread.h	/^namespace CurrentThread$/;"	n	namespace:muduo
MUDUO_BASE_CURRENTTHREAD_H	muduo/base/CurrentThread.h	7;"	d
muduo	muduo/base/CurrentThread.h	/^namespace muduo$/;"	n
name	muduo/base/CurrentThread.h	/^  inline const char* name()$/;"	f	namespace:muduo::CurrentThread
tid	muduo/base/CurrentThread.h	/^  inline int tid()$/;"	f	namespace:muduo::CurrentThread
tidString	muduo/base/CurrentThread.h	/^  inline const char* tidString() \/\/ for logging$/;"	f	namespace:muduo::CurrentThread
tidStringLength	muduo/base/CurrentThread.h	/^  inline int tidStringLength() \/\/ for logging$/;"	f	namespace:muduo::CurrentThread
Date	muduo/base/Date.cc	/^Date::Date(const struct tm& t)$/;"	f	class:Date
Date	muduo/base/Date.cc	/^Date::Date(int y, int m, int d)$/;"	f	class:Date
detail	muduo/base/Date.cc	/^namespace detail$/;"	n	namespace:muduo	file:
getJulianDayNumber	muduo/base/Date.cc	/^int getJulianDayNumber(int year, int month, int day)$/;"	f	namespace:muduo::detail
getYearMonthDay	muduo/base/Date.cc	/^struct Date::YearMonthDay getYearMonthDay(int julianDayNumber)$/;"	f	namespace:muduo::detail
kJulianDayOf1970_01_01	muduo/base/Date.cc	/^const int Date::kJulianDayOf1970_01_01 = detail::getJulianDayNumber(1970, 1, 1);$/;"	m	class:muduo::Date	file:
muduo	muduo/base/Date.cc	/^namespace muduo$/;"	n	file:
require_32_bit_integer_at_least	muduo/base/Date.cc	/^char require_32_bit_integer_at_least[sizeof(int) >= sizeof(int32_t) ? 1 : -1];$/;"	m	namespace:muduo::detail	file:
toIsoString	muduo/base/Date.cc	/^string Date::toIsoString() const$/;"	f	class:Date
yearMonthDay	muduo/base/Date.cc	/^Date::YearMonthDay Date::yearMonthDay() const$/;"	f	class:Date
Date	muduo/base/Date.h	/^  Date()$/;"	f	class:muduo::Date
Date	muduo/base/Date.h	/^  explicit Date(int julianDayNum)$/;"	f	class:muduo::Date
Date	muduo/base/Date.h	/^class Date : public muduo::copyable$/;"	c	namespace:muduo
MUDUO_BASE_DATE_H	muduo/base/Date.h	7;"	d
YearMonthDay	muduo/base/Date.h	/^  struct YearMonthDay$/;"	s	class:muduo::Date
day	muduo/base/Date.h	/^    int day;  \/\/ [1..31]$/;"	m	struct:muduo::Date::YearMonthDay
day	muduo/base/Date.h	/^  int day() const$/;"	f	class:muduo::Date
julianDayNumber	muduo/base/Date.h	/^  int julianDayNumber() const { return julianDayNumber_; }$/;"	f	class:muduo::Date
julianDayNumber_	muduo/base/Date.h	/^  int julianDayNumber_;$/;"	m	class:muduo::Date
kDaysPerWeek	muduo/base/Date.h	/^  static const int kDaysPerWeek = 7;$/;"	m	class:muduo::Date
kJulianDayOf1970_01_01	muduo/base/Date.h	/^  static const int kJulianDayOf1970_01_01;$/;"	m	class:muduo::Date
month	muduo/base/Date.h	/^    int month;  \/\/ [1..12]$/;"	m	struct:muduo::Date::YearMonthDay
month	muduo/base/Date.h	/^  int month() const$/;"	f	class:muduo::Date
muduo	muduo/base/Date.h	/^namespace muduo$/;"	n
operator <	muduo/base/Date.h	/^inline bool operator<(Date x, Date y)$/;"	f	namespace:muduo
operator ==	muduo/base/Date.h	/^inline bool operator==(Date x, Date y)$/;"	f	namespace:muduo
swap	muduo/base/Date.h	/^  void swap(Date& that)$/;"	f	class:muduo::Date
valid	muduo/base/Date.h	/^  bool valid() const { return julianDayNumber_ > 0; }$/;"	f	class:muduo::Date
weekDay	muduo/base/Date.h	/^  int weekDay() const$/;"	f	class:muduo::Date
year	muduo/base/Date.h	/^    int year; \/\/ [1900..2500]$/;"	m	struct:muduo::Date::YearMonthDay
year	muduo/base/Date.h	/^  int year() const$/;"	f	class:muduo::Date
Exception	muduo/base/Exception.cc	/^Exception::Exception(const char* msg)$/;"	f	class:Exception
Exception	muduo/base/Exception.cc	/^Exception::Exception(const string& msg)$/;"	f	class:Exception
fillStackTrace	muduo/base/Exception.cc	/^void Exception::fillStackTrace()$/;"	f	class:Exception
stackTrace	muduo/base/Exception.cc	/^const char* Exception::stackTrace() const throw()$/;"	f	class:Exception
what	muduo/base/Exception.cc	/^const char* Exception::what() const throw()$/;"	f	class:Exception
~Exception	muduo/base/Exception.cc	/^Exception::~Exception() throw ()$/;"	f	class:Exception
Exception	muduo/base/Exception.h	/^class Exception : public std::exception$/;"	c	namespace:muduo
MUDUO_BASE_EXCEPTION_H	muduo/base/Exception.h	7;"	d
message_	muduo/base/Exception.h	/^  string message_;$/;"	m	class:muduo::Exception
muduo	muduo/base/Exception.h	/^namespace muduo$/;"	n
stack_	muduo/base/Exception.h	/^  string stack_;$/;"	m	class:muduo::Exception
AppendFile	muduo/base/FileUtil.cc	/^FileUtil::AppendFile::AppendFile(StringArg filename)$/;"	f	class:FileUtil::AppendFile
ReadSmallFile	muduo/base/FileUtil.cc	/^FileUtil::ReadSmallFile::ReadSmallFile(StringArg filename)$/;"	f	class:FileUtil::ReadSmallFile
append	muduo/base/FileUtil.cc	/^void FileUtil::AppendFile::append(const char* logline, const size_t len)$/;"	f	class:FileUtil::AppendFile
flush	muduo/base/FileUtil.cc	/^void FileUtil::AppendFile::flush()$/;"	f	class:FileUtil::AppendFile
readToBuffer	muduo/base/FileUtil.cc	/^int FileUtil::ReadSmallFile::readToBuffer(int* size)$/;"	f	class:FileUtil::ReadSmallFile
readToString	muduo/base/FileUtil.cc	/^int FileUtil::ReadSmallFile::readToString(int maxSize,$/;"	f	class:FileUtil::ReadSmallFile
write	muduo/base/FileUtil.cc	/^size_t FileUtil::AppendFile::write(const char* logline, size_t len)$/;"	f	class:FileUtil::AppendFile
~AppendFile	muduo/base/FileUtil.cc	/^FileUtil::AppendFile::~AppendFile()$/;"	f	class:FileUtil::AppendFile
~ReadSmallFile	muduo/base/FileUtil.cc	/^FileUtil::ReadSmallFile::~ReadSmallFile()$/;"	f	class:FileUtil::ReadSmallFile
AppendFile	muduo/base/FileUtil.h	/^class AppendFile : boost::noncopyable$/;"	c	namespace:muduo::FileUtil
FileUtil	muduo/base/FileUtil.h	/^namespace FileUtil$/;"	n	namespace:muduo
MUDUO_BASE_FILEUTIL_H	muduo/base/FileUtil.h	12;"	d
ReadSmallFile	muduo/base/FileUtil.h	/^class ReadSmallFile : boost::noncopyable$/;"	c	namespace:muduo::FileUtil
buf_	muduo/base/FileUtil.h	/^  char buf_[kBufferSize];$/;"	m	class:muduo::FileUtil::ReadSmallFile
buffer	muduo/base/FileUtil.h	/^  const char* buffer() const { return buf_; }$/;"	f	class:muduo::FileUtil::ReadSmallFile
buffer_	muduo/base/FileUtil.h	/^  char buffer_[64*1024];$/;"	m	class:muduo::FileUtil::AppendFile
err_	muduo/base/FileUtil.h	/^  int err_;$/;"	m	class:muduo::FileUtil::ReadSmallFile
fd_	muduo/base/FileUtil.h	/^  int fd_;$/;"	m	class:muduo::FileUtil::ReadSmallFile
fp_	muduo/base/FileUtil.h	/^  FILE* fp_;$/;"	m	class:muduo::FileUtil::AppendFile
kBufferSize	muduo/base/FileUtil.h	/^  static const int kBufferSize = 64*1024;$/;"	m	class:muduo::FileUtil::ReadSmallFile
muduo	muduo/base/FileUtil.h	/^namespace muduo$/;"	n
readFile	muduo/base/FileUtil.h	/^int readFile(StringArg filename,$/;"	f	namespace:muduo::FileUtil
writtenBytes	muduo/base/FileUtil.h	/^  size_t writtenBytes() const { return writtenBytes_; }$/;"	f	class:muduo::FileUtil::AppendFile
writtenBytes_	muduo/base/FileUtil.h	/^  size_t writtenBytes_;$/;"	m	class:muduo::FileUtil::AppendFile
GzipFile	muduo/base/GzipFile.h	/^  GzipFile(GzipFile&& rhs)$/;"	f	class:muduo::GzipFile
GzipFile	muduo/base/GzipFile.h	/^  explicit GzipFile(gzFile file)$/;"	f	class:muduo::GzipFile
GzipFile	muduo/base/GzipFile.h	/^class GzipFile : boost::noncopyable$/;"	c	namespace:muduo
file_	muduo/base/GzipFile.h	/^  gzFile file_;$/;"	m	class:muduo::GzipFile
muduo	muduo/base/GzipFile.h	/^namespace muduo$/;"	n
offset	muduo/base/GzipFile.h	/^  off_t offset() const { return ::gzoffset(file_); }$/;"	f	class:muduo::GzipFile
openForAppend	muduo/base/GzipFile.h	/^  static GzipFile openForAppend(StringArg filename)$/;"	f	class:muduo::GzipFile
openForRead	muduo/base/GzipFile.h	/^  static GzipFile openForRead(StringArg filename)$/;"	f	class:muduo::GzipFile
openForWriteExclusive	muduo/base/GzipFile.h	/^  static GzipFile openForWriteExclusive(StringArg filename)$/;"	f	class:muduo::GzipFile
openForWriteTruncate	muduo/base/GzipFile.h	/^  static GzipFile openForWriteTruncate(StringArg filename)$/;"	f	class:muduo::GzipFile
operator =	muduo/base/GzipFile.h	/^  GzipFile& operator=(GzipFile&& rhs)$/;"	f	class:muduo::GzipFile
read	muduo/base/GzipFile.h	/^  int read(void* buf, int len) { return ::gzread(file_, buf, len); }$/;"	f	class:muduo::GzipFile
setBuffer	muduo/base/GzipFile.h	/^  bool setBuffer(int size) { return ::gzbuffer(file_, size) == 0; }$/;"	f	class:muduo::GzipFile
swap	muduo/base/GzipFile.h	/^  void swap(GzipFile& rhs) { std::swap(file_, rhs.file_); }$/;"	f	class:muduo::GzipFile
tell	muduo/base/GzipFile.h	/^  off_t tell() const { return ::gztell(file_); }$/;"	f	class:muduo::GzipFile
valid	muduo/base/GzipFile.h	/^  bool valid() const { return file_ != NULL; }$/;"	f	class:muduo::GzipFile
write	muduo/base/GzipFile.h	/^  int write(StringPiece buf) { return ::gzwrite(file_, buf.data(), buf.size()); }$/;"	f	class:muduo::GzipFile
~GzipFile	muduo/base/GzipFile.h	/^  ~GzipFile()$/;"	f	class:muduo::GzipFile
LogFile	muduo/base/LogFile.cc	/^LogFile::LogFile(const string& basename,$/;"	f	class:LogFile
append	muduo/base/LogFile.cc	/^void LogFile::append(const char* logline, int len)$/;"	f	class:LogFile
append_unlocked	muduo/base/LogFile.cc	/^void LogFile::append_unlocked(const char* logline, int len)$/;"	f	class:LogFile
flush	muduo/base/LogFile.cc	/^void LogFile::flush()$/;"	f	class:LogFile
getLogFileName	muduo/base/LogFile.cc	/^string LogFile::getLogFileName(const string& basename, time_t* now)$/;"	f	class:LogFile
rollFile	muduo/base/LogFile.cc	/^bool LogFile::rollFile()$/;"	f	class:LogFile
~LogFile	muduo/base/LogFile.cc	/^LogFile::~LogFile()$/;"	f	class:LogFile
FileUtil	muduo/base/LogFile.h	/^namespace FileUtil$/;"	n	namespace:muduo
LogFile	muduo/base/LogFile.h	/^class LogFile : boost::noncopyable$/;"	c	namespace:muduo
MUDUO_BASE_LOGFILE_H	muduo/base/LogFile.h	2;"	d
basename_	muduo/base/LogFile.h	/^  const string basename_;$/;"	m	class:muduo::LogFile
checkEveryN_	muduo/base/LogFile.h	/^  const int checkEveryN_;$/;"	m	class:muduo::LogFile
count_	muduo/base/LogFile.h	/^  int count_;$/;"	m	class:muduo::LogFile
file_	muduo/base/LogFile.h	/^  boost::scoped_ptr<FileUtil::AppendFile> file_;$/;"	m	class:muduo::LogFile
flushInterval_	muduo/base/LogFile.h	/^  const int flushInterval_;$/;"	m	class:muduo::LogFile
kRollPerSeconds_	muduo/base/LogFile.h	/^  const static int kRollPerSeconds_ = 60*60*24;$/;"	m	class:muduo::LogFile
lastFlush_	muduo/base/LogFile.h	/^  time_t lastFlush_;$/;"	m	class:muduo::LogFile
lastRoll_	muduo/base/LogFile.h	/^  time_t lastRoll_;$/;"	m	class:muduo::LogFile
muduo	muduo/base/LogFile.h	/^namespace muduo$/;"	n
mutex_	muduo/base/LogFile.h	/^  boost::scoped_ptr<MutexLock> mutex_;$/;"	m	class:muduo::LogFile
rollSize_	muduo/base/LogFile.h	/^  const size_t rollSize_;$/;"	m	class:muduo::LogFile
startOfPeriod_	muduo/base/LogFile.h	/^  time_t startOfPeriod_;$/;"	m	class:muduo::LogFile
Fmt	muduo/base/LogStream.cc	/^Fmt::Fmt(const char* fmt, T val)$/;"	f	class:Fmt
convert	muduo/base/LogStream.cc	/^size_t convert(char buf[], T value)$/;"	f	namespace:muduo::detail
convertHex	muduo/base/LogStream.cc	/^size_t convertHex(char buf[], uintptr_t value)$/;"	f	namespace:muduo::detail
cookieEnd	muduo/base/LogStream.cc	/^void FixedBuffer<SIZE>::cookieEnd()$/;"	f	class:FixedBuffer
cookieStart	muduo/base/LogStream.cc	/^void FixedBuffer<SIZE>::cookieStart()$/;"	f	class:FixedBuffer
debugString	muduo/base/LogStream.cc	/^const char* FixedBuffer<SIZE>::debugString()$/;"	f	class:FixedBuffer
detail	muduo/base/LogStream.cc	/^namespace detail$/;"	n	namespace:muduo	file:
digits	muduo/base/LogStream.cc	/^const char digits[] = "9876543210123456789";$/;"	m	namespace:muduo::detail	file:
digitsHex	muduo/base/LogStream.cc	/^const char digitsHex[] = "0123456789ABCDEF";$/;"	m	namespace:muduo::detail	file:
formatInteger	muduo/base/LogStream.cc	/^void LogStream::formatInteger(T v)$/;"	f	class:LogStream
muduo	muduo/base/LogStream.cc	/^namespace muduo$/;"	n	file:
operator <<	muduo/base/LogStream.cc	/^LogStream& LogStream::operator<<(const void* p)$/;"	f	class:LogStream
operator <<	muduo/base/LogStream.cc	/^LogStream& LogStream::operator<<(double v)$/;"	f	class:LogStream
operator <<	muduo/base/LogStream.cc	/^LogStream& LogStream::operator<<(int v)$/;"	f	class:LogStream
operator <<	muduo/base/LogStream.cc	/^LogStream& LogStream::operator<<(long long v)$/;"	f	class:LogStream
operator <<	muduo/base/LogStream.cc	/^LogStream& LogStream::operator<<(long v)$/;"	f	class:LogStream
operator <<	muduo/base/LogStream.cc	/^LogStream& LogStream::operator<<(short v)$/;"	f	class:LogStream
operator <<	muduo/base/LogStream.cc	/^LogStream& LogStream::operator<<(unsigned int v)$/;"	f	class:LogStream
operator <<	muduo/base/LogStream.cc	/^LogStream& LogStream::operator<<(unsigned long long v)$/;"	f	class:LogStream
operator <<	muduo/base/LogStream.cc	/^LogStream& LogStream::operator<<(unsigned long v)$/;"	f	class:LogStream
operator <<	muduo/base/LogStream.cc	/^LogStream& LogStream::operator<<(unsigned short v)$/;"	f	class:LogStream
staticCheck	muduo/base/LogStream.cc	/^void LogStream::staticCheck()$/;"	f	class:LogStream
zero	muduo/base/LogStream.cc	/^const char* zero = digits + 9;$/;"	m	namespace:muduo::detail	file:
Buffer	muduo/base/LogStream.h	/^  typedef detail::FixedBuffer<detail::kSmallBuffer> Buffer;$/;"	t	class:muduo::LogStream
FixedBuffer	muduo/base/LogStream.h	/^  FixedBuffer()$/;"	f	class:muduo::detail::FixedBuffer
FixedBuffer	muduo/base/LogStream.h	/^class FixedBuffer : boost::noncopyable$/;"	c	namespace:muduo::detail
Fmt	muduo/base/LogStream.h	/^class Fmt \/\/ : boost::noncopyable$/;"	c	namespace:muduo
LogStream	muduo/base/LogStream.h	/^class LogStream : boost::noncopyable$/;"	c	namespace:muduo
MUDUO_BASE_LOGSTREAM_H	muduo/base/LogStream.h	2;"	d
add	muduo/base/LogStream.h	/^  void add(size_t len) { cur_ += len; }$/;"	f	class:muduo::detail::FixedBuffer
append	muduo/base/LogStream.h	/^  void append(const char* \/*restrict*\/ buf, size_t len)$/;"	f	class:muduo::detail::FixedBuffer
append	muduo/base/LogStream.h	/^  void append(const char* data, int len) { buffer_.append(data, len); }$/;"	f	class:muduo::LogStream
avail	muduo/base/LogStream.h	/^  int avail() const { return static_cast<int>(end() - cur_); }$/;"	f	class:muduo::detail::FixedBuffer
buf_	muduo/base/LogStream.h	/^  char buf_[32];$/;"	m	class:muduo::Fmt
buffer	muduo/base/LogStream.h	/^  const Buffer& buffer() const { return buffer_; }$/;"	f	class:muduo::LogStream
buffer_	muduo/base/LogStream.h	/^  Buffer buffer_;$/;"	m	class:muduo::LogStream
bzero	muduo/base/LogStream.h	/^  void bzero() { ::bzero(data_, sizeof data_); }$/;"	f	class:muduo::detail::FixedBuffer
cookie_	muduo/base/LogStream.h	/^  void (*cookie_)();$/;"	m	class:muduo::detail::FixedBuffer
cur_	muduo/base/LogStream.h	/^  char* cur_;$/;"	m	class:muduo::detail::FixedBuffer
current	muduo/base/LogStream.h	/^  char* current() { return cur_; }$/;"	f	class:muduo::detail::FixedBuffer
data	muduo/base/LogStream.h	/^  const char* data() const { return buf_; }$/;"	f	class:muduo::Fmt
data	muduo/base/LogStream.h	/^  const char* data() const { return data_; }$/;"	f	class:muduo::detail::FixedBuffer
data_	muduo/base/LogStream.h	/^  char data_[SIZE];$/;"	m	class:muduo::detail::FixedBuffer
detail	muduo/base/LogStream.h	/^namespace detail$/;"	n	namespace:muduo
end	muduo/base/LogStream.h	/^  const char* end() const { return data_ + sizeof data_; }$/;"	f	class:muduo::detail::FixedBuffer
kLargeBuffer	muduo/base/LogStream.h	/^const int kLargeBuffer = 4000*1000;$/;"	m	namespace:muduo::detail
kMaxNumericSize	muduo/base/LogStream.h	/^  static const int kMaxNumericSize = 32;$/;"	m	class:muduo::LogStream
kSmallBuffer	muduo/base/LogStream.h	/^const int kSmallBuffer = 4000;$/;"	m	namespace:muduo::detail
length	muduo/base/LogStream.h	/^  int length() const { return length_; }$/;"	f	class:muduo::Fmt
length	muduo/base/LogStream.h	/^  int length() const { return static_cast<int>(cur_ - data_); }$/;"	f	class:muduo::detail::FixedBuffer
length_	muduo/base/LogStream.h	/^  int length_;$/;"	m	class:muduo::Fmt
muduo	muduo/base/LogStream.h	/^namespace muduo$/;"	n
operator <<	muduo/base/LogStream.h	/^  self& operator<<(bool v)$/;"	f	class:muduo::LogStream
operator <<	muduo/base/LogStream.h	/^  self& operator<<(char v)$/;"	f	class:muduo::LogStream
operator <<	muduo/base/LogStream.h	/^  self& operator<<(const Buffer& v)$/;"	f	class:muduo::LogStream
operator <<	muduo/base/LogStream.h	/^  self& operator<<(const StringPiece& v)$/;"	f	class:muduo::LogStream
operator <<	muduo/base/LogStream.h	/^  self& operator<<(const char* str)$/;"	f	class:muduo::LogStream
operator <<	muduo/base/LogStream.h	/^  self& operator<<(const std::string& v)$/;"	f	class:muduo::LogStream
operator <<	muduo/base/LogStream.h	/^  self& operator<<(const string& v)$/;"	f	class:muduo::LogStream
operator <<	muduo/base/LogStream.h	/^  self& operator<<(const unsigned char* str)$/;"	f	class:muduo::LogStream
operator <<	muduo/base/LogStream.h	/^  self& operator<<(float v)$/;"	f	class:muduo::LogStream
operator <<	muduo/base/LogStream.h	/^inline LogStream& operator<<(LogStream& s, const Fmt& fmt)$/;"	f	namespace:muduo
reset	muduo/base/LogStream.h	/^  void reset() { cur_ = data_; }$/;"	f	class:muduo::detail::FixedBuffer
resetBuffer	muduo/base/LogStream.h	/^  void resetBuffer() { buffer_.reset(); }$/;"	f	class:muduo::LogStream
self	muduo/base/LogStream.h	/^  typedef LogStream self;$/;"	t	class:muduo::LogStream
setCookie	muduo/base/LogStream.h	/^  void setCookie(void (*cookie)()) { cookie_ = cookie; }$/;"	f	class:muduo::detail::FixedBuffer
toString	muduo/base/LogStream.h	/^  string toString() const { return string(data_, length()); }$/;"	f	class:muduo::detail::FixedBuffer
toStringPiece	muduo/base/LogStream.h	/^  StringPiece toStringPiece() const { return StringPiece(data_, length()); }$/;"	f	class:muduo::detail::FixedBuffer
~FixedBuffer	muduo/base/LogStream.h	/^  ~FixedBuffer()$/;"	f	class:muduo::detail::FixedBuffer
Impl	muduo/base/Logging.cc	/^Logger::Impl::Impl(LogLevel level, int savedErrno, const SourceFile& file, int line)$/;"	f	class:Logger::Impl
LogLevelName	muduo/base/Logging.cc	/^const char* LogLevelName[Logger::NUM_LOG_LEVELS] =$/;"	m	namespace:muduo	file:
Logger	muduo/base/Logging.cc	/^Logger::Logger(SourceFile file, int line)$/;"	f	class:Logger
Logger	muduo/base/Logging.cc	/^Logger::Logger(SourceFile file, int line, LogLevel level)$/;"	f	class:Logger
Logger	muduo/base/Logging.cc	/^Logger::Logger(SourceFile file, int line, LogLevel level, const char* func)$/;"	f	class:Logger
Logger	muduo/base/Logging.cc	/^Logger::Logger(SourceFile file, int line, bool toAbort)$/;"	f	class:Logger
T	muduo/base/Logging.cc	/^  T(const char* str, unsigned len)$/;"	f	class:muduo::T
T	muduo/base/Logging.cc	/^class T$/;"	c	namespace:muduo	file:
defaultFlush	muduo/base/Logging.cc	/^void defaultFlush()$/;"	f	namespace:muduo
defaultOutput	muduo/base/Logging.cc	/^void defaultOutput(const char* msg, int len)$/;"	f	namespace:muduo
finish	muduo/base/Logging.cc	/^void Logger::Impl::finish()$/;"	f	class:Logger::Impl
formatTime	muduo/base/Logging.cc	/^void Logger::Impl::formatTime()$/;"	f	class:Logger::Impl
g_flush	muduo/base/Logging.cc	/^Logger::FlushFunc g_flush = defaultFlush;$/;"	m	namespace:muduo	file:
g_logLevel	muduo/base/Logging.cc	/^Logger::LogLevel g_logLevel = initLogLevel();$/;"	m	namespace:muduo	file:
g_logTimeZone	muduo/base/Logging.cc	/^TimeZone g_logTimeZone;$/;"	m	namespace:muduo	file:
g_output	muduo/base/Logging.cc	/^Logger::OutputFunc g_output = defaultOutput;$/;"	m	namespace:muduo	file:
initLogLevel	muduo/base/Logging.cc	/^Logger::LogLevel initLogLevel()$/;"	f	namespace:muduo
len_	muduo/base/Logging.cc	/^  const unsigned len_;$/;"	m	class:muduo::T	file:
muduo	muduo/base/Logging.cc	/^namespace muduo$/;"	n	file:
operator <<	muduo/base/Logging.cc	/^inline LogStream& operator<<(LogStream& s, T v)$/;"	f	namespace:muduo
operator <<	muduo/base/Logging.cc	/^inline LogStream& operator<<(LogStream& s, const Logger::SourceFile& v)$/;"	f	namespace:muduo
setFlush	muduo/base/Logging.cc	/^void Logger::setFlush(FlushFunc flush)$/;"	f	class:Logger
setLogLevel	muduo/base/Logging.cc	/^void Logger::setLogLevel(Logger::LogLevel level)$/;"	f	class:Logger
setOutput	muduo/base/Logging.cc	/^void Logger::setOutput(OutputFunc out)$/;"	f	class:Logger
setTimeZone	muduo/base/Logging.cc	/^void Logger::setTimeZone(const TimeZone& tz)$/;"	f	class:Logger
str_	muduo/base/Logging.cc	/^  const char* str_;$/;"	m	class:muduo::T	file:
strerror_tl	muduo/base/Logging.cc	/^const char* strerror_tl(int savedErrno)$/;"	f	namespace:muduo
t_errnobuf	muduo/base/Logging.cc	/^__thread char t_errnobuf[512];$/;"	m	namespace:muduo	file:
t_lastSecond	muduo/base/Logging.cc	/^__thread time_t t_lastSecond;$/;"	m	namespace:muduo	file:
t_time	muduo/base/Logging.cc	/^__thread char t_time[32];$/;"	m	namespace:muduo	file:
~Logger	muduo/base/Logging.cc	/^Logger::~Logger()$/;"	f	class:Logger
CHECK_NOTNULL	muduo/base/Logging.h	138;"	d
CheckNotNull	muduo/base/Logging.h	/^T* CheckNotNull(Logger::SourceFile file, int line, const char *names, T* ptr)$/;"	f	namespace:muduo
DEBUG	muduo/base/Logging.h	/^    DEBUG,$/;"	e	enum:muduo::Logger::LogLevel
ERROR	muduo/base/Logging.h	/^    ERROR,$/;"	e	enum:muduo::Logger::LogLevel
FATAL	muduo/base/Logging.h	/^    FATAL,$/;"	e	enum:muduo::Logger::LogLevel
FlushFunc	muduo/base/Logging.h	/^  typedef void (*FlushFunc)();$/;"	t	class:muduo::Logger
INFO	muduo/base/Logging.h	/^    INFO,$/;"	e	enum:muduo::Logger::LogLevel
Impl	muduo/base/Logging.h	/^class Impl$/;"	c	class:muduo::Logger
LOG_DEBUG	muduo/base/Logging.h	121;"	d
LOG_ERROR	muduo/base/Logging.h	126;"	d
LOG_FATAL	muduo/base/Logging.h	127;"	d
LOG_INFO	muduo/base/Logging.h	123;"	d
LOG_SYSERR	muduo/base/Logging.h	128;"	d
LOG_SYSFATAL	muduo/base/Logging.h	129;"	d
LOG_TRACE	muduo/base/Logging.h	119;"	d
LOG_WARN	muduo/base/Logging.h	125;"	d
LogLevel	muduo/base/Logging.h	/^  enum LogLevel$/;"	g	class:muduo::Logger
LogLevel	muduo/base/Logging.h	/^  typedef Logger::LogLevel LogLevel;$/;"	t	class:muduo::Logger::Impl
Logger	muduo/base/Logging.h	/^class Logger$/;"	c	namespace:muduo
MUDUO_BASE_LOGGING_H	muduo/base/Logging.h	2;"	d
NUM_LOG_LEVELS	muduo/base/Logging.h	/^    NUM_LOG_LEVELS,$/;"	e	enum:muduo::Logger::LogLevel
OutputFunc	muduo/base/Logging.h	/^  typedef void (*OutputFunc)(const char* msg, int len);$/;"	t	class:muduo::Logger
SourceFile	muduo/base/Logging.h	/^    explicit SourceFile(const char* filename)$/;"	f	class:muduo::Logger::SourceFile
SourceFile	muduo/base/Logging.h	/^    inline SourceFile(const char (&arr)[N])$/;"	f	class:muduo::Logger::SourceFile
SourceFile	muduo/base/Logging.h	/^  class SourceFile$/;"	c	class:muduo::Logger
TRACE	muduo/base/Logging.h	/^    TRACE,$/;"	e	enum:muduo::Logger::LogLevel
WARN	muduo/base/Logging.h	/^    WARN,$/;"	e	enum:muduo::Logger::LogLevel
basename_	muduo/base/Logging.h	/^  SourceFile basename_;$/;"	m	class:muduo::Logger::Impl
data_	muduo/base/Logging.h	/^    const char* data_;$/;"	m	class:muduo::Logger::SourceFile
impl_	muduo/base/Logging.h	/^  Impl impl_;$/;"	m	class:muduo::Logger
level_	muduo/base/Logging.h	/^  LogLevel level_;$/;"	m	class:muduo::Logger::Impl
line_	muduo/base/Logging.h	/^  int line_;$/;"	m	class:muduo::Logger::Impl
logLevel	muduo/base/Logging.h	/^inline Logger::LogLevel Logger::logLevel()$/;"	f	class:muduo::Logger
muduo	muduo/base/Logging.h	/^namespace muduo$/;"	n
size_	muduo/base/Logging.h	/^    int size_;$/;"	m	class:muduo::Logger::SourceFile
stream	muduo/base/Logging.h	/^  LogStream& stream() { return impl_.stream_; }$/;"	f	class:muduo::Logger
stream_	muduo/base/Logging.h	/^  LogStream stream_;$/;"	m	class:muduo::Logger::Impl
time_	muduo/base/Logging.h	/^  Timestamp time_;$/;"	m	class:muduo::Logger::Impl
MCHECK	muduo/base/Mutex.h	26;"	d
MUDUO_BASE_MUTEX_H	muduo/base/Mutex.h	7;"	d
MutexLock	muduo/base/Mutex.h	/^  MutexLock()$/;"	f	class:muduo::MutexLock
MutexLock	muduo/base/Mutex.h	/^class MutexLock : boost::noncopyable$/;"	c	namespace:muduo
MutexLockGuard	muduo/base/Mutex.h	/^  explicit MutexLockGuard(MutexLock& mutex)$/;"	f	class:muduo::MutexLockGuard
MutexLockGuard	muduo/base/Mutex.h	/^class MutexLockGuard : boost::noncopyable$/;"	c	namespace:muduo
MutexLockGuard	muduo/base/Mutex.h	162;"	d
UnassignGuard	muduo/base/Mutex.h	/^    UnassignGuard(MutexLock& owner)$/;"	f	class:muduo::MutexLock::UnassignGuard
UnassignGuard	muduo/base/Mutex.h	/^  class UnassignGuard : boost::noncopyable$/;"	c	class:muduo::MutexLock
assertLocked	muduo/base/Mutex.h	/^  void assertLocked() const$/;"	f	class:muduo::MutexLock
assignHolder	muduo/base/Mutex.h	/^  void assignHolder()     \/\/上锁时给holder_赋值(在上锁后调用)$/;"	f	class:muduo::MutexLock
getPthreadMutex	muduo/base/Mutex.h	/^  pthread_mutex_t* getPthreadMutex() \/* non-const *\/ $/;"	f	class:muduo::MutexLock
holder_	muduo/base/Mutex.h	/^  pid_t holder_;  \/\/用来表示给互斥量上锁线程的tid$/;"	m	class:muduo::MutexLock
isLockedByThisThread	muduo/base/Mutex.h	/^  bool isLockedByThisThread() const     \/\/用来检查是否是当前线程给这个MutexLock对象加锁的$/;"	f	class:muduo::MutexLock
lock	muduo/base/Mutex.h	/^  void lock()$/;"	f	class:muduo::MutexLock
muduo	muduo/base/Mutex.h	/^namespace muduo$/;"	n
mutex_	muduo/base/Mutex.h	/^  MutexLock& mutex_;    \/\/变量的引用$/;"	m	class:muduo::MutexLockGuard
mutex_	muduo/base/Mutex.h	/^  pthread_mutex_t mutex_;   $/;"	m	class:muduo::MutexLock
owner_	muduo/base/Mutex.h	/^    MutexLock& owner_;$/;"	m	class:muduo::MutexLock::UnassignGuard
unassignHolder	muduo/base/Mutex.h	/^  void unassignHolder()   \/\/解锁时给holder_置零(在解锁前调用)$/;"	f	class:muduo::MutexLock
unlock	muduo/base/Mutex.h	/^  void unlock()$/;"	f	class:muduo::MutexLock
~MutexLock	muduo/base/Mutex.h	/^  ~MutexLock()$/;"	f	class:muduo::MutexLock
~MutexLockGuard	muduo/base/Mutex.h	/^  ~MutexLockGuard()$/;"	f	class:muduo::MutexLockGuard
~UnassignGuard	muduo/base/Mutex.h	/^    ~UnassignGuard()$/;"	f	class:muduo::MutexLock::UnassignGuard
clockTicksPerSecond	muduo/base/ProcessInfo.cc	/^int ProcessInfo::clockTicksPerSecond()$/;"	f	class:ProcessInfo
cpuTime	muduo/base/ProcessInfo.cc	/^ProcessInfo::CpuTime ProcessInfo::cpuTime()$/;"	f	class:ProcessInfo
detail	muduo/base/ProcessInfo.cc	/^namespace detail$/;"	n	namespace:muduo	file:
euid	muduo/base/ProcessInfo.cc	/^uid_t ProcessInfo::euid()$/;"	f	class:ProcessInfo
exePath	muduo/base/ProcessInfo.cc	/^string ProcessInfo::exePath()$/;"	f	class:ProcessInfo
fdDirFilter	muduo/base/ProcessInfo.cc	/^int fdDirFilter(const struct dirent* d)$/;"	f	namespace:muduo::detail
g_clockTicks	muduo/base/ProcessInfo.cc	/^int g_clockTicks = static_cast<int>(::sysconf(_SC_CLK_TCK));$/;"	m	namespace:muduo::detail	file:
g_pageSize	muduo/base/ProcessInfo.cc	/^int g_pageSize = static_cast<int>(::sysconf(_SC_PAGE_SIZE));$/;"	m	namespace:muduo::detail	file:
g_startTime	muduo/base/ProcessInfo.cc	/^Timestamp g_startTime = Timestamp::now();$/;"	m	namespace:muduo::detail	file:
hostname	muduo/base/ProcessInfo.cc	/^string ProcessInfo::hostname()$/;"	f	class:ProcessInfo
isDebugBuild	muduo/base/ProcessInfo.cc	/^bool ProcessInfo::isDebugBuild()$/;"	f	class:ProcessInfo
maxOpenFiles	muduo/base/ProcessInfo.cc	/^int ProcessInfo::maxOpenFiles()$/;"	f	class:ProcessInfo
muduo	muduo/base/ProcessInfo.cc	/^namespace muduo$/;"	n	file:
numThreads	muduo/base/ProcessInfo.cc	/^int ProcessInfo::numThreads()$/;"	f	class:ProcessInfo
openedFiles	muduo/base/ProcessInfo.cc	/^int ProcessInfo::openedFiles()$/;"	f	class:ProcessInfo
pageSize	muduo/base/ProcessInfo.cc	/^int ProcessInfo::pageSize()$/;"	f	class:ProcessInfo
pid	muduo/base/ProcessInfo.cc	/^pid_t ProcessInfo::pid()$/;"	f	class:ProcessInfo
pidString	muduo/base/ProcessInfo.cc	/^string ProcessInfo::pidString()$/;"	f	class:ProcessInfo
procStat	muduo/base/ProcessInfo.cc	/^string ProcessInfo::procStat()$/;"	f	class:ProcessInfo
procStatus	muduo/base/ProcessInfo.cc	/^string ProcessInfo::procStatus()$/;"	f	class:ProcessInfo
procname	muduo/base/ProcessInfo.cc	/^StringPiece ProcessInfo::procname(const string& stat)$/;"	f	class:ProcessInfo
procname	muduo/base/ProcessInfo.cc	/^string ProcessInfo::procname()$/;"	f	class:ProcessInfo
scanDir	muduo/base/ProcessInfo.cc	/^int scanDir(const char *dirpath, int (*filter)(const struct dirent *))$/;"	f	namespace:muduo::detail
startTime	muduo/base/ProcessInfo.cc	/^Timestamp ProcessInfo::startTime()$/;"	f	class:ProcessInfo
t_numOpenedFiles	muduo/base/ProcessInfo.cc	/^__thread int t_numOpenedFiles = 0;$/;"	m	namespace:muduo::detail	file:
t_pids	muduo/base/ProcessInfo.cc	/^__thread std::vector<pid_t>* t_pids = NULL;$/;"	m	namespace:muduo::detail	file:
taskDirFilter	muduo/base/ProcessInfo.cc	/^int taskDirFilter(const struct dirent* d)$/;"	f	namespace:muduo::detail
threadStat	muduo/base/ProcessInfo.cc	/^string ProcessInfo::threadStat()$/;"	f	class:ProcessInfo
threads	muduo/base/ProcessInfo.cc	/^std::vector<pid_t> ProcessInfo::threads()$/;"	f	class:ProcessInfo
uid	muduo/base/ProcessInfo.cc	/^uid_t ProcessInfo::uid()$/;"	f	class:ProcessInfo
username	muduo/base/ProcessInfo.cc	/^string ProcessInfo::username()$/;"	f	class:ProcessInfo
CpuTime	muduo/base/ProcessInfo.h	/^    CpuTime() : userSeconds(0.0), systemSeconds(0.0) { }$/;"	f	struct:muduo::ProcessInfo::CpuTime
CpuTime	muduo/base/ProcessInfo.h	/^  struct CpuTime$/;"	s	namespace:muduo::ProcessInfo
MUDUO_BASE_PROCESSINFO_H	muduo/base/ProcessInfo.h	12;"	d
ProcessInfo	muduo/base/ProcessInfo.h	/^namespace ProcessInfo$/;"	n	namespace:muduo
muduo	muduo/base/ProcessInfo.h	/^namespace muduo$/;"	n
systemSeconds	muduo/base/ProcessInfo.h	/^    double systemSeconds;$/;"	m	struct:muduo::ProcessInfo::CpuTime
userSeconds	muduo/base/ProcessInfo.h	/^    double userSeconds;$/;"	m	struct:muduo::ProcessInfo::CpuTime
MUDUO_BASE_SINGLETON_H	muduo/base/Singleton.h	7;"	d
Singleton	muduo/base/Singleton.h	/^class Singleton : boost::noncopyable$/;"	c	namespace:muduo
decltype	muduo/base/Singleton.h	/^  template <typename C> static char test(decltype(&C::no_destroy));$/;"	m	struct:muduo::detail::has_no_destroy
destroy	muduo/base/Singleton.h	/^  static void destroy()$/;"	f	class:muduo::Singleton
detail	muduo/base/Singleton.h	/^namespace detail$/;"	n	namespace:muduo
has_no_destroy	muduo/base/Singleton.h	/^struct has_no_destroy$/;"	s	namespace:muduo::detail
init	muduo/base/Singleton.h	/^  static void init()  $/;"	f	class:muduo::Singleton
instance	muduo/base/Singleton.h	/^  static T& instance()  \/\/返回static的唯一实例的引用$/;"	f	class:muduo::Singleton
muduo	muduo/base/Singleton.h	/^namespace muduo$/;"	n
ponce_	muduo/base/Singleton.h	/^  static pthread_once_t ponce_; $/;"	m	class:muduo::Singleton
ponce_	muduo/base/Singleton.h	/^pthread_once_t Singleton<T>::ponce_ = PTHREAD_ONCE_INIT;$/;"	m	class:muduo::Singleton
value	muduo/base/Singleton.h	/^  const static bool value = sizeof(test<T>(0)) == 1;$/;"	m	struct:muduo::detail::has_no_destroy
value_	muduo/base/Singleton.h	/^  static T*             value_;$/;"	m	class:muduo::Singleton
value_	muduo/base/Singleton.h	/^T* Singleton<T>::value_ = NULL;$/;"	m	class:muduo::Singleton
CopyToStdString	muduo/base/StringPiece.h	/^  void CopyToStdString(std::string* target) const {$/;"	f	class:muduo::StringPiece
CopyToString	muduo/base/StringPiece.h	/^  void CopyToString(string* target) const {$/;"	f	class:muduo::StringPiece
MUDUO_BASE_STRINGPIECE_H	muduo/base/StringPiece.h	41;"	d
STRINGPIECE_BINARY_PREDICATE	muduo/base/StringPiece.h	144;"	d
STRINGPIECE_BINARY_PREDICATE	muduo/base/StringPiece.h	153;"	d
StringArg	muduo/base/StringPiece.h	/^  StringArg(const char* str)$/;"	f	class:muduo::StringArg
StringArg	muduo/base/StringPiece.h	/^  StringArg(const std::string& str)$/;"	f	class:muduo::StringArg
StringArg	muduo/base/StringPiece.h	/^  StringArg(const string& str)$/;"	f	class:muduo::StringArg
StringArg	muduo/base/StringPiece.h	/^class StringArg \/\/ copyable$/;"	c	namespace:muduo
StringPiece	muduo/base/StringPiece.h	/^  StringPiece()$/;"	f	class:muduo::StringPiece
StringPiece	muduo/base/StringPiece.h	/^  StringPiece(const char* offset, int len)$/;"	f	class:muduo::StringPiece
StringPiece	muduo/base/StringPiece.h	/^  StringPiece(const char* str)$/;"	f	class:muduo::StringPiece
StringPiece	muduo/base/StringPiece.h	/^  StringPiece(const std::string& str)$/;"	f	class:muduo::StringPiece
StringPiece	muduo/base/StringPiece.h	/^  StringPiece(const string& str)$/;"	f	class:muduo::StringPiece
StringPiece	muduo/base/StringPiece.h	/^  StringPiece(const unsigned char* str)$/;"	f	class:muduo::StringPiece
StringPiece	muduo/base/StringPiece.h	/^class StringPiece {$/;"	c	namespace:muduo
__type_traits	muduo/base/StringPiece.h	/^template<> struct __type_traits<muduo::StringPiece> {$/;"	s
as_string	muduo/base/StringPiece.h	/^  string as_string() const {$/;"	f	class:muduo::StringPiece
begin	muduo/base/StringPiece.h	/^  const char* begin() const { return ptr_; }$/;"	f	class:muduo::StringPiece
c_str	muduo/base/StringPiece.h	/^  const char* c_str() const { return str_; }$/;"	f	class:muduo::StringArg
clear	muduo/base/StringPiece.h	/^  void clear() { ptr_ = NULL; length_ = 0; }$/;"	f	class:muduo::StringPiece
compare	muduo/base/StringPiece.h	/^  int compare(const StringPiece& x) const {$/;"	f	class:muduo::StringPiece
data	muduo/base/StringPiece.h	/^  const char* data() const { return ptr_; }$/;"	f	class:muduo::StringPiece
empty	muduo/base/StringPiece.h	/^  bool empty() const { return length_ == 0; }$/;"	f	class:muduo::StringPiece
end	muduo/base/StringPiece.h	/^  const char* end() const { return ptr_ + length_; }$/;"	f	class:muduo::StringPiece
has_trivial_assignment_operator	muduo/base/StringPiece.h	/^  typedef __true_type    has_trivial_assignment_operator;$/;"	t	struct:__type_traits
has_trivial_copy_constructor	muduo/base/StringPiece.h	/^  typedef __true_type    has_trivial_copy_constructor;$/;"	t	struct:__type_traits
has_trivial_default_constructor	muduo/base/StringPiece.h	/^  typedef __true_type    has_trivial_default_constructor;$/;"	t	struct:__type_traits
has_trivial_destructor	muduo/base/StringPiece.h	/^  typedef __true_type    has_trivial_destructor;$/;"	t	struct:__type_traits
is_POD_type	muduo/base/StringPiece.h	/^  typedef __true_type    is_POD_type;$/;"	t	struct:__type_traits
length_	muduo/base/StringPiece.h	/^  int           length_;$/;"	m	class:muduo::StringPiece
muduo	muduo/base/StringPiece.h	/^namespace muduo {$/;"	n
operator !=	muduo/base/StringPiece.h	/^  bool operator!=(const StringPiece& x) const {$/;"	f	class:muduo::StringPiece
operator ==	muduo/base/StringPiece.h	/^  bool operator==(const StringPiece& x) const {$/;"	f	class:muduo::StringPiece
operator []	muduo/base/StringPiece.h	/^  char operator[](int i) const { return ptr_[i]; }$/;"	f	class:muduo::StringPiece
ptr_	muduo/base/StringPiece.h	/^  const char*   ptr_;$/;"	m	class:muduo::StringPiece
remove_prefix	muduo/base/StringPiece.h	/^  void remove_prefix(int n) {$/;"	f	class:muduo::StringPiece
remove_suffix	muduo/base/StringPiece.h	/^  void remove_suffix(int n) {$/;"	f	class:muduo::StringPiece
set	muduo/base/StringPiece.h	/^  void set(const char* buffer, int len) { ptr_ = buffer; length_ = len; }$/;"	f	class:muduo::StringPiece
set	muduo/base/StringPiece.h	/^  void set(const char* str) {$/;"	f	class:muduo::StringPiece
set	muduo/base/StringPiece.h	/^  void set(const void* buffer, int len) {$/;"	f	class:muduo::StringPiece
size	muduo/base/StringPiece.h	/^  int size() const { return length_; }$/;"	f	class:muduo::StringPiece
starts_with	muduo/base/StringPiece.h	/^  bool starts_with(const StringPiece& x) const {$/;"	f	class:muduo::StringPiece
str_	muduo/base/StringPiece.h	/^  const char* str_;$/;"	m	class:muduo::StringArg
CurrentThread	muduo/base/Thread.cc	/^namespace CurrentThread$/;"	n	namespace:muduo	file:
Thread	muduo/base/Thread.cc	/^Thread::Thread(ThreadFunc&& func, const string& n)$/;"	f	class:Thread
Thread	muduo/base/Thread.cc	/^Thread::Thread(const ThreadFunc& func, const string& n)$/;"	f	class:Thread
ThreadData	muduo/base/Thread.cc	/^  ThreadData(const ThreadFunc& func,$/;"	f	struct:muduo::detail::ThreadData
ThreadData	muduo/base/Thread.cc	/^struct ThreadData$/;"	s	namespace:muduo::detail	file:
ThreadFunc	muduo/base/Thread.cc	/^  typedef muduo::Thread::ThreadFunc ThreadFunc;$/;"	t	struct:muduo::detail::ThreadData	file:
ThreadNameInitializer	muduo/base/Thread.cc	/^  ThreadNameInitializer()$/;"	f	class:muduo::detail::ThreadNameInitializer
ThreadNameInitializer	muduo/base/Thread.cc	/^class ThreadNameInitializer$/;"	c	namespace:muduo::detail	file:
afterFork	muduo/base/Thread.cc	/^void afterFork()$/;"	f	namespace:muduo::detail
cacheTid	muduo/base/Thread.cc	/^void CurrentThread::cacheTid()$/;"	f	class:CurrentThread
detail	muduo/base/Thread.cc	/^namespace detail$/;"	n	namespace:muduo	file:
func_	muduo/base/Thread.cc	/^  ThreadFunc func_;$/;"	m	struct:muduo::detail::ThreadData	file:
gettid	muduo/base/Thread.cc	/^pid_t gettid()$/;"	f	namespace:muduo::detail
init	muduo/base/Thread.cc	/^ThreadNameInitializer init;$/;"	m	namespace:muduo::detail	file:
isMainThread	muduo/base/Thread.cc	/^bool CurrentThread::isMainThread()$/;"	f	class:CurrentThread
join	muduo/base/Thread.cc	/^int Thread::join()  $/;"	f	class:Thread
muduo	muduo/base/Thread.cc	/^namespace muduo$/;"	n	file:
name_	muduo/base/Thread.cc	/^  string name_;$/;"	m	struct:muduo::detail::ThreadData	file:
numCreated_	muduo/base/Thread.cc	/^AtomicInt32 Thread::numCreated_;$/;"	m	class:Thread	file:
runInThread	muduo/base/Thread.cc	/^  void runInThread()$/;"	f	struct:muduo::detail::ThreadData
sameType	muduo/base/Thread.cc	/^  const bool sameType = boost::is_same<int, pid_t>::value;$/;"	m	namespace:muduo::CurrentThread	file:
setDefaultName	muduo/base/Thread.cc	/^void Thread::setDefaultName()$/;"	f	class:Thread
sleepUsec	muduo/base/Thread.cc	/^void CurrentThread::sleepUsec(int64_t usec)$/;"	f	class:CurrentThread
start	muduo/base/Thread.cc	/^void Thread::start()$/;"	f	class:Thread
startThread	muduo/base/Thread.cc	/^void* startThread(void* obj)$/;"	f	namespace:muduo::detail
t_cachedTid	muduo/base/Thread.cc	/^  __thread int t_cachedTid = 0;$/;"	m	namespace:muduo::CurrentThread	file:
t_threadName	muduo/base/Thread.cc	/^  __thread const char* t_threadName = "unknown";$/;"	m	namespace:muduo::CurrentThread	file:
t_tidString	muduo/base/Thread.cc	/^  __thread char t_tidString[32];$/;"	m	namespace:muduo::CurrentThread	file:
t_tidStringLength	muduo/base/Thread.cc	/^  __thread int t_tidStringLength = 6;$/;"	m	namespace:muduo::CurrentThread	file:
wkTid_	muduo/base/Thread.cc	/^  boost::weak_ptr<pid_t> wkTid_;$/;"	m	struct:muduo::detail::ThreadData	file:
~Thread	muduo/base/Thread.cc	/^Thread::~Thread()$/;"	f	class:Thread
MUDUO_BASE_THREAD_H	muduo/base/Thread.h	7;"	d
Thread	muduo/base/Thread.h	/^class Thread : boost::noncopyable$/;"	c	namespace:muduo
ThreadFunc	muduo/base/Thread.h	/^  typedef boost::function<void ()> ThreadFunc;$/;"	t	class:muduo::Thread
func_	muduo/base/Thread.h	/^  ThreadFunc func_;$/;"	m	class:muduo::Thread
joined_	muduo/base/Thread.h	/^  bool       joined_;$/;"	m	class:muduo::Thread
muduo	muduo/base/Thread.h	/^namespace muduo$/;"	n
name	muduo/base/Thread.h	/^  const string& name() const { return name_; }$/;"	f	class:muduo::Thread
name_	muduo/base/Thread.h	/^  string     name_;$/;"	m	class:muduo::Thread
numCreated	muduo/base/Thread.h	/^  static int numCreated() { return numCreated_.get(); }$/;"	f	class:muduo::Thread
numCreated_	muduo/base/Thread.h	/^  static AtomicInt32 numCreated_;$/;"	m	class:muduo::Thread
pthreadId_	muduo/base/Thread.h	/^  pthread_t  pthreadId_;$/;"	m	class:muduo::Thread
started	muduo/base/Thread.h	/^  bool started() const { return started_; }$/;"	f	class:muduo::Thread
started_	muduo/base/Thread.h	/^  bool       started_;$/;"	m	class:muduo::Thread
tid	muduo/base/Thread.h	/^  pid_t tid() const { return *tid_; }$/;"	f	class:muduo::Thread
tid_	muduo/base/Thread.h	/^  boost::shared_ptr<pid_t> tid_;$/;"	m	class:muduo::Thread
MUDUO_BASE_THREADLOCAL_H	muduo/base/ThreadLocal.h	7;"	d
ThreadLocal	muduo/base/ThreadLocal.h	/^  ThreadLocal()$/;"	f	class:muduo::ThreadLocal
ThreadLocal	muduo/base/ThreadLocal.h	/^class ThreadLocal : boost::noncopyable$/;"	c	namespace:muduo
destructor	muduo/base/ThreadLocal.h	/^  static void destructor(void *x)$/;"	f	class:muduo::ThreadLocal
muduo	muduo/base/ThreadLocal.h	/^namespace muduo$/;"	n
pkey_	muduo/base/ThreadLocal.h	/^  pthread_key_t pkey_;$/;"	m	class:muduo::ThreadLocal
value	muduo/base/ThreadLocal.h	/^  T& value()$/;"	f	class:muduo::ThreadLocal
~ThreadLocal	muduo/base/ThreadLocal.h	/^  ~ThreadLocal()$/;"	f	class:muduo::ThreadLocal
Deleter	muduo/base/ThreadLocalSingleton.h	/^    Deleter()$/;"	f	class:muduo::ThreadLocalSingleton::Deleter
Deleter	muduo/base/ThreadLocalSingleton.h	/^  class Deleter$/;"	c	class:muduo::ThreadLocalSingleton
MUDUO_BASE_THREADLOCALSINGLETON_H	muduo/base/ThreadLocalSingleton.h	7;"	d
ThreadLocalSingleton	muduo/base/ThreadLocalSingleton.h	/^class ThreadLocalSingleton : boost::noncopyable$/;"	c	namespace:muduo
deleter_	muduo/base/ThreadLocalSingleton.h	/^  static Deleter deleter_;$/;"	m	class:muduo::ThreadLocalSingleton
deleter_	muduo/base/ThreadLocalSingleton.h	/^typename ThreadLocalSingleton<T>::Deleter ThreadLocalSingleton<T>::deleter_;$/;"	m	class:muduo::ThreadLocalSingleton
destructor	muduo/base/ThreadLocalSingleton.h	/^  static void destructor(void* obj)$/;"	f	class:muduo::ThreadLocalSingleton
instance	muduo/base/ThreadLocalSingleton.h	/^  static T& instance()$/;"	f	class:muduo::ThreadLocalSingleton
muduo	muduo/base/ThreadLocalSingleton.h	/^namespace muduo$/;"	n
pkey_	muduo/base/ThreadLocalSingleton.h	/^    pthread_key_t pkey_;$/;"	m	class:muduo::ThreadLocalSingleton::Deleter
pointer	muduo/base/ThreadLocalSingleton.h	/^  static T* pointer()$/;"	f	class:muduo::ThreadLocalSingleton
set	muduo/base/ThreadLocalSingleton.h	/^    void set(T* newObj)$/;"	f	class:muduo::ThreadLocalSingleton::Deleter
t_value_	muduo/base/ThreadLocalSingleton.h	/^  static __thread T* t_value_;$/;"	m	class:muduo::ThreadLocalSingleton
t_value_	muduo/base/ThreadLocalSingleton.h	/^__thread T* ThreadLocalSingleton<T>::t_value_ = 0;$/;"	m	class:muduo::ThreadLocalSingleton
~Deleter	muduo/base/ThreadLocalSingleton.h	/^    ~Deleter()$/;"	f	class:muduo::ThreadLocalSingleton::Deleter
ThreadPool	muduo/base/ThreadPool.cc	/^ThreadPool::ThreadPool(const string& nameArg)$/;"	f	class:ThreadPool
isFull	muduo/base/ThreadPool.cc	/^bool ThreadPool::isFull() const$/;"	f	class:ThreadPool
queueSize	muduo/base/ThreadPool.cc	/^size_t ThreadPool::queueSize() const$/;"	f	class:ThreadPool
run	muduo/base/ThreadPool.cc	/^void ThreadPool::run(Task&& task)$/;"	f	class:ThreadPool
run	muduo/base/ThreadPool.cc	/^void ThreadPool::run(const Task& task)$/;"	f	class:ThreadPool
runInThread	muduo/base/ThreadPool.cc	/^void ThreadPool::runInThread()$/;"	f	class:ThreadPool
start	muduo/base/ThreadPool.cc	/^void ThreadPool::start(int numThreads)$/;"	f	class:ThreadPool
stop	muduo/base/ThreadPool.cc	/^void ThreadPool::stop()$/;"	f	class:ThreadPool
take	muduo/base/ThreadPool.cc	/^ThreadPool::Task ThreadPool::take()$/;"	f	class:ThreadPool
~ThreadPool	muduo/base/ThreadPool.cc	/^ThreadPool::~ThreadPool()$/;"	f	class:ThreadPool
MUDUO_BASE_THREADPOOL_H	muduo/base/ThreadPool.h	7;"	d
Task	muduo/base/ThreadPool.h	/^  typedef boost::function<void ()> Task;$/;"	t	class:muduo::ThreadPool
ThreadPool	muduo/base/ThreadPool.h	/^class ThreadPool : boost::noncopyable$/;"	c	namespace:muduo
maxQueueSize_	muduo/base/ThreadPool.h	/^  size_t maxQueueSize_;$/;"	m	class:muduo::ThreadPool
muduo	muduo/base/ThreadPool.h	/^namespace muduo$/;"	n
mutex_	muduo/base/ThreadPool.h	/^  mutable MutexLock mutex_;$/;"	m	class:muduo::ThreadPool
name	muduo/base/ThreadPool.h	/^  const string& name() const$/;"	f	class:muduo::ThreadPool
name_	muduo/base/ThreadPool.h	/^  string name_;$/;"	m	class:muduo::ThreadPool
notEmpty_	muduo/base/ThreadPool.h	/^  Condition notEmpty_;$/;"	m	class:muduo::ThreadPool
notFull_	muduo/base/ThreadPool.h	/^  Condition notFull_;$/;"	m	class:muduo::ThreadPool
queue_	muduo/base/ThreadPool.h	/^  std::deque<Task> queue_;$/;"	m	class:muduo::ThreadPool
running_	muduo/base/ThreadPool.h	/^  bool running_;$/;"	m	class:muduo::ThreadPool
setMaxQueueSize	muduo/base/ThreadPool.h	/^  void setMaxQueueSize(int maxSize) { maxQueueSize_ = maxSize; }$/;"	f	class:muduo::ThreadPool
setThreadInitCallback	muduo/base/ThreadPool.h	/^  void setThreadInitCallback(const Task& cb)$/;"	f	class:muduo::ThreadPool
threadInitCallback_	muduo/base/ThreadPool.h	/^  Task threadInitCallback_;$/;"	m	class:muduo::ThreadPool
threads_	muduo/base/ThreadPool.h	/^  boost::ptr_vector<muduo::Thread> threads_;$/;"	m	class:muduo::ThreadPool
Comp	muduo/base/TimeZone.cc	/^  Comp(bool gmt)$/;"	f	struct:muduo::detail::Comp
Comp	muduo/base/TimeZone.cc	/^struct Comp$/;"	s	namespace:muduo::detail	file:
Data	muduo/base/TimeZone.cc	/^struct TimeZone::Data$/;"	s	class:TimeZone	file:
File	muduo/base/TimeZone.cc	/^  File(const char* file)$/;"	f	class:muduo::detail::File
File	muduo/base/TimeZone.cc	/^class File : boost::noncopyable$/;"	c	namespace:muduo::detail	file:
Localtime	muduo/base/TimeZone.cc	/^  Localtime(time_t offset, bool dst, int arrb)$/;"	f	struct:muduo::detail::Localtime
Localtime	muduo/base/TimeZone.cc	/^struct Localtime$/;"	s	namespace:muduo::detail	file:
TimeZone	muduo/base/TimeZone.cc	/^TimeZone::TimeZone(const char* zonefile)$/;"	f	class:TimeZone
TimeZone	muduo/base/TimeZone.cc	/^TimeZone::TimeZone(int eastOfUtc, const char* name)$/;"	f	class:TimeZone
Transition	muduo/base/TimeZone.cc	/^  Transition(time_t t, time_t l, int localIdx)$/;"	f	struct:muduo::detail::Transition
Transition	muduo/base/TimeZone.cc	/^struct Transition$/;"	s	namespace:muduo::detail	file:
abbreviation	muduo/base/TimeZone.cc	/^  string abbreviation;$/;"	m	struct:TimeZone::Data	file:
arrbIdx	muduo/base/TimeZone.cc	/^  int arrbIdx;$/;"	m	struct:muduo::detail::Localtime	file:
compareGmt	muduo/base/TimeZone.cc	/^  bool compareGmt;$/;"	m	struct:muduo::detail::Comp	file:
detail	muduo/base/TimeZone.cc	/^namespace detail$/;"	n	namespace:muduo	file:
equal	muduo/base/TimeZone.cc	/^  bool equal(const Transition& lhs, const Transition& rhs) const$/;"	f	struct:muduo::detail::Comp
fillHMS	muduo/base/TimeZone.cc	/^inline void fillHMS(unsigned seconds, struct tm* utc)$/;"	f	namespace:muduo::detail
findLocaltime	muduo/base/TimeZone.cc	/^const Localtime* findLocaltime(const TimeZone::Data& data, Transition sentry, Comp comp)$/;"	f	namespace:muduo::detail
fp_	muduo/base/TimeZone.cc	/^  FILE* fp_;$/;"	m	class:muduo::detail::File	file:
fromLocalTime	muduo/base/TimeZone.cc	/^time_t TimeZone::fromLocalTime(const struct tm& localTm) const$/;"	f	class:TimeZone
fromUtcTime	muduo/base/TimeZone.cc	/^time_t TimeZone::fromUtcTime(const struct tm& utc)$/;"	f	class:TimeZone
fromUtcTime	muduo/base/TimeZone.cc	/^time_t TimeZone::fromUtcTime(int year, int month, int day,$/;"	f	class:TimeZone
gmtOffset	muduo/base/TimeZone.cc	/^  time_t gmtOffset;$/;"	m	struct:muduo::detail::Localtime	file:
gmttime	muduo/base/TimeZone.cc	/^  time_t gmttime;$/;"	m	struct:muduo::detail::Transition	file:
isDst	muduo/base/TimeZone.cc	/^  bool isDst;$/;"	m	struct:muduo::detail::Localtime	file:
kSecondsPerDay	muduo/base/TimeZone.cc	/^const int kSecondsPerDay = 24*60*60;$/;"	m	namespace:muduo	file:
localtime	muduo/base/TimeZone.cc	/^  time_t localtime;$/;"	m	struct:muduo::detail::Transition	file:
localtimeIdx	muduo/base/TimeZone.cc	/^  int localtimeIdx;$/;"	m	struct:muduo::detail::Transition	file:
localtimes	muduo/base/TimeZone.cc	/^  vector<detail::Localtime> localtimes;$/;"	m	struct:TimeZone::Data	file:
muduo	muduo/base/TimeZone.cc	/^namespace muduo$/;"	n	file:
names	muduo/base/TimeZone.cc	/^  vector<string> names;$/;"	m	struct:TimeZone::Data	file:
operator ()	muduo/base/TimeZone.cc	/^  bool operator()(const Transition& lhs, const Transition& rhs) const$/;"	f	struct:muduo::detail::Comp
readBytes	muduo/base/TimeZone.cc	/^  string readBytes(int n)$/;"	f	class:muduo::detail::File
readInt32	muduo/base/TimeZone.cc	/^  int32_t readInt32()$/;"	f	class:muduo::detail::File
readTimeZoneFile	muduo/base/TimeZone.cc	/^bool readTimeZoneFile(const char* zonefile, struct TimeZone::Data* data)$/;"	f	namespace:muduo::detail
readUInt8	muduo/base/TimeZone.cc	/^  uint8_t readUInt8()$/;"	f	class:muduo::detail::File
toLocalTime	muduo/base/TimeZone.cc	/^struct tm TimeZone::toLocalTime(time_t seconds) const$/;"	f	class:TimeZone
toUtcTime	muduo/base/TimeZone.cc	/^struct tm TimeZone::toUtcTime(time_t secondsSinceEpoch, bool yday)$/;"	f	class:TimeZone
transitions	muduo/base/TimeZone.cc	/^  vector<detail::Transition> transitions;$/;"	m	struct:TimeZone::Data	file:
valid	muduo/base/TimeZone.cc	/^  bool valid() const { return fp_; }$/;"	f	class:muduo::detail::File
~File	muduo/base/TimeZone.cc	/^  ~File()$/;"	f	class:muduo::detail::File
MUDUO_BASE_TIMEZONE_H	muduo/base/TimeZone.h	7;"	d
TimeZone	muduo/base/TimeZone.h	/^  TimeZone() {}  \/\/ an invalid timezone$/;"	f	class:muduo::TimeZone
TimeZone	muduo/base/TimeZone.h	/^class TimeZone : public muduo::copyable$/;"	c	namespace:muduo
data_	muduo/base/TimeZone.h	/^  boost::shared_ptr<Data> data_;$/;"	m	class:muduo::TimeZone
muduo	muduo/base/TimeZone.h	/^namespace muduo$/;"	n
valid	muduo/base/TimeZone.h	/^  bool valid() const$/;"	f	class:muduo::TimeZone
__STDC_FORMAT_MACROS	muduo/base/Timestamp.cc	7;"	d	file:
now	muduo/base/Timestamp.cc	/^Timestamp Timestamp::now()$/;"	f	class:Timestamp
toFormattedString	muduo/base/Timestamp.cc	/^string Timestamp::toFormattedString(bool showMicroseconds) const$/;"	f	class:Timestamp
toString	muduo/base/Timestamp.cc	/^string Timestamp::toString() const$/;"	f	class:Timestamp
MUDUO_BASE_TIMESTAMP_H	muduo/base/Timestamp.h	2;"	d
Timestamp	muduo/base/Timestamp.h	/^  Timestamp()$/;"	f	class:muduo::Timestamp
Timestamp	muduo/base/Timestamp.h	/^  explicit Timestamp(int64_t microSecondsSinceEpochArg)$/;"	f	class:muduo::Timestamp
Timestamp	muduo/base/Timestamp.h	/^class Timestamp : public muduo::copyable,$/;"	c	namespace:muduo
addTime	muduo/base/Timestamp.h	/^inline Timestamp addTime(Timestamp timestamp, double seconds)$/;"	f	namespace:muduo
fromUnixTime	muduo/base/Timestamp.h	/^  static Timestamp fromUnixTime(time_t t)$/;"	f	class:muduo::Timestamp
fromUnixTime	muduo/base/Timestamp.h	/^  static Timestamp fromUnixTime(time_t t, int microseconds)$/;"	f	class:muduo::Timestamp
invalid	muduo/base/Timestamp.h	/^  static Timestamp invalid()$/;"	f	class:muduo::Timestamp
kMicroSecondsPerSecond	muduo/base/Timestamp.h	/^  static const int kMicroSecondsPerSecond = 1000 * 1000;$/;"	m	class:muduo::Timestamp
microSecondsSinceEpoch	muduo/base/Timestamp.h	/^  int64_t microSecondsSinceEpoch() const { return microSecondsSinceEpoch_; }$/;"	f	class:muduo::Timestamp
microSecondsSinceEpoch_	muduo/base/Timestamp.h	/^  int64_t microSecondsSinceEpoch_;$/;"	m	class:muduo::Timestamp
muduo	muduo/base/Timestamp.h	/^namespace muduo$/;"	n
operator <	muduo/base/Timestamp.h	/^inline bool operator<(Timestamp lhs, Timestamp rhs)$/;"	f	namespace:muduo
operator ==	muduo/base/Timestamp.h	/^inline bool operator==(Timestamp lhs, Timestamp rhs)$/;"	f	namespace:muduo
secondsSinceEpoch	muduo/base/Timestamp.h	/^  time_t secondsSinceEpoch() const$/;"	f	class:muduo::Timestamp
swap	muduo/base/Timestamp.h	/^  void swap(Timestamp& that)$/;"	f	class:muduo::Timestamp
timeDifference	muduo/base/Timestamp.h	/^inline double timeDifference(Timestamp high, Timestamp low)$/;"	f	namespace:muduo
valid	muduo/base/Timestamp.h	/^  bool valid() const { return microSecondsSinceEpoch_ > 0; }$/;"	f	class:muduo::Timestamp
MUDUO_BASE_TYPES_H	muduo/base/Types.h	2;"	d
down_cast	muduo/base/Types.h	/^inline To down_cast(From* f)                     \/\/ so we only accept pointers$/;"	f	namespace:muduo
implicit_cast	muduo/base/Types.h	/^inline To implicit_cast(From const &f)$/;"	f	namespace:muduo
muduo	muduo/base/Types.h	/^namespace muduo$/;"	n
MUDUO_BASE_WEAKCALLBACK_H	muduo/base/WeakCallback.h	10;"	d
WeakCallback	muduo/base/WeakCallback.h	/^  WeakCallback(const boost::weak_ptr<CLASS>& object,$/;"	f	class:muduo::WeakCallback
WeakCallback	muduo/base/WeakCallback.h	/^class WeakCallback$/;"	c	namespace:muduo
function_	muduo/base/WeakCallback.h	/^  std::function<void (CLASS*, ARGS...)> function_;$/;"	m	class:muduo::WeakCallback
makeWeakCallback	muduo/base/WeakCallback.h	/^WeakCallback<CLASS, ARGS...> makeWeakCallback(const boost::shared_ptr<CLASS>& object,$/;"	f	namespace:muduo
muduo	muduo/base/WeakCallback.h	/^namespace muduo$/;"	n
object_	muduo/base/WeakCallback.h	/^  boost::weak_ptr<CLASS> object_;$/;"	m	class:muduo::WeakCallback
operator ()	muduo/base/WeakCallback.h	/^  void operator()(ARGS&&... args) const$/;"	f	class:muduo::WeakCallback
MUDUO_BASE_COPYABLE_H	muduo/base/copyable.h	2;"	d
copyable	muduo/base/copyable.h	/^class copyable$/;"	c	namespace:muduo
muduo	muduo/base/copyable.h	/^namespace muduo$/;"	n
asyncOutput	muduo/base/tests/AsyncLogging_test.cc	/^void asyncOutput(const char* msg, int len)$/;"	f
bench	muduo/base/tests/AsyncLogging_test.cc	/^void bench(bool longLog)$/;"	f
g_asyncLog	muduo/base/tests/AsyncLogging_test.cc	/^muduo::AsyncLogging* g_asyncLog = NULL;$/;"	v
kRollSize	muduo/base/tests/AsyncLogging_test.cc	/^int kRollSize = 500*1000*1000;$/;"	v
main	muduo/base/tests/AsyncLogging_test.cc	/^int main(int argc, char* argv[])$/;"	f
main	muduo/base/tests/Atomic_unittest.cc	/^int main()$/;"	f
Bench	muduo/base/tests/BlockingQueue_bench.cc	/^  Bench(int numThreads)$/;"	f	class:Bench
Bench	muduo/base/tests/BlockingQueue_bench.cc	/^class Bench$/;"	c	file:
joinAll	muduo/base/tests/BlockingQueue_bench.cc	/^  void joinAll()$/;"	f	class:Bench
latch_	muduo/base/tests/BlockingQueue_bench.cc	/^  muduo::CountDownLatch latch_;$/;"	m	class:Bench	file:
main	muduo/base/tests/BlockingQueue_bench.cc	/^int main(int argc, char* argv[])$/;"	f
queue_	muduo/base/tests/BlockingQueue_bench.cc	/^  muduo::BlockingQueue<muduo::Timestamp> queue_;$/;"	m	class:Bench	file:
run	muduo/base/tests/BlockingQueue_bench.cc	/^  void run(int times)$/;"	f	class:Bench
threadFunc	muduo/base/tests/BlockingQueue_bench.cc	/^  void threadFunc()$/;"	f	class:Bench	file:
threads_	muduo/base/tests/BlockingQueue_bench.cc	/^  boost::ptr_vector<muduo::Thread> threads_;$/;"	m	class:Bench	file:
Test	muduo/base/tests/BlockingQueue_test.cc	/^  Test(int numThreads)$/;"	f	class:Test
Test	muduo/base/tests/BlockingQueue_test.cc	/^class Test$/;"	c	file:
joinAll	muduo/base/tests/BlockingQueue_test.cc	/^  void joinAll()$/;"	f	class:Test
latch_	muduo/base/tests/BlockingQueue_test.cc	/^  muduo::CountDownLatch latch_;$/;"	m	class:Test	file:
main	muduo/base/tests/BlockingQueue_test.cc	/^int main()$/;"	f
queue_	muduo/base/tests/BlockingQueue_test.cc	/^  muduo::BlockingQueue<std::string> queue_;$/;"	m	class:Test	file:
run	muduo/base/tests/BlockingQueue_test.cc	/^  void run(int times)$/;"	f	class:Test
testMove	muduo/base/tests/BlockingQueue_test.cc	/^void testMove()$/;"	f
threadFunc	muduo/base/tests/BlockingQueue_test.cc	/^  void threadFunc()$/;"	f	class:Test	file:
threads_	muduo/base/tests/BlockingQueue_test.cc	/^  boost::ptr_vector<muduo::Thread> threads_;$/;"	m	class:Test	file:
Test	muduo/base/tests/BoundedBlockingQueue_test.cc	/^  Test(int numThreads)$/;"	f	class:Test
Test	muduo/base/tests/BoundedBlockingQueue_test.cc	/^class Test$/;"	c	file:
joinAll	muduo/base/tests/BoundedBlockingQueue_test.cc	/^  void joinAll()$/;"	f	class:Test
latch_	muduo/base/tests/BoundedBlockingQueue_test.cc	/^  muduo::CountDownLatch latch_;$/;"	m	class:Test	file:
main	muduo/base/tests/BoundedBlockingQueue_test.cc	/^int main()$/;"	f
queue_	muduo/base/tests/BoundedBlockingQueue_test.cc	/^  muduo::BoundedBlockingQueue<std::string> queue_;$/;"	m	class:Test	file:
run	muduo/base/tests/BoundedBlockingQueue_test.cc	/^  void run(int times)$/;"	f	class:Test
threadFunc	muduo/base/tests/BoundedBlockingQueue_test.cc	/^  void threadFunc()$/;"	f	class:Test	file:
threads_	muduo/base/tests/BoundedBlockingQueue_test.cc	/^  boost::ptr_vector<muduo::Thread> threads_;$/;"	m	class:Test	file:
daysOfMonth	muduo/base/tests/Date_unittest.cc	/^int daysOfMonth(int year, int month)$/;"	f
isLeapYear	muduo/base/tests/Date_unittest.cc	/^int isLeapYear(int year)$/;"	f
kMonthsOfYear	muduo/base/tests/Date_unittest.cc	/^const int kMonthsOfYear = 12;$/;"	v
main	muduo/base/tests/Date_unittest.cc	/^int main()$/;"	f
passByConstReference	muduo/base/tests/Date_unittest.cc	/^void passByConstReference(const Date& x)$/;"	f
passByValue	muduo/base/tests/Date_unittest.cc	/^void passByValue(Date x)$/;"	f
Bar	muduo/base/tests/Exception_test.cc	/^class Bar$/;"	c	file:
foo	muduo/base/tests/Exception_test.cc	/^void foo()$/;"	f
main	muduo/base/tests/Exception_test.cc	/^int main()$/;"	f
test	muduo/base/tests/Exception_test.cc	/^  void test()$/;"	f	class:Bar
__STDC_FORMAT_MACROS	muduo/base/tests/FileUtil_test.cc	4;"	d	file:
main	muduo/base/tests/FileUtil_test.cc	/^int main()$/;"	f
main	muduo/base/tests/Fork_test.cc	/^int main()$/;"	f
print	muduo/base/tests/Fork_test.cc	/^void print()$/;"	f
x	muduo/base/tests/Fork_test.cc	/^__thread int x = 0;$/;"	m	namespace:__anon1	file:
main	muduo/base/tests/GzipFile_test.cc	/^int main()$/;"	f
flushFunc	muduo/base/tests/LogFile_test.cc	/^void flushFunc()$/;"	f
g_logFile	muduo/base/tests/LogFile_test.cc	/^boost::scoped_ptr<muduo::LogFile> g_logFile;$/;"	v
main	muduo/base/tests/LogFile_test.cc	/^int main(int argc, char* argv[])$/;"	f
outputFunc	muduo/base/tests/LogFile_test.cc	/^void outputFunc(const char* msg, int len)$/;"	f
N	muduo/base/tests/LogStream_bench.cc	/^const size_t N = 1000000;$/;"	v
__STDC_FORMAT_MACROS	muduo/base/tests/LogStream_bench.cc	6;"	d	file:
benchLogStream	muduo/base/tests/LogStream_bench.cc	/^void benchLogStream()$/;"	f
benchPrintf	muduo/base/tests/LogStream_bench.cc	/^void benchPrintf(const char* fmt)$/;"	f
benchStringStream	muduo/base/tests/LogStream_bench.cc	/^void benchStringStream()$/;"	f
main	muduo/base/tests/LogStream_bench.cc	/^int main()$/;"	f
BOOST_AUTO_TEST_CASE	muduo/base/tests/LogStream_test.cc	/^BOOST_AUTO_TEST_CASE(testLogStreamBooleans)$/;"	f
BOOST_AUTO_TEST_CASE	muduo/base/tests/LogStream_test.cc	/^BOOST_AUTO_TEST_CASE(testLogStreamFloats)$/;"	f
BOOST_AUTO_TEST_CASE	muduo/base/tests/LogStream_test.cc	/^BOOST_AUTO_TEST_CASE(testLogStreamFmts)$/;"	f
BOOST_AUTO_TEST_CASE	muduo/base/tests/LogStream_test.cc	/^BOOST_AUTO_TEST_CASE(testLogStreamIntegerLimits)$/;"	f
BOOST_AUTO_TEST_CASE	muduo/base/tests/LogStream_test.cc	/^BOOST_AUTO_TEST_CASE(testLogStreamIntegers)$/;"	f
BOOST_AUTO_TEST_CASE	muduo/base/tests/LogStream_test.cc	/^BOOST_AUTO_TEST_CASE(testLogStreamLong)$/;"	f
BOOST_AUTO_TEST_CASE	muduo/base/tests/LogStream_test.cc	/^BOOST_AUTO_TEST_CASE(testLogStreamStrings)$/;"	f
BOOST_AUTO_TEST_CASE	muduo/base/tests/LogStream_test.cc	/^BOOST_AUTO_TEST_CASE(testLogStreamVoid)$/;"	f
BOOST_TEST_DYN_LINK	muduo/base/tests/LogStream_test.cc	8;"	d	file:
BOOST_TEST_MAIN	muduo/base/tests/LogStream_test.cc	7;"	d	file:
bench	muduo/base/tests/Logging_test.cc	/^void bench(const char* type)$/;"	f
dummyOutput	muduo/base/tests/Logging_test.cc	/^void dummyOutput(const char* msg, int len)$/;"	f
g_file	muduo/base/tests/Logging_test.cc	/^FILE* g_file;$/;"	v
g_logFile	muduo/base/tests/Logging_test.cc	/^boost::scoped_ptr<muduo::LogFile> g_logFile;$/;"	v
g_total	muduo/base/tests/Logging_test.cc	/^int g_total;$/;"	v
logInThread	muduo/base/tests/Logging_test.cc	/^void logInThread()$/;"	f
main	muduo/base/tests/Logging_test.cc	/^int main()$/;"	f
foo	muduo/base/tests/Mutex_test.cc	/^int foo()$/;"	f
g_count	muduo/base/tests/Mutex_test.cc	/^int g_count = 0;$/;"	v
g_vec	muduo/base/tests/Mutex_test.cc	/^vector<int> g_vec;$/;"	v
kCount	muduo/base/tests/Mutex_test.cc	/^const int kCount = 10*1000*1000;$/;"	v
main	muduo/base/tests/Mutex_test.cc	/^int main()$/;"	f
threadFunc	muduo/base/tests/Mutex_test.cc	/^void threadFunc()$/;"	f
__STDC_FORMAT_MACROS	muduo/base/tests/ProcessInfo_test.cc	3;"	d	file:
main	muduo/base/tests/ProcessInfo_test.cc	/^int main()$/;"	f
STL	muduo/base/tests/SingletonThreadLocal_test.cc	31;"	d	file:
Test	muduo/base/tests/SingletonThreadLocal_test.cc	/^  Test()$/;"	f	class:Test
Test	muduo/base/tests/SingletonThreadLocal_test.cc	/^class Test : boost::noncopyable$/;"	c	file:
main	muduo/base/tests/SingletonThreadLocal_test.cc	/^int main()$/;"	f
name	muduo/base/tests/SingletonThreadLocal_test.cc	/^  const muduo::string& name() const { return name_; }$/;"	f	class:Test
name_	muduo/base/tests/SingletonThreadLocal_test.cc	/^  muduo::string name_;$/;"	m	class:Test	file:
print	muduo/base/tests/SingletonThreadLocal_test.cc	/^void print()$/;"	f
setName	muduo/base/tests/SingletonThreadLocal_test.cc	/^  void setName(const muduo::string& n) { name_ = n; }$/;"	f	class:Test
threadFunc	muduo/base/tests/SingletonThreadLocal_test.cc	/^void threadFunc(const char* changeTo)$/;"	f
~Test	muduo/base/tests/SingletonThreadLocal_test.cc	/^  ~Test()$/;"	f	class:Test
Test	muduo/base/tests/Singleton_test.cc	/^  Test()$/;"	f	class:Test
Test	muduo/base/tests/Singleton_test.cc	/^class Test : boost::noncopyable$/;"	c	file:
TestNoDestroy	muduo/base/tests/Singleton_test.cc	/^  TestNoDestroy()$/;"	f	class:TestNoDestroy
TestNoDestroy	muduo/base/tests/Singleton_test.cc	/^class TestNoDestroy : boost::noncopyable$/;"	c	file:
main	muduo/base/tests/Singleton_test.cc	/^int main()$/;"	f
name	muduo/base/tests/Singleton_test.cc	/^  const muduo::string& name() const { return name_; }$/;"	f	class:Test
name_	muduo/base/tests/Singleton_test.cc	/^  muduo::string name_;$/;"	m	class:Test	file:
setName	muduo/base/tests/Singleton_test.cc	/^  void setName(const muduo::string& n) { name_ = n; }$/;"	f	class:Test
threadFunc	muduo/base/tests/Singleton_test.cc	/^void threadFunc()$/;"	f
~Test	muduo/base/tests/Singleton_test.cc	/^  ~Test()$/;"	f	class:Test
~TestNoDestroy	muduo/base/tests/Singleton_test.cc	/^  ~TestNoDestroy()$/;"	f	class:TestNoDestroy
Test	muduo/base/tests/ThreadLocalSingleton_test.cc	/^  Test()$/;"	f	class:Test
Test	muduo/base/tests/ThreadLocalSingleton_test.cc	/^class Test : boost::noncopyable$/;"	c	file:
main	muduo/base/tests/ThreadLocalSingleton_test.cc	/^int main()$/;"	f
name	muduo/base/tests/ThreadLocalSingleton_test.cc	/^  const muduo::string& name() const { return name_; }$/;"	f	class:Test
name_	muduo/base/tests/ThreadLocalSingleton_test.cc	/^  muduo::string name_;$/;"	m	class:Test	file:
setName	muduo/base/tests/ThreadLocalSingleton_test.cc	/^  void setName(const muduo::string& n) { name_ = n; }$/;"	f	class:Test
threadFunc	muduo/base/tests/ThreadLocalSingleton_test.cc	/^void threadFunc(const char* changeTo)$/;"	f
~Test	muduo/base/tests/ThreadLocalSingleton_test.cc	/^  ~Test()$/;"	f	class:Test
Test	muduo/base/tests/ThreadLocal_test.cc	/^  Test()$/;"	f	class:Test
Test	muduo/base/tests/ThreadLocal_test.cc	/^class Test : boost::noncopyable$/;"	c	file:
main	muduo/base/tests/ThreadLocal_test.cc	/^int main()$/;"	f
name	muduo/base/tests/ThreadLocal_test.cc	/^  const muduo::string& name() const { return name_; }$/;"	f	class:Test
name_	muduo/base/tests/ThreadLocal_test.cc	/^  muduo::string name_;$/;"	m	class:Test	file:
print	muduo/base/tests/ThreadLocal_test.cc	/^void print()$/;"	f
setName	muduo/base/tests/ThreadLocal_test.cc	/^  void setName(const muduo::string& n) { name_ = n; }$/;"	f	class:Test
testObj1	muduo/base/tests/ThreadLocal_test.cc	/^muduo::ThreadLocal<Test> testObj1;$/;"	v
testObj2	muduo/base/tests/ThreadLocal_test.cc	/^muduo::ThreadLocal<Test> testObj2;$/;"	v
threadFunc	muduo/base/tests/ThreadLocal_test.cc	/^void threadFunc()$/;"	f
~Test	muduo/base/tests/ThreadLocal_test.cc	/^  ~Test()$/;"	f	class:Test
main	muduo/base/tests/ThreadPool_test.cc	/^int main()$/;"	f
print	muduo/base/tests/ThreadPool_test.cc	/^void print()$/;"	f
printString	muduo/base/tests/ThreadPool_test.cc	/^void printString(const std::string& str)$/;"	f
test	muduo/base/tests/ThreadPool_test.cc	/^void test(int maxSize)$/;"	f
forkBench	muduo/base/tests/Thread_bench.cc	/^void forkBench()$/;"	f
g_delays	muduo/base/tests/Thread_bench.cc	/^std::map<int, int> g_delays;$/;"	v
g_mutex	muduo/base/tests/Thread_bench.cc	/^muduo::MutexLock g_mutex;$/;"	v
main	muduo/base/tests/Thread_bench.cc	/^int main(int argc, char* argv[])$/;"	f
threadFunc	muduo/base/tests/Thread_bench.cc	/^void threadFunc()$/;"	f
threadFunc2	muduo/base/tests/Thread_bench.cc	/^void threadFunc2(muduo::Timestamp start)$/;"	f
Foo	muduo/base/tests/Thread_test.cc	/^  explicit Foo(double x)$/;"	f	class:Foo
Foo	muduo/base/tests/Thread_test.cc	/^class Foo$/;"	c	file:
main	muduo/base/tests/Thread_test.cc	/^int main()$/;"	f
memberFunc	muduo/base/tests/Thread_test.cc	/^  void memberFunc()$/;"	f	class:Foo
memberFunc2	muduo/base/tests/Thread_test.cc	/^  void memberFunc2(const std::string& text)$/;"	f	class:Foo
mysleep	muduo/base/tests/Thread_test.cc	/^void mysleep(int seconds)$/;"	f
threadFunc	muduo/base/tests/Thread_test.cc	/^void threadFunc()$/;"	f
threadFunc2	muduo/base/tests/Thread_test.cc	/^void threadFunc2(int x)$/;"	f
threadFunc3	muduo/base/tests/Thread_test.cc	/^void threadFunc3()$/;"	f
x_	muduo/base/tests/Thread_test.cc	/^  double x_;$/;"	m	class:Foo	file:
TestCase	muduo/base/tests/TimeZone_unittest.cc	/^struct TestCase$/;"	s	file:
getGmt	muduo/base/tests/TimeZone_unittest.cc	/^time_t getGmt(const char* str)$/;"	f
getGmt	muduo/base/tests/TimeZone_unittest.cc	/^time_t getGmt(int year, int month, int day,$/;"	f
getTm	muduo/base/tests/TimeZone_unittest.cc	/^struct tm getTm(const char* str)$/;"	f
getTm	muduo/base/tests/TimeZone_unittest.cc	/^struct tm getTm(int year, int month, int day,$/;"	f
gmt	muduo/base/tests/TimeZone_unittest.cc	/^  const char* gmt;$/;"	m	struct:TestCase	file:
isdst	muduo/base/tests/TimeZone_unittest.cc	/^  bool isdst;$/;"	m	struct:TestCase	file:
local	muduo/base/tests/TimeZone_unittest.cc	/^  const char* local;$/;"	m	struct:TestCase	file:
main	muduo/base/tests/TimeZone_unittest.cc	/^int main()$/;"	f
test	muduo/base/tests/TimeZone_unittest.cc	/^void test(const TimeZone& tz, TestCase tc)$/;"	f
testFixedTimezone	muduo/base/tests/TimeZone_unittest.cc	/^void testFixedTimezone()$/;"	f
testHongKong	muduo/base/tests/TimeZone_unittest.cc	/^void testHongKong()$/;"	f
testLondon	muduo/base/tests/TimeZone_unittest.cc	/^void testLondon()$/;"	f
testNewYork	muduo/base/tests/TimeZone_unittest.cc	/^void testNewYork()$/;"	f
testSydney	muduo/base/tests/TimeZone_unittest.cc	/^void testSydney()$/;"	f
testUtc	muduo/base/tests/TimeZone_unittest.cc	/^void testUtc()$/;"	f
benchmark	muduo/base/tests/Timestamp_unittest.cc	/^void benchmark()$/;"	f
main	muduo/base/tests/Timestamp_unittest.cc	/^int main()$/;"	f
passByConstReference	muduo/base/tests/Timestamp_unittest.cc	/^void passByConstReference(const Timestamp& x)$/;"	f
passByValue	muduo/base/tests/Timestamp_unittest.cc	/^void passByValue(Timestamp x)$/;"	f
Acceptor	muduo/net/Acceptor.cc	/^Acceptor::Acceptor(EventLoop* loop, const InetAddress& listenAddr, bool reuseport)$/;"	f	class:Acceptor
handleRead	muduo/net/Acceptor.cc	/^void Acceptor::handleRead()$/;"	f	class:Acceptor
listen	muduo/net/Acceptor.cc	/^void Acceptor::listen()$/;"	f	class:Acceptor
~Acceptor	muduo/net/Acceptor.cc	/^Acceptor::~Acceptor()$/;"	f	class:Acceptor
Acceptor	muduo/net/Acceptor.h	/^class Acceptor : boost::noncopyable$/;"	c	namespace:muduo::net
MUDUO_NET_ACCEPTOR_H	muduo/net/Acceptor.h	12;"	d
NewConnectionCallback	muduo/net/Acceptor.h	/^                                const InetAddress&)> NewConnectionCallback;$/;"	t	class:muduo::net::Acceptor
acceptChannel_	muduo/net/Acceptor.h	/^  Channel acceptChannel_; \/\/对应的事件分发$/;"	m	class:muduo::net::Acceptor
acceptSocket_	muduo/net/Acceptor.h	/^  Socket acceptSocket_; \/\/对监听套接字的封装$/;"	m	class:muduo::net::Acceptor
idleFd_	muduo/net/Acceptor.h	/^  int idleFd_;  \/\/解决了服务器中文件描述符达到上限后如何处理的大问题!$/;"	m	class:muduo::net::Acceptor
listenning	muduo/net/Acceptor.h	/^  bool listenning() const { return listenning_; } $/;"	f	class:muduo::net::Acceptor
listenning_	muduo/net/Acceptor.h	/^  bool listenning_; \/\/是否正在监听状态$/;"	m	class:muduo::net::Acceptor
loop_	muduo/net/Acceptor.h	/^  EventLoop* loop_; \/\/监听事件放在该loop循环中$/;"	m	class:muduo::net::Acceptor
muduo	muduo/net/Acceptor.h	/^namespace muduo$/;"	n
net	muduo/net/Acceptor.h	/^namespace net$/;"	n	namespace:muduo
newConnectionCallback_	muduo/net/Acceptor.h	/^  NewConnectionCallback newConnectionCallback_;$/;"	m	class:muduo::net::Acceptor
setNewConnectionCallback	muduo/net/Acceptor.h	/^  void setNewConnectionCallback(const NewConnectionCallback& cb)  \/\/被用于在TcpServer构造函数中设置新连接处理回调$/;"	f	class:muduo::net::Acceptor
kCRLF	muduo/net/Buffer.cc	/^const char Buffer::kCRLF[] = "\\r\\n";$/;"	m	class:Buffer	file:
kCheapPrepend	muduo/net/Buffer.cc	/^const size_t Buffer::kCheapPrepend;$/;"	m	class:Buffer	file:
kInitialSize	muduo/net/Buffer.cc	/^const size_t Buffer::kInitialSize;$/;"	m	class:Buffer	file:
readFd	muduo/net/Buffer.cc	/^ssize_t Buffer::readFd(int fd, int* savedErrno)$/;"	f	class:Buffer
Buffer	muduo/net/Buffer.h	/^  explicit Buffer(size_t initialSize = kInitialSize)  \/\/初始化Buffer总大小$/;"	f	class:muduo::net::Buffer
Buffer	muduo/net/Buffer.h	/^class Buffer : public muduo::copyable$/;"	c	namespace:muduo::net
MUDUO_NET_BUFFER_H	muduo/net/Buffer.h	12;"	d
append	muduo/net/Buffer.h	/^  void append(const StringPiece& str)$/;"	f	class:muduo::net::Buffer
append	muduo/net/Buffer.h	/^  void append(const char* \/*restrict*\/ data, size_t len)$/;"	f	class:muduo::net::Buffer
append	muduo/net/Buffer.h	/^  void append(const void* \/*restrict*\/ data, size_t len)$/;"	f	class:muduo::net::Buffer
appendInt16	muduo/net/Buffer.h	/^  void appendInt16(int16_t x)$/;"	f	class:muduo::net::Buffer
appendInt32	muduo/net/Buffer.h	/^  void appendInt32(int32_t x)$/;"	f	class:muduo::net::Buffer
appendInt64	muduo/net/Buffer.h	/^  void appendInt64(int64_t x)$/;"	f	class:muduo::net::Buffer
appendInt8	muduo/net/Buffer.h	/^  void appendInt8(int8_t x)$/;"	f	class:muduo::net::Buffer
begin	muduo/net/Buffer.h	/^  char* begin() \/\/返回Buffer的起始地址$/;"	f	class:muduo::net::Buffer
begin	muduo/net/Buffer.h	/^  const char* begin() const$/;"	f	class:muduo::net::Buffer
beginWrite	muduo/net/Buffer.h	/^  char* beginWrite()  \/\/返回指向可写入位置的指针$/;"	f	class:muduo::net::Buffer
beginWrite	muduo/net/Buffer.h	/^  const char* beginWrite() const$/;"	f	class:muduo::net::Buffer
buffer_	muduo/net/Buffer.h	/^  std::vector<char> buffer_;  \/\/连续内存$/;"	m	class:muduo::net::Buffer
ensureWritableBytes	muduo/net/Buffer.h	/^  void ensureWritableBytes(size_t len)  \/\/确保Buffer中可以写入len长度数据$/;"	f	class:muduo::net::Buffer
findCRLF	muduo/net/Buffer.h	/^  const char* findCRLF() const  \/\/在[peek(), beginWrite())中找\\r\\n$/;"	f	class:muduo::net::Buffer
findCRLF	muduo/net/Buffer.h	/^  const char* findCRLF(const char* start) const \/\/从位置start开始查找\\r\\n$/;"	f	class:muduo::net::Buffer
findEOL	muduo/net/Buffer.h	/^  const char* findEOL() const \/\/查找'\\n'的位置$/;"	f	class:muduo::net::Buffer
findEOL	muduo/net/Buffer.h	/^  const char* findEOL(const char* start) const  \/\/从位置start开始查找'\\n'的位置$/;"	f	class:muduo::net::Buffer
hasWritten	muduo/net/Buffer.h	/^  void hasWritten(size_t len) \/\/写入len长度数据后，调用本函数$/;"	f	class:muduo::net::Buffer
internalCapacity	muduo/net/Buffer.h	/^  size_t internalCapacity() const$/;"	f	class:muduo::net::Buffer
kCRLF	muduo/net/Buffer.h	/^  static const char kCRLF[];  \/\/存储匹配串内容$/;"	m	class:muduo::net::Buffer
kCheapPrepend	muduo/net/Buffer.h	/^  static const size_t kCheapPrepend = 8;  \/\/前面预留空间大小$/;"	m	class:muduo::net::Buffer
kInitialSize	muduo/net/Buffer.h	/^  static const size_t kInitialSize = 1024;  \/\/初始化存储数据空间$/;"	m	class:muduo::net::Buffer
makeSpace	muduo/net/Buffer.h	/^  void makeSpace(size_t len)  \/\/resize或移动数据，使Buffer能容下len大数据$/;"	f	class:muduo::net::Buffer
muduo	muduo/net/Buffer.h	/^namespace muduo$/;"	n
net	muduo/net/Buffer.h	/^namespace net$/;"	n	namespace:muduo
peek	muduo/net/Buffer.h	/^  const char* peek() const  \/\/返回指向可读空间的起始位置指针$/;"	f	class:muduo::net::Buffer
peekInt16	muduo/net/Buffer.h	/^  int16_t peekInt16() const$/;"	f	class:muduo::net::Buffer
peekInt32	muduo/net/Buffer.h	/^  int32_t peekInt32() const$/;"	f	class:muduo::net::Buffer
peekInt64	muduo/net/Buffer.h	/^  int64_t peekInt64() const \/\/从Buffer中读Int64长度数据并返回此数据$/;"	f	class:muduo::net::Buffer
peekInt8	muduo/net/Buffer.h	/^  int8_t peekInt8() const$/;"	f	class:muduo::net::Buffer
prepend	muduo/net/Buffer.h	/^  void prepend(const void* \/*restrict*\/ data, size_t len) \/\/把从data开始，长度为len的数据加到前缀$/;"	f	class:muduo::net::Buffer
prependInt16	muduo/net/Buffer.h	/^  void prependInt16(int16_t x)$/;"	f	class:muduo::net::Buffer
prependInt32	muduo/net/Buffer.h	/^  void prependInt32(int32_t x)$/;"	f	class:muduo::net::Buffer
prependInt64	muduo/net/Buffer.h	/^  void prependInt64(int64_t x)  \/\/向前缀写数据$/;"	f	class:muduo::net::Buffer
prependInt8	muduo/net/Buffer.h	/^  void prependInt8(int8_t x)$/;"	f	class:muduo::net::Buffer
prependableBytes	muduo/net/Buffer.h	/^  size_t prependableBytes() const \/\/可写入位置$/;"	f	class:muduo::net::Buffer
readInt16	muduo/net/Buffer.h	/^  int16_t readInt16()$/;"	f	class:muduo::net::Buffer
readInt32	muduo/net/Buffer.h	/^  int32_t readInt32()$/;"	f	class:muduo::net::Buffer
readInt64	muduo/net/Buffer.h	/^  int64_t readInt64()$/;"	f	class:muduo::net::Buffer
readInt8	muduo/net/Buffer.h	/^  int8_t readInt8()$/;"	f	class:muduo::net::Buffer
readableBytes	muduo/net/Buffer.h	/^  size_t readableBytes() const  \/\/可读空间有多大（即存储多少内容）$/;"	f	class:muduo::net::Buffer
readerIndex_	muduo/net/Buffer.h	/^  size_t readerIndex_;  \/\/可读起始位置$/;"	m	class:muduo::net::Buffer
retrieve	muduo/net/Buffer.h	/^  void retrieve(size_t len) \/\/取走len长度数据，主要在于设置readerIndex_和writerIndex_的值$/;"	f	class:muduo::net::Buffer
retrieveAll	muduo/net/Buffer.h	/^  void retrieveAll()  \/\/全部取走$/;"	f	class:muduo::net::Buffer
retrieveAllAsString	muduo/net/Buffer.h	/^  string retrieveAllAsString()  \/\/Buffer中所有数据以字符串形式取走$/;"	f	class:muduo::net::Buffer
retrieveAsString	muduo/net/Buffer.h	/^  string retrieveAsString(size_t len)$/;"	f	class:muduo::net::Buffer
retrieveInt16	muduo/net/Buffer.h	/^  void retrieveInt16()$/;"	f	class:muduo::net::Buffer
retrieveInt32	muduo/net/Buffer.h	/^  void retrieveInt32()$/;"	f	class:muduo::net::Buffer
retrieveInt64	muduo/net/Buffer.h	/^  void retrieveInt64()$/;"	f	class:muduo::net::Buffer
retrieveInt8	muduo/net/Buffer.h	/^  void retrieveInt8()$/;"	f	class:muduo::net::Buffer
retrieveUntil	muduo/net/Buffer.h	/^  void retrieveUntil(const char* end) \/\/end前的数据全取走$/;"	f	class:muduo::net::Buffer
shrink	muduo/net/Buffer.h	/^  void shrink(size_t reserve) \/\/更改Buffer的大小，使其可写入空间为reserve大小$/;"	f	class:muduo::net::Buffer
swap	muduo/net/Buffer.h	/^  void swap(Buffer& rhs)$/;"	f	class:muduo::net::Buffer
toStringPiece	muduo/net/Buffer.h	/^  StringPiece toStringPiece() const$/;"	f	class:muduo::net::Buffer
unwrite	muduo/net/Buffer.h	/^  void unwrite(size_t len)  \/\/撤销最后写入的len长度数据$/;"	f	class:muduo::net::Buffer
writableBytes	muduo/net/Buffer.h	/^  size_t writableBytes() const  \/\/可写入空间有多大$/;"	f	class:muduo::net::Buffer
writerIndex_	muduo/net/Buffer.h	/^  size_t writerIndex_;  \/\/可写入起始位置$/;"	m	class:muduo::net::Buffer
CloseCallback	muduo/net/Callbacks.h	/^typedef boost::function<void (const TcpConnectionPtr&)> CloseCallback;$/;"	t	namespace:muduo::net
ConnectionCallback	muduo/net/Callbacks.h	/^typedef boost::function<void (const TcpConnectionPtr&)> ConnectionCallback;$/;"	t	namespace:muduo::net
HighWaterMarkCallback	muduo/net/Callbacks.h	/^typedef boost::function<void (const TcpConnectionPtr&, size_t)> HighWaterMarkCallback;$/;"	t	namespace:muduo::net
MUDUO_NET_CALLBACKS_H	muduo/net/Callbacks.h	12;"	d
MessageCallback	muduo/net/Callbacks.h	/^                              Timestamp)> MessageCallback;$/;"	t	namespace:muduo::net
TcpConnectionPtr	muduo/net/Callbacks.h	/^typedef boost::shared_ptr<TcpConnection> TcpConnectionPtr;$/;"	t	namespace:muduo::net
TimerCallback	muduo/net/Callbacks.h	/^typedef boost::function<void()> TimerCallback;$/;"	t	namespace:muduo::net
WriteCompleteCallback	muduo/net/Callbacks.h	/^typedef boost::function<void (const TcpConnectionPtr&)> WriteCompleteCallback;$/;"	t	namespace:muduo::net
down_pointer_cast	muduo/net/Callbacks.h	/^inline ::boost::shared_ptr<To> down_pointer_cast(const ::boost::shared_ptr<From>& f)$/;"	f	namespace:muduo
muduo	muduo/net/Callbacks.h	/^namespace muduo$/;"	n
net	muduo/net/Callbacks.h	/^namespace net$/;"	n	namespace:muduo
Channel	muduo/net/Channel.cc	/^Channel::Channel(EventLoop* loop, int fd__)$/;"	f	class:Channel
eventsToString	muduo/net/Channel.cc	/^string Channel::eventsToString() const$/;"	f	class:Channel
eventsToString	muduo/net/Channel.cc	/^string Channel::eventsToString(int fd, int ev)$/;"	f	class:Channel
handleEvent	muduo/net/Channel.cc	/^void Channel::handleEvent(Timestamp receiveTime)$/;"	f	class:Channel
handleEventWithGuard	muduo/net/Channel.cc	/^void Channel::handleEventWithGuard(Timestamp receiveTime) \/\/根据revents表示的目前活动事件来回调相应函数$/;"	f	class:Channel
kNoneEvent	muduo/net/Channel.cc	/^const int Channel::kNoneEvent = 0;$/;"	m	class:Channel	file:
kReadEvent	muduo/net/Channel.cc	/^const int Channel::kReadEvent = POLLIN | POLLPRI;$/;"	m	class:Channel	file:
kWriteEvent	muduo/net/Channel.cc	/^const int Channel::kWriteEvent = POLLOUT;$/;"	m	class:Channel	file:
remove	muduo/net/Channel.cc	/^void Channel::remove()$/;"	f	class:Channel
reventsToString	muduo/net/Channel.cc	/^string Channel::reventsToString() const$/;"	f	class:Channel
tie	muduo/net/Channel.cc	/^void Channel::tie(const boost::shared_ptr<void>& obj)$/;"	f	class:Channel
update	muduo/net/Channel.cc	/^void Channel::update()$/;"	f	class:Channel
~Channel	muduo/net/Channel.cc	/^Channel::~Channel()$/;"	f	class:Channel
Channel	muduo/net/Channel.h	/^class Channel : boost::noncopyable$/;"	c	namespace:muduo::net
EventCallback	muduo/net/Channel.h	/^  typedef boost::function<void()> EventCallback;$/;"	t	class:muduo::net::Channel
MUDUO_NET_CHANNEL_H	muduo/net/Channel.h	12;"	d
ReadEventCallback	muduo/net/Channel.h	/^  typedef boost::function<void(Timestamp)> ReadEventCallback;$/;"	t	class:muduo::net::Channel
addedToLoop_	muduo/net/Channel.h	/^  bool addedToLoop_;$/;"	m	class:muduo::net::Channel
closeCallback_	muduo/net/Channel.h	/^  EventCallback closeCallback_;  \/\/ 定义如何关闭连接$/;"	m	class:muduo::net::Channel
disableAll	muduo/net/Channel.h	/^  void disableAll() { events_ = kNoneEvent; update(); }$/;"	f	class:muduo::net::Channel
disableReading	muduo/net/Channel.h	/^  void disableReading() { events_ &= ~kReadEvent; update(); }$/;"	f	class:muduo::net::Channel
disableWriting	muduo/net/Channel.h	/^  void disableWriting() { events_ &= ~kWriteEvent; update(); }$/;"	f	class:muduo::net::Channel
doNotLogHup	muduo/net/Channel.h	/^  void doNotLogHup() { logHup_ = false; }$/;"	f	class:muduo::net::Channel
enableReading	muduo/net/Channel.h	/^  void enableReading() { events_ |= kReadEvent; update(); }$/;"	f	class:muduo::net::Channel
enableWriting	muduo/net/Channel.h	/^  void enableWriting() { events_ |= kWriteEvent; update(); }$/;"	f	class:muduo::net::Channel
errorCallback_	muduo/net/Channel.h	/^  EventCallback errorCallback_; \/\/ 定义如果出错的话如何处理$/;"	m	class:muduo::net::Channel
eventHandling_	muduo/net/Channel.h	/^  bool eventHandling_; \/\/ 当前是否正在处理event$/;"	m	class:muduo::net::Channel
events	muduo/net/Channel.h	/^  int events() const { return events_; }$/;"	f	class:muduo::net::Channel
events_	muduo/net/Channel.h	/^  int        events_;   \/\/用户设置关心的IO事件$/;"	m	class:muduo::net::Channel
fd	muduo/net/Channel.h	/^  int fd() const { return fd_; }$/;"	f	class:muduo::net::Channel
fd_	muduo/net/Channel.h	/^  const int  fd_; \/\/ 关联fd$/;"	m	class:muduo::net::Channel
index	muduo/net/Channel.h	/^  int index() { return index_; }$/;"	f	class:muduo::net::Channel
index_	muduo/net/Channel.h	/^  int        index_; \/\/ used by Poller. 在Poller中的编号，构造函数初始化-1$/;"	m	class:muduo::net::Channel
isNoneEvent	muduo/net/Channel.h	/^  bool isNoneEvent() const { return events_ == kNoneEvent; }$/;"	f	class:muduo::net::Channel
isReading	muduo/net/Channel.h	/^  bool isReading() const { return events_ & kReadEvent; }$/;"	f	class:muduo::net::Channel
isWriting	muduo/net/Channel.h	/^  bool isWriting() const { return events_ & kWriteEvent; }$/;"	f	class:muduo::net::Channel
kNoneEvent	muduo/net/Channel.h	/^  static const int kNoneEvent;    \/\/static常量定义，用“类::XX”初始化方式$/;"	m	class:muduo::net::Channel
kReadEvent	muduo/net/Channel.h	/^  static const int kReadEvent;$/;"	m	class:muduo::net::Channel
kWriteEvent	muduo/net/Channel.h	/^  static const int kWriteEvent;$/;"	m	class:muduo::net::Channel
logHup_	muduo/net/Channel.h	/^  bool       logHup_;$/;"	m	class:muduo::net::Channel
loop_	muduo/net/Channel.h	/^  EventLoop* loop_; \/\/ 属于哪一个Reactor$/;"	m	class:muduo::net::Channel
muduo	muduo/net/Channel.h	/^namespace muduo$/;"	n
net	muduo/net/Channel.h	/^namespace net$/;"	n	namespace:muduo
ownerLoop	muduo/net/Channel.h	/^  EventLoop* ownerLoop() { return loop_; }$/;"	f	class:muduo::net::Channel
readCallback_	muduo/net/Channel.h	/^  ReadEventCallback readCallback_; $/;"	m	class:muduo::net::Channel
revents_	muduo/net/Channel.h	/^  int        revents_; \/\/ it's the received event types of epoll or poll  目前的活动事件，由EventLoop\/Poller设置$/;"	m	class:muduo::net::Channel
setCloseCallback	muduo/net/Channel.h	/^  void setCloseCallback(EventCallback&& cb)$/;"	f	class:muduo::net::Channel
setCloseCallback	muduo/net/Channel.h	/^  void setCloseCallback(const EventCallback& cb)$/;"	f	class:muduo::net::Channel
setErrorCallback	muduo/net/Channel.h	/^  void setErrorCallback(EventCallback&& cb)$/;"	f	class:muduo::net::Channel
setErrorCallback	muduo/net/Channel.h	/^  void setErrorCallback(const EventCallback& cb)$/;"	f	class:muduo::net::Channel
setReadCallback	muduo/net/Channel.h	/^  void setReadCallback(ReadEventCallback&& cb)$/;"	f	class:muduo::net::Channel
setReadCallback	muduo/net/Channel.h	/^  void setReadCallback(const ReadEventCallback& cb)$/;"	f	class:muduo::net::Channel
setWriteCallback	muduo/net/Channel.h	/^  void setWriteCallback(EventCallback&& cb)$/;"	f	class:muduo::net::Channel
setWriteCallback	muduo/net/Channel.h	/^  void setWriteCallback(const EventCallback& cb)$/;"	f	class:muduo::net::Channel
set_index	muduo/net/Channel.h	/^  void set_index(int idx) { index_ = idx; }$/;"	f	class:muduo::net::Channel
set_revents	muduo/net/Channel.h	/^  void set_revents(int revt) { revents_ = revt; } \/\/ used by pollers 该接口用来设置Poller需要监听Channel的哪些事件$/;"	f	class:muduo::net::Channel
tie_	muduo/net/Channel.h	/^  boost::weak_ptr<void> tie_; \/\/ 绑定的对象,用处?$/;"	m	class:muduo::net::Channel
tied_	muduo/net/Channel.h	/^  bool tied_;  \/\/ 是否绑定了对象上来$/;"	m	class:muduo::net::Channel
writeCallback_	muduo/net/Channel.h	/^  EventCallback writeCallback_; \/\/ 定义如何写数据$/;"	m	class:muduo::net::Channel
Connector	muduo/net/Connector.cc	/^Connector::Connector(EventLoop* loop, const InetAddress& serverAddr)$/;"	f	class:Connector
connect	muduo/net/Connector.cc	/^void Connector::connect()   \/\/开始建立连接$/;"	f	class:Connector
connecting	muduo/net/Connector.cc	/^void Connector::connecting(int sockfd)$/;"	f	class:Connector
handleError	muduo/net/Connector.cc	/^void Connector::handleError()$/;"	f	class:Connector
handleWrite	muduo/net/Connector.cc	/^void Connector::handleWrite()  \/\/可写不一定表示已经建立连接$/;"	f	class:Connector
kMaxRetryDelayMs	muduo/net/Connector.cc	/^const int Connector::kMaxRetryDelayMs;$/;"	m	class:Connector	file:
removeAndResetChannel	muduo/net/Connector.cc	/^int Connector::removeAndResetChannel() \/\/移除channel。Connector中的channel只管理建立连接阶段。连接建立后，交给TcoConnection管理$/;"	f	class:Connector
resetChannel	muduo/net/Connector.cc	/^void Connector::resetChannel()  \/\/reset后channel_为空$/;"	f	class:Connector
restart	muduo/net/Connector.cc	/^void Connector::restart()   \/\/重启$/;"	f	class:Connector
retry	muduo/net/Connector.cc	/^void Connector::retry(int sockfd) \/\/重新尝试连接$/;"	f	class:Connector
start	muduo/net/Connector.cc	/^void Connector::start()$/;"	f	class:Connector
startInLoop	muduo/net/Connector.cc	/^void Connector::startInLoop() \/\/在当前IO中建立连接$/;"	f	class:Connector
stop	muduo/net/Connector.cc	/^void Connector::stop()$/;"	f	class:Connector
stopInLoop	muduo/net/Connector.cc	/^void Connector::stopInLoop()$/;"	f	class:Connector
~Connector	muduo/net/Connector.cc	/^Connector::~Connector()$/;"	f	class:Connector
Connector	muduo/net/Connector.h	/^class Connector : boost::noncopyable,$/;"	c	namespace:muduo::net
MUDUO_NET_CONNECTOR_H	muduo/net/Connector.h	12;"	d
NewConnectionCallback	muduo/net/Connector.h	/^  typedef boost::function<void (int sockfd)> NewConnectionCallback;$/;"	t	class:muduo::net::Connector
States	muduo/net/Connector.h	/^  enum States { kDisconnected, kConnecting, kConnected };$/;"	g	class:muduo::net::Connector
channel_	muduo/net/Connector.h	/^  boost::scoped_ptr<Channel> channel_;  \/\/Connector所对应的Channel$/;"	m	class:muduo::net::Connector
connect_	muduo/net/Connector.h	/^  bool connect_; \/\/ atomic$/;"	m	class:muduo::net::Connector
kConnected	muduo/net/Connector.h	/^  enum States { kDisconnected, kConnecting, kConnected };$/;"	e	enum:muduo::net::Connector::States
kConnecting	muduo/net/Connector.h	/^  enum States { kDisconnected, kConnecting, kConnected };$/;"	e	enum:muduo::net::Connector::States
kDisconnected	muduo/net/Connector.h	/^  enum States { kDisconnected, kConnecting, kConnected };$/;"	e	enum:muduo::net::Connector::States
kInitRetryDelayMs	muduo/net/Connector.h	/^  static const int kInitRetryDelayMs = 500;  \/\/初始化重试延迟$/;"	m	class:muduo::net::Connector
kMaxRetryDelayMs	muduo/net/Connector.h	/^  static const int kMaxRetryDelayMs = 30*1000;  \/\/最大重试延迟$/;"	m	class:muduo::net::Connector
loop_	muduo/net/Connector.h	/^  EventLoop* loop_;  \/\/所属的EventLoop$/;"	m	class:muduo::net::Connector
muduo	muduo/net/Connector.h	/^namespace muduo$/;"	n
net	muduo/net/Connector.h	/^namespace net$/;"	n	namespace:muduo
newConnectionCallback_	muduo/net/Connector.h	/^  NewConnectionCallback newConnectionCallback_; \/\/连接成功回调函数$/;"	m	class:muduo::net::Connector
retryDelayMs_	muduo/net/Connector.h	/^  int retryDelayMs_;  \/\/重连延迟时间(单位ms)$/;"	m	class:muduo::net::Connector
serverAddr_	muduo/net/Connector.h	/^  InetAddress serverAddr_;  \/\/server地址$/;"	m	class:muduo::net::Connector
serverAddress	muduo/net/Connector.h	/^  const InetAddress& serverAddress() const { return serverAddr_; }$/;"	f	class:muduo::net::Connector
setNewConnectionCallback	muduo/net/Connector.h	/^  void setNewConnectionCallback(const NewConnectionCallback& cb)$/;"	f	class:muduo::net::Connector
setState	muduo/net/Connector.h	/^  void setState(States s) { state_ = s; }$/;"	f	class:muduo::net::Connector
state_	muduo/net/Connector.h	/^  States state_;  \/\/ FIXME: use atomic variable$/;"	m	class:muduo::net::Connector
MUDUO_NET_ENDIAN_H	muduo/net/Endian.h	12;"	d
hostToNetwork16	muduo/net/Endian.h	/^inline uint16_t hostToNetwork16(uint16_t host16)$/;"	f	namespace:muduo::net::sockets
hostToNetwork32	muduo/net/Endian.h	/^inline uint32_t hostToNetwork32(uint32_t host32)$/;"	f	namespace:muduo::net::sockets
hostToNetwork64	muduo/net/Endian.h	/^inline uint64_t hostToNetwork64(uint64_t host64)$/;"	f	namespace:muduo::net::sockets
muduo	muduo/net/Endian.h	/^namespace muduo$/;"	n
net	muduo/net/Endian.h	/^namespace net$/;"	n	namespace:muduo
networkToHost16	muduo/net/Endian.h	/^inline uint16_t networkToHost16(uint16_t net16)$/;"	f	namespace:muduo::net::sockets
networkToHost32	muduo/net/Endian.h	/^inline uint32_t networkToHost32(uint32_t net32)$/;"	f	namespace:muduo::net::sockets
networkToHost64	muduo/net/Endian.h	/^inline uint64_t networkToHost64(uint64_t net64)$/;"	f	namespace:muduo::net::sockets
sockets	muduo/net/Endian.h	/^namespace sockets$/;"	n	namespace:muduo::net
EventLoop	muduo/net/EventLoop.cc	/^EventLoop::EventLoop()    \/\/不能跨线程调用，只能在创建EventLoop的线程使用！$/;"	f	class:EventLoop
IgnoreSigPipe	muduo/net/EventLoop.cc	/^  IgnoreSigPipe()$/;"	f	class:__anon2::IgnoreSigPipe
IgnoreSigPipe	muduo/net/EventLoop.cc	/^class IgnoreSigPipe$/;"	c	namespace:__anon2	file:
abortNotInLoopThread	muduo/net/EventLoop.cc	/^void EventLoop::abortNotInLoopThread()$/;"	f	class:EventLoop
cancel	muduo/net/EventLoop.cc	/^void EventLoop::cancel(TimerId timerId)$/;"	f	class:EventLoop
createEventfd	muduo/net/EventLoop.cc	/^int createEventfd()$/;"	f	namespace:__anon2
doPendingFunctors	muduo/net/EventLoop.cc	/^void EventLoop::doPendingFunctors() \/\/调用Functor$/;"	f	class:EventLoop
getEventLoopOfCurrentThread	muduo/net/EventLoop.cc	/^EventLoop* EventLoop::getEventLoopOfCurrentThread() \/\/返回该线程的EventLoop对象（one loop per thread）$/;"	f	class:EventLoop
handleRead	muduo/net/EventLoop.cc	/^void EventLoop::handleRead()$/;"	f	class:EventLoop
hasChannel	muduo/net/EventLoop.cc	/^bool EventLoop::hasChannel(Channel* channel)$/;"	f	class:EventLoop
initObj	muduo/net/EventLoop.cc	/^IgnoreSigPipe initObj;$/;"	m	namespace:__anon2	file:
kPollTimeMs	muduo/net/EventLoop.cc	/^const int kPollTimeMs = 10000;$/;"	m	namespace:__anon2	file:
loop	muduo/net/EventLoop.cc	/^void EventLoop::loop()$/;"	f	class:EventLoop
printActiveChannels	muduo/net/EventLoop.cc	/^void EventLoop::printActiveChannels() const$/;"	f	class:EventLoop
queueInLoop	muduo/net/EventLoop.cc	/^void EventLoop::queueInLoop(Functor&& cb)$/;"	f	class:EventLoop
queueInLoop	muduo/net/EventLoop.cc	/^void EventLoop::queueInLoop(const Functor& cb)  $/;"	f	class:EventLoop
queueSize	muduo/net/EventLoop.cc	/^size_t EventLoop::queueSize() const$/;"	f	class:EventLoop
quit	muduo/net/EventLoop.cc	/^void EventLoop::quit()$/;"	f	class:EventLoop
removeChannel	muduo/net/EventLoop.cc	/^void EventLoop::removeChannel(Channel* channel)$/;"	f	class:EventLoop
runAfter	muduo/net/EventLoop.cc	/^TimerId EventLoop::runAfter(double delay, TimerCallback&& cb)$/;"	f	class:EventLoop
runAfter	muduo/net/EventLoop.cc	/^TimerId EventLoop::runAfter(double delay, const TimerCallback& cb)$/;"	f	class:EventLoop
runAt	muduo/net/EventLoop.cc	/^TimerId EventLoop::runAt(const Timestamp& time, TimerCallback&& cb)$/;"	f	class:EventLoop
runAt	muduo/net/EventLoop.cc	/^TimerId EventLoop::runAt(const Timestamp& time, const TimerCallback& cb)$/;"	f	class:EventLoop
runEvery	muduo/net/EventLoop.cc	/^TimerId EventLoop::runEvery(double interval, TimerCallback&& cb)$/;"	f	class:EventLoop
runEvery	muduo/net/EventLoop.cc	/^TimerId EventLoop::runEvery(double interval, const TimerCallback& cb)$/;"	f	class:EventLoop
runInLoop	muduo/net/EventLoop.cc	/^void EventLoop::runInLoop(Functor&& cb)$/;"	f	class:EventLoop
runInLoop	muduo/net/EventLoop.cc	/^void EventLoop::runInLoop(const Functor& cb)  \/\/在它的IO线程内执行某个用户任务回调,避免线程不安全的问题，保证不会被多个线程同时访问。$/;"	f	class:EventLoop
t_loopInThisThread	muduo/net/EventLoop.cc	/^__thread EventLoop* t_loopInThisThread = 0; \/\/使用线程局部变量.然后在EventLoop构造函数的时候判断这个是否==0,如果不为=0的话说明在这个线程已经构造过一个EventLoop了$/;"	m	namespace:__anon2	file:
updateChannel	muduo/net/EventLoop.cc	/^void EventLoop::updateChannel(Channel* channel)$/;"	f	class:EventLoop
wakeup	muduo/net/EventLoop.cc	/^void EventLoop::wakeup()    \/\/写一个字节给socket，唤醒可读事件。否则EventLoop::loop()的poll会阻塞$/;"	f	class:EventLoop
~EventLoop	muduo/net/EventLoop.cc	/^EventLoop::~EventLoop()$/;"	f	class:EventLoop
ChannelList	muduo/net/EventLoop.h	/^  typedef std::vector<Channel*> ChannelList;$/;"	t	class:muduo::net::EventLoop
EventLoop	muduo/net/EventLoop.h	/^class EventLoop : boost::noncopyable$/;"	c	namespace:muduo::net
Functor	muduo/net/EventLoop.h	/^  typedef boost::function<void()> Functor;$/;"	t	class:muduo::net::EventLoop
MUDUO_NET_EVENTLOOP_H	muduo/net/EventLoop.h	12;"	d
activeChannels_	muduo/net/EventLoop.h	/^  ChannelList activeChannels_;  \/\/保存的是poller类中的poll调用返回的所有活跃事件集$/;"	m	class:muduo::net::EventLoop
assertInLoopThread	muduo/net/EventLoop.h	/^  void assertInLoopThread() \/\/断言处于当前线程中（主要是因为有些接口不能跨线程调用）$/;"	f	class:muduo::net::EventLoop
callingPendingFunctors_	muduo/net/EventLoop.h	/^  bool callingPendingFunctors_; \/* atomic *\/$/;"	m	class:muduo::net::EventLoop
context_	muduo/net/EventLoop.h	/^  boost::any context_;$/;"	m	class:muduo::net::EventLoop
currentActiveChannel_	muduo/net/EventLoop.h	/^  Channel* currentActiveChannel_; \/\/当前正在处理的活动通道$/;"	m	class:muduo::net::EventLoop
eventHandling	muduo/net/EventLoop.h	/^  bool eventHandling() const { return eventHandling_; }$/;"	f	class:muduo::net::EventLoop
eventHandling_	muduo/net/EventLoop.h	/^  bool eventHandling_; \/* atomic *\/$/;"	m	class:muduo::net::EventLoop
getContext	muduo/net/EventLoop.h	/^  const boost::any& getContext() const$/;"	f	class:muduo::net::EventLoop
getMutableContext	muduo/net/EventLoop.h	/^  boost::any* getMutableContext()$/;"	f	class:muduo::net::EventLoop
isInLoopThread	muduo/net/EventLoop.h	/^  bool isInLoopThread() const { return threadId_ == CurrentThread::tid(); }  \/\/判断是是否处于同一线程，而不是跨线程$/;"	f	class:muduo::net::EventLoop
iteration	muduo/net/EventLoop.h	/^  int64_t iteration() const { return iteration_; }$/;"	f	class:muduo::net::EventLoop
iteration_	muduo/net/EventLoop.h	/^  int64_t iteration_;$/;"	m	class:muduo::net::EventLoop
looping_	muduo/net/EventLoop.h	/^  bool looping_; \/* atomic *\/   \/\/是否处于事件循环$/;"	m	class:muduo::net::EventLoop
muduo	muduo/net/EventLoop.h	/^namespace muduo$/;"	n
mutex_	muduo/net/EventLoop.h	/^  mutable MutexLock mutex_;$/;"	m	class:muduo::net::EventLoop
net	muduo/net/EventLoop.h	/^namespace net$/;"	n	namespace:muduo
pendingFunctors_	muduo/net/EventLoop.h	/^  std::vector<Functor> pendingFunctors_; \/\/ @GuardedBy mutex_$/;"	m	class:muduo::net::EventLoop
pollReturnTime	muduo/net/EventLoop.h	/^  Timestamp pollReturnTime() const { return pollReturnTime_; }$/;"	f	class:muduo::net::EventLoop
pollReturnTime_	muduo/net/EventLoop.h	/^  Timestamp pollReturnTime_;  \/\/poll返回的时间戳$/;"	m	class:muduo::net::EventLoop
poller_	muduo/net/EventLoop.h	/^  boost::scoped_ptr<Poller> poller_;  \/\/EventLoop首先一定得有个I\/O复用才行,它的所有职责都是建立在I\/O复用之上的$/;"	m	class:muduo::net::EventLoop
quit_	muduo/net/EventLoop.h	/^  bool quit_; \/* atomic and shared between threads, okay on x86, I guess. *\/$/;"	m	class:muduo::net::EventLoop
setContext	muduo/net/EventLoop.h	/^  void setContext(const boost::any& context)$/;"	f	class:muduo::net::EventLoop
threadId_	muduo/net/EventLoop.h	/^  const pid_t threadId_;    \/\/EventLoop构造函数会记住本对象所属的线程ID$/;"	m	class:muduo::net::EventLoop
timerQueue_	muduo/net/EventLoop.h	/^  boost::scoped_ptr<TimerQueue> timerQueue_;  \/\/应该支持定时事件，关于定时器的所有操作和组织定义都在类TimerQueue中 $/;"	m	class:muduo::net::EventLoop
wakeupChannel_	muduo/net/EventLoop.h	/^  boost::scoped_ptr<Channel> wakeupChannel_;  \/\/若此事件发生便会一次执行pendingFunctors_中的可调用对象 $/;"	m	class:muduo::net::EventLoop
wakeupFd_	muduo/net/EventLoop.h	/^  int wakeupFd_;$/;"	m	class:muduo::net::EventLoop
EventLoopThread	muduo/net/EventLoopThread.cc	/^EventLoopThread::EventLoopThread(const ThreadInitCallback& cb,$/;"	f	class:EventLoopThread
startLoop	muduo/net/EventLoopThread.cc	/^EventLoop* EventLoopThread::startLoop() \/\/另一个线程在调用这个函数$/;"	f	class:EventLoopThread
threadFunc	muduo/net/EventLoopThread.cc	/^void EventLoopThread::threadFunc()$/;"	f	class:EventLoopThread
~EventLoopThread	muduo/net/EventLoopThread.cc	/^EventLoopThread::~EventLoopThread()$/;"	f	class:EventLoopThread
EventLoopThread	muduo/net/EventLoopThread.h	/^class EventLoopThread : boost::noncopyable$/;"	c	namespace:muduo::net
MUDUO_NET_EVENTLOOPTHREAD_H	muduo/net/EventLoopThread.h	12;"	d
ThreadInitCallback	muduo/net/EventLoopThread.h	/^  typedef boost::function<void(EventLoop*)> ThreadInitCallback;$/;"	t	class:muduo::net::EventLoopThread
callback_	muduo/net/EventLoopThread.h	/^  ThreadInitCallback callback_; \/\/ 回调函数在EventLoop::loop事件循环之前被调用$/;"	m	class:muduo::net::EventLoopThread
cond_	muduo/net/EventLoopThread.h	/^  Condition cond_;  \/\/条件变量$/;"	m	class:muduo::net::EventLoopThread
exiting_	muduo/net/EventLoopThread.h	/^  bool exiting_;  \/\/是否已经退出$/;"	m	class:muduo::net::EventLoopThread
loop_	muduo/net/EventLoopThread.h	/^  EventLoop* loop_; \/\/本线程持有的EventLoop对象指针$/;"	m	class:muduo::net::EventLoopThread
muduo	muduo/net/EventLoopThread.h	/^namespace muduo$/;"	n
mutex_	muduo/net/EventLoopThread.h	/^  MutexLock mutex_; \/\/互斥锁$/;"	m	class:muduo::net::EventLoopThread
net	muduo/net/EventLoopThread.h	/^namespace net$/;"	n	namespace:muduo
thread_	muduo/net/EventLoopThread.h	/^  Thread thread_; \/\/本线程$/;"	m	class:muduo::net::EventLoopThread
EventLoopThreadPool	muduo/net/EventLoopThreadPool.cc	/^EventLoopThreadPool::EventLoopThreadPool(EventLoop* baseLoop, const string& nameArg)$/;"	f	class:EventLoopThreadPool
getAllLoops	muduo/net/EventLoopThreadPool.cc	/^std::vector<EventLoop*> EventLoopThreadPool::getAllLoops()$/;"	f	class:EventLoopThreadPool
getLoopForHash	muduo/net/EventLoopThreadPool.cc	/^EventLoop* EventLoopThreadPool::getLoopForHash(size_t hashCode)$/;"	f	class:EventLoopThreadPool
getNextLoop	muduo/net/EventLoopThreadPool.cc	/^EventLoop* EventLoopThreadPool::getNextLoop()$/;"	f	class:EventLoopThreadPool
start	muduo/net/EventLoopThreadPool.cc	/^void EventLoopThreadPool::start(const ThreadInitCallback& cb) $/;"	f	class:EventLoopThreadPool
~EventLoopThreadPool	muduo/net/EventLoopThreadPool.cc	/^EventLoopThreadPool::~EventLoopThreadPool()$/;"	f	class:EventLoopThreadPool
EventLoopThreadPool	muduo/net/EventLoopThreadPool.h	/^class EventLoopThreadPool : boost::noncopyable$/;"	c	namespace:muduo::net
MUDUO_NET_EVENTLOOPTHREADPOOL_H	muduo/net/EventLoopThreadPool.h	12;"	d
ThreadInitCallback	muduo/net/EventLoopThreadPool.h	/^  typedef boost::function<void(EventLoop*)> ThreadInitCallback;$/;"	t	class:muduo::net::EventLoopThreadPool
baseLoop_	muduo/net/EventLoopThreadPool.h	/^  EventLoop* baseLoop_; \/\/ 与Acceptor所属EventLoop相同$/;"	m	class:muduo::net::EventLoopThreadPool
loops_	muduo/net/EventLoopThreadPool.h	/^  std::vector<EventLoop*> loops_; \/\/用来保存每个loop循环的EventLoop的指针$/;"	m	class:muduo::net::EventLoopThreadPool
muduo	muduo/net/EventLoopThreadPool.h	/^namespace muduo$/;"	n
name	muduo/net/EventLoopThreadPool.h	/^  const string& name() const$/;"	f	class:muduo::net::EventLoopThreadPool
name_	muduo/net/EventLoopThreadPool.h	/^  string name_;$/;"	m	class:muduo::net::EventLoopThreadPool
net	muduo/net/EventLoopThreadPool.h	/^namespace net$/;"	n	namespace:muduo
next_	muduo/net/EventLoopThreadPool.h	/^  int next_;  \/\/next为保存当前loops_的下标$/;"	m	class:muduo::net::EventLoopThreadPool
numThreads_	muduo/net/EventLoopThreadPool.h	/^  int numThreads_;  \/\/表示创建多少个loop线程$/;"	m	class:muduo::net::EventLoopThreadPool
setThreadNum	muduo/net/EventLoopThreadPool.h	/^  void setThreadNum(int numThreads) { numThreads_ = numThreads; } \/\/设置开启loop循环的线程数量$/;"	f	class:muduo::net::EventLoopThreadPool
started	muduo/net/EventLoopThreadPool.h	/^  bool started() const$/;"	f	class:muduo::net::EventLoopThreadPool
started_	muduo/net/EventLoopThreadPool.h	/^  bool started_;$/;"	m	class:muduo::net::EventLoopThreadPool
threads_	muduo/net/EventLoopThreadPool.h	/^  boost::ptr_vector<EventLoopThread> threads_;  \/\/保存运行loop循环的线程$/;"	m	class:muduo::net::EventLoopThreadPool
InetAddress	muduo/net/InetAddress.cc	/^InetAddress::InetAddress(StringArg ip, uint16_t port, bool ipv6)$/;"	f	class:InetAddress
InetAddress	muduo/net/InetAddress.cc	/^InetAddress::InetAddress(uint16_t port, bool loopbackOnly, bool ipv6)$/;"	f	class:InetAddress
ipNetEndian	muduo/net/InetAddress.cc	/^uint32_t InetAddress::ipNetEndian() const$/;"	f	class:InetAddress
kInaddrAny	muduo/net/InetAddress.cc	/^static const in_addr_t kInaddrAny = INADDR_ANY;$/;"	v	file:
kInaddrLoopback	muduo/net/InetAddress.cc	/^static const in_addr_t kInaddrLoopback = INADDR_LOOPBACK;$/;"	v	file:
resolve	muduo/net/InetAddress.cc	/^bool InetAddress::resolve(StringArg hostname, InetAddress* out)$/;"	f	class:InetAddress
t_resolveBuffer	muduo/net/InetAddress.cc	/^static __thread char t_resolveBuffer[64 * 1024];$/;"	v	file:
toIp	muduo/net/InetAddress.cc	/^string InetAddress::toIp() const$/;"	f	class:InetAddress
toIpPort	muduo/net/InetAddress.cc	/^string InetAddress::toIpPort() const$/;"	f	class:InetAddress
toPort	muduo/net/InetAddress.cc	/^uint16_t InetAddress::toPort() const$/;"	f	class:InetAddress
InetAddress	muduo/net/InetAddress.h	/^  explicit InetAddress(const struct sockaddr_in& addr)$/;"	f	class:muduo::net::InetAddress
InetAddress	muduo/net/InetAddress.h	/^  explicit InetAddress(const struct sockaddr_in6& addr)$/;"	f	class:muduo::net::InetAddress
InetAddress	muduo/net/InetAddress.h	/^class InetAddress : public muduo::copyable$/;"	c	namespace:muduo::net
MUDUO_NET_INETADDRESS_H	muduo/net/InetAddress.h	12;"	d
addr6_	muduo/net/InetAddress.h	/^    struct sockaddr_in6 addr6_;$/;"	m	union:muduo::net::InetAddress::__anon8	typeref:struct:muduo::net::InetAddress::__anon8::sockaddr_in6
addr_	muduo/net/InetAddress.h	/^    struct sockaddr_in addr_;$/;"	m	union:muduo::net::InetAddress::__anon8	typeref:struct:muduo::net::InetAddress::__anon8::sockaddr_in
family	muduo/net/InetAddress.h	/^  sa_family_t family() const { return addr_.sin_family; }$/;"	f	class:muduo::net::InetAddress
getSockAddr	muduo/net/InetAddress.h	/^  const struct sockaddr* getSockAddr() const { return sockets::sockaddr_cast(&addr6_); }$/;"	f	class:muduo::net::InetAddress
muduo	muduo/net/InetAddress.h	/^namespace muduo$/;"	n
net	muduo/net/InetAddress.h	/^namespace net$/;"	n	namespace:muduo
portNetEndian	muduo/net/InetAddress.h	/^  uint16_t portNetEndian() const { return addr_.sin_port; }$/;"	f	class:muduo::net::InetAddress
setSockAddrInet6	muduo/net/InetAddress.h	/^  void setSockAddrInet6(const struct sockaddr_in6& addr6) { addr6_ = addr6; }$/;"	f	class:muduo::net::InetAddress
sockets	muduo/net/InetAddress.h	/^namespace sockets$/;"	n	namespace:muduo::net
Poller	muduo/net/Poller.cc	/^Poller::Poller(EventLoop* loop)$/;"	f	class:Poller
hasChannel	muduo/net/Poller.cc	/^bool Poller::hasChannel(Channel* channel) const$/;"	f	class:Poller
~Poller	muduo/net/Poller.cc	/^Poller::~Poller()$/;"	f	class:Poller
ChannelList	muduo/net/Poller.h	/^  typedef std::vector<Channel*> ChannelList;$/;"	t	class:muduo::net::Poller
ChannelMap	muduo/net/Poller.h	/^  typedef std::map<int, Channel*> ChannelMap;$/;"	t	class:muduo::net::Poller
MUDUO_NET_POLLER_H	muduo/net/Poller.h	12;"	d
Poller	muduo/net/Poller.h	/^class Poller : boost::noncopyable$/;"	c	namespace:muduo::net
assertInLoopThread	muduo/net/Poller.h	/^  void assertInLoopThread() const$/;"	f	class:muduo::net::Poller
channels_	muduo/net/Poller.h	/^  ChannelMap channels_;$/;"	m	class:muduo::net::Poller
muduo	muduo/net/Poller.h	/^namespace muduo$/;"	n
net	muduo/net/Poller.h	/^namespace net$/;"	n	namespace:muduo
ownerLoop_	muduo/net/Poller.h	/^  EventLoop* ownerLoop_;$/;"	m	class:muduo::net::Poller
accept	muduo/net/Socket.cc	/^int Socket::accept(InetAddress* peeraddr)$/;"	f	class:Socket
bindAddress	muduo/net/Socket.cc	/^void Socket::bindAddress(const InetAddress& addr)$/;"	f	class:Socket
getTcpInfo	muduo/net/Socket.cc	/^bool Socket::getTcpInfo(struct tcp_info* tcpi) const$/;"	f	class:Socket
getTcpInfoString	muduo/net/Socket.cc	/^bool Socket::getTcpInfoString(char* buf, int len) const$/;"	f	class:Socket
listen	muduo/net/Socket.cc	/^void Socket::listen()$/;"	f	class:Socket
setKeepAlive	muduo/net/Socket.cc	/^void Socket::setKeepAlive(bool on)$/;"	f	class:Socket
setReuseAddr	muduo/net/Socket.cc	/^void Socket::setReuseAddr(bool on)$/;"	f	class:Socket
setReusePort	muduo/net/Socket.cc	/^void Socket::setReusePort(bool on)$/;"	f	class:Socket
setTcpNoDelay	muduo/net/Socket.cc	/^void Socket::setTcpNoDelay(bool on)$/;"	f	class:Socket
shutdownWrite	muduo/net/Socket.cc	/^void Socket::shutdownWrite()$/;"	f	class:Socket
~Socket	muduo/net/Socket.cc	/^Socket::~Socket()$/;"	f	class:Socket
MUDUO_NET_SOCKET_H	muduo/net/Socket.h	12;"	d
Socket	muduo/net/Socket.h	/^  explicit Socket(int sockfd)$/;"	f	class:muduo::net::Socket
Socket	muduo/net/Socket.h	/^class Socket : boost::noncopyable$/;"	c	namespace:muduo::net
fd	muduo/net/Socket.h	/^  int fd() const { return sockfd_; }$/;"	f	class:muduo::net::Socket
muduo	muduo/net/Socket.h	/^namespace muduo$/;"	n
net	muduo/net/Socket.h	/^namespace net$/;"	n	namespace:muduo
sockfd_	muduo/net/Socket.h	/^  const int sockfd_;$/;"	m	class:muduo::net::Socket
SA	muduo/net/SocketsOps.cc	/^typedef struct sockaddr SA;$/;"	t	namespace:__anon3	typeref:struct:__anon3::sockaddr	file:
accept	muduo/net/SocketsOps.cc	/^int sockets::accept(int sockfd, struct sockaddr_in6* addr)  $/;"	f	class:sockets
bindOrDie	muduo/net/SocketsOps.cc	/^void sockets::bindOrDie(int sockfd, const struct sockaddr* addr)$/;"	f	class:sockets
close	muduo/net/SocketsOps.cc	/^void sockets::close(int sockfd)$/;"	f	class:sockets
connect	muduo/net/SocketsOps.cc	/^int sockets::connect(int sockfd, const struct sockaddr* addr)$/;"	f	class:sockets
createNonblockingOrDie	muduo/net/SocketsOps.cc	/^int sockets::createNonblockingOrDie(sa_family_t family)$/;"	f	class:sockets
fromIpPort	muduo/net/SocketsOps.cc	/^void sockets::fromIpPort(const char* ip, uint16_t port,$/;"	f	class:sockets
getLocalAddr	muduo/net/SocketsOps.cc	/^struct sockaddr_in6 sockets::getLocalAddr(int sockfd)$/;"	f	class:sockets
getPeerAddr	muduo/net/SocketsOps.cc	/^struct sockaddr_in6 sockets::getPeerAddr(int sockfd)$/;"	f	class:sockets
getSocketError	muduo/net/SocketsOps.cc	/^int sockets::getSocketError(int sockfd)$/;"	f	class:sockets
isSelfConnect	muduo/net/SocketsOps.cc	/^bool sockets::isSelfConnect(int sockfd)   \/\/判断是否发生了自连接,即源端IP\/PORT=目的端IP\/PORT$/;"	f	class:sockets
listenOrDie	muduo/net/SocketsOps.cc	/^void sockets::listenOrDie(int sockfd)$/;"	f	class:sockets
read	muduo/net/SocketsOps.cc	/^ssize_t sockets::read(int sockfd, void *buf, size_t count)$/;"	f	class:sockets
readv	muduo/net/SocketsOps.cc	/^ssize_t sockets::readv(int sockfd, const struct iovec *iov, int iovcnt)$/;"	f	class:sockets
setNonBlockAndCloseOnExec	muduo/net/SocketsOps.cc	/^void setNonBlockAndCloseOnExec(int sockfd)$/;"	f	namespace:__anon3
shutdownWrite	muduo/net/SocketsOps.cc	/^void sockets::shutdownWrite(int sockfd)$/;"	f	class:sockets
sockaddr_cast	muduo/net/SocketsOps.cc	/^const struct sockaddr* sockets::sockaddr_cast(const struct sockaddr_in* addr)$/;"	f	class:sockets
sockaddr_cast	muduo/net/SocketsOps.cc	/^const struct sockaddr* sockets::sockaddr_cast(const struct sockaddr_in6* addr)$/;"	f	class:sockets
sockaddr_cast	muduo/net/SocketsOps.cc	/^struct sockaddr* sockets::sockaddr_cast(struct sockaddr_in6* addr)$/;"	f	class:sockets
sockaddr_in6_cast	muduo/net/SocketsOps.cc	/^const struct sockaddr_in6* sockets::sockaddr_in6_cast(const struct sockaddr* addr)$/;"	f	class:sockets
sockaddr_in_cast	muduo/net/SocketsOps.cc	/^const struct sockaddr_in* sockets::sockaddr_in_cast(const struct sockaddr* addr)$/;"	f	class:sockets
toIp	muduo/net/SocketsOps.cc	/^void sockets::toIp(char* buf, size_t size,$/;"	f	class:sockets
toIpPort	muduo/net/SocketsOps.cc	/^void sockets::toIpPort(char* buf, size_t size,$/;"	f	class:sockets
write	muduo/net/SocketsOps.cc	/^ssize_t sockets::write(int sockfd, const void *buf, size_t count)$/;"	f	class:sockets
MUDUO_NET_SOCKETSOPS_H	muduo/net/SocketsOps.h	12;"	d
muduo	muduo/net/SocketsOps.h	/^namespace muduo$/;"	n
net	muduo/net/SocketsOps.h	/^namespace net$/;"	n	namespace:muduo
sockets	muduo/net/SocketsOps.h	/^namespace sockets$/;"	n	namespace:muduo::net
TcpClient	muduo/net/TcpClient.cc	/^TcpClient::TcpClient(EventLoop* loop,$/;"	f	class:TcpClient
connect	muduo/net/TcpClient.cc	/^void TcpClient::connect()   \/\/用来向服务端发起连接$/;"	f	class:TcpClient
detail	muduo/net/TcpClient.cc	/^namespace detail$/;"	n	namespace:muduo::net	file:
disconnect	muduo/net/TcpClient.cc	/^void TcpClient::disconnect()  \/\/关闭连接$/;"	f	class:TcpClient
muduo	muduo/net/TcpClient.cc	/^namespace muduo$/;"	n	file:
net	muduo/net/TcpClient.cc	/^namespace net$/;"	n	namespace:muduo	file:
newConnection	muduo/net/TcpClient.cc	/^void TcpClient::newConnection(int sockfd)$/;"	f	class:TcpClient
removeConnection	muduo/net/TcpClient.cc	/^void TcpClient::removeConnection(const TcpConnectionPtr& conn)$/;"	f	class:TcpClient
removeConnection	muduo/net/TcpClient.cc	/^void removeConnection(EventLoop* loop, const TcpConnectionPtr& conn)$/;"	f	namespace:muduo::net::detail
removeConnector	muduo/net/TcpClient.cc	/^void removeConnector(const ConnectorPtr& connector)$/;"	f	namespace:muduo::net::detail
stop	muduo/net/TcpClient.cc	/^void TcpClient::stop()$/;"	f	class:TcpClient
~TcpClient	muduo/net/TcpClient.cc	/^TcpClient::~TcpClient()$/;"	f	class:TcpClient
ConnectorPtr	muduo/net/TcpClient.h	/^typedef boost::shared_ptr<Connector> ConnectorPtr;$/;"	t	namespace:muduo::net
MUDUO_NET_TCPCLIENT_H	muduo/net/TcpClient.h	12;"	d
TcpClient	muduo/net/TcpClient.h	/^class TcpClient : boost::noncopyable$/;"	c	namespace:muduo::net
connect_	muduo/net/TcpClient.h	/^  bool connect_; \/\/ atomic   \/\/ 是否已经建立连接$/;"	m	class:muduo::net::TcpClient
connection	muduo/net/TcpClient.h	/^  TcpConnectionPtr connection() const   \/\/ 返回TcpConnection对象$/;"	f	class:muduo::net::TcpClient
connectionCallback_	muduo/net/TcpClient.h	/^  ConnectionCallback connectionCallback_;$/;"	m	class:muduo::net::TcpClient
connection_	muduo/net/TcpClient.h	/^  TcpConnectionPtr connection_; \/\/ @GuardedBy mutex_  Connector建立连接成功后把控制交给TcpConnection$/;"	m	class:muduo::net::TcpClient
connector_	muduo/net/TcpClient.h	/^  ConnectorPtr connector_; \/\/ avoid revealing Connector  一个TcpClient有一个Connector对应,Connector用来建立连接$/;"	m	class:muduo::net::TcpClient
enableRetry	muduo/net/TcpClient.h	/^  void enableRetry() { retry_ = true; }   \/\/ 允许重连  $/;"	f	class:muduo::net::TcpClient
getLoop	muduo/net/TcpClient.h	/^  EventLoop* getLoop() const { return loop_; }  \/\/ 获取所属的Reactor$/;"	f	class:muduo::net::TcpClient
loop_	muduo/net/TcpClient.h	/^  EventLoop* loop_;  \/\/ 所属的Reactor $/;"	m	class:muduo::net::TcpClient
messageCallback_	muduo/net/TcpClient.h	/^  MessageCallback messageCallback_;$/;"	m	class:muduo::net::TcpClient
muduo	muduo/net/TcpClient.h	/^namespace muduo$/;"	n
mutex_	muduo/net/TcpClient.h	/^  mutable MutexLock mutex_;$/;"	m	class:muduo::net::TcpClient
name	muduo/net/TcpClient.h	/^  const string& name() const   \/\/ 获取名字$/;"	f	class:muduo::net::TcpClient
name_	muduo/net/TcpClient.h	/^  const string name_;$/;"	m	class:muduo::net::TcpClient
net	muduo/net/TcpClient.h	/^namespace net$/;"	n	namespace:muduo
nextConnId_	muduo/net/TcpClient.h	/^  int nextConnId_;          \/\/name_+nextConnid_用于标识一个连接$/;"	m	class:muduo::net::TcpClient
retry	muduo/net/TcpClient.h	/^  bool retry() const { return retry_; }   \/\/ 重连$/;"	f	class:muduo::net::TcpClient
retry_	muduo/net/TcpClient.h	/^  bool retry_;   \/\/ atomic   \/\/是否重连，是指建立的连接成功后又断开是否重连。而Connector的重连是一直不成功是否重试的意思$/;"	m	class:muduo::net::TcpClient
setConnectionCallback	muduo/net/TcpClient.h	/^  void setConnectionCallback(ConnectionCallback&& cb)$/;"	f	class:muduo::net::TcpClient
setConnectionCallback	muduo/net/TcpClient.h	/^  void setConnectionCallback(const ConnectionCallback& cb)$/;"	f	class:muduo::net::TcpClient
setMessageCallback	muduo/net/TcpClient.h	/^  void setMessageCallback(MessageCallback&& cb)$/;"	f	class:muduo::net::TcpClient
setMessageCallback	muduo/net/TcpClient.h	/^  void setMessageCallback(const MessageCallback& cb)$/;"	f	class:muduo::net::TcpClient
setWriteCompleteCallback	muduo/net/TcpClient.h	/^  void setWriteCompleteCallback(WriteCompleteCallback&& cb)$/;"	f	class:muduo::net::TcpClient
setWriteCompleteCallback	muduo/net/TcpClient.h	/^  void setWriteCompleteCallback(const WriteCompleteCallback& cb)$/;"	f	class:muduo::net::TcpClient
writeCompleteCallback_	muduo/net/TcpClient.h	/^  WriteCompleteCallback writeCompleteCallback_;$/;"	m	class:muduo::net::TcpClient
TcpConnection	muduo/net/TcpConnection.cc	/^TcpConnection::TcpConnection(EventLoop* loop,  \/\/ 建立连接需要一个Reactor$/;"	f	class:TcpConnection
connectDestroyed	muduo/net/TcpConnection.cc	/^void TcpConnection::connectDestroyed()$/;"	f	class:TcpConnection
connectEstablished	muduo/net/TcpConnection.cc	/^void TcpConnection::connectEstablished()  \/\/连接建立。在TcpServer中建立连接后会调用次函数$/;"	f	class:TcpConnection
defaultConnectionCallback	muduo/net/TcpConnection.cc	/^void muduo::net::defaultConnectionCallback(const TcpConnectionPtr& conn)$/;"	f	class:muduo::net
defaultMessageCallback	muduo/net/TcpConnection.cc	/^void muduo::net::defaultMessageCallback(const TcpConnectionPtr&,$/;"	f	class:muduo::net
forceClose	muduo/net/TcpConnection.cc	/^void TcpConnection::forceClose()  \/\/关闭Connection$/;"	f	class:TcpConnection
forceCloseInLoop	muduo/net/TcpConnection.cc	/^void TcpConnection::forceCloseInLoop()$/;"	f	class:TcpConnection
forceCloseWithDelay	muduo/net/TcpConnection.cc	/^void TcpConnection::forceCloseWithDelay(double seconds) \/\/延迟关闭，使用了定时器$/;"	f	class:TcpConnection
getTcpInfo	muduo/net/TcpConnection.cc	/^bool TcpConnection::getTcpInfo(struct tcp_info* tcpi) const$/;"	f	class:TcpConnection
getTcpInfoString	muduo/net/TcpConnection.cc	/^string TcpConnection::getTcpInfoString() const$/;"	f	class:TcpConnection
handleClose	muduo/net/TcpConnection.cc	/^void TcpConnection::handleClose() \/\/处理关闭事件$/;"	f	class:TcpConnection
handleError	muduo/net/TcpConnection.cc	/^void TcpConnection::handleError()$/;"	f	class:TcpConnection
handleRead	muduo/net/TcpConnection.cc	/^void TcpConnection::handleRead(Timestamp receiveTime) \/\/数据到来,调用用户定义的接收信息回调$/;"	f	class:TcpConnection
handleWrite	muduo/net/TcpConnection.cc	/^void TcpConnection::handleWrite() \/\/自己处理可写事件$/;"	f	class:TcpConnection
send	muduo/net/TcpConnection.cc	/^void TcpConnection::send(Buffer* buf)$/;"	f	class:TcpConnection
send	muduo/net/TcpConnection.cc	/^void TcpConnection::send(const StringPiece& message)$/;"	f	class:TcpConnection
send	muduo/net/TcpConnection.cc	/^void TcpConnection::send(const void* data, int len)$/;"	f	class:TcpConnection
sendInLoop	muduo/net/TcpConnection.cc	/^void TcpConnection::sendInLoop(const StringPiece& message)$/;"	f	class:TcpConnection
sendInLoop	muduo/net/TcpConnection.cc	/^void TcpConnection::sendInLoop(const void* data, size_t len)$/;"	f	class:TcpConnection
setTcpNoDelay	muduo/net/TcpConnection.cc	/^void TcpConnection::setTcpNoDelay(bool on)$/;"	f	class:TcpConnection
shutdown	muduo/net/TcpConnection.cc	/^void TcpConnection::shutdown()  \/\/半关闭，关闭写端$/;"	f	class:TcpConnection
shutdownInLoop	muduo/net/TcpConnection.cc	/^void TcpConnection::shutdownInLoop()$/;"	f	class:TcpConnection
startRead	muduo/net/TcpConnection.cc	/^void TcpConnection::startRead()$/;"	f	class:TcpConnection
startReadInLoop	muduo/net/TcpConnection.cc	/^void TcpConnection::startReadInLoop() \/\/开始读$/;"	f	class:TcpConnection
stateToString	muduo/net/TcpConnection.cc	/^const char* TcpConnection::stateToString() const$/;"	f	class:TcpConnection
stopRead	muduo/net/TcpConnection.cc	/^void TcpConnection::stopRead()$/;"	f	class:TcpConnection
stopReadInLoop	muduo/net/TcpConnection.cc	/^void TcpConnection::stopReadInLoop()  \/\/停止读$/;"	f	class:TcpConnection
~TcpConnection	muduo/net/TcpConnection.cc	/^TcpConnection::~TcpConnection()$/;"	f	class:TcpConnection
MUDUO_NET_TCPCONNECTION_H	muduo/net/TcpConnection.h	12;"	d
StateE	muduo/net/TcpConnection.h	/^  enum StateE { kDisconnected, kConnecting, kConnected, kDisconnecting };$/;"	g	class:muduo::net::TcpConnection
TcpConnection	muduo/net/TcpConnection.h	/^class TcpConnection : boost::noncopyable,$/;"	c	namespace:muduo::net
TcpConnectionPtr	muduo/net/TcpConnection.h	/^typedef boost::shared_ptr<TcpConnection> TcpConnectionPtr;$/;"	t	namespace:muduo::net
channel_	muduo/net/TcpConnection.h	/^  boost::scoped_ptr<Channel> channel_; \/\/套接字上对应的事件以及处理都将由和套接字对应的Channel来处理$/;"	m	class:muduo::net::TcpConnection
closeCallback_	muduo/net/TcpConnection.h	/^  CloseCallback closeCallback_;   \/\/ 内部的close回调函数$/;"	m	class:muduo::net::TcpConnection
connected	muduo/net/TcpConnection.h	/^  bool connected() const { return state_ == kConnected; }$/;"	f	class:muduo::net::TcpConnection
connectionCallback_	muduo/net/TcpConnection.h	/^  ConnectionCallback connectionCallback_; \/\/连接回调$/;"	m	class:muduo::net::TcpConnection
context_	muduo/net/TcpConnection.h	/^  boost::any context_;  \/\/ boost的any库 可以保持任意的类型 绑定一个未知类型的上下文对象$/;"	m	class:muduo::net::TcpConnection
disconnected	muduo/net/TcpConnection.h	/^  bool disconnected() const { return state_ == kDisconnected; }$/;"	f	class:muduo::net::TcpConnection
getContext	muduo/net/TcpConnection.h	/^  const boost::any& getContext() const$/;"	f	class:muduo::net::TcpConnection
getLoop	muduo/net/TcpConnection.h	/^  EventLoop* getLoop() const { return loop_; }$/;"	f	class:muduo::net::TcpConnection
getMutableContext	muduo/net/TcpConnection.h	/^  boost::any* getMutableContext()$/;"	f	class:muduo::net::TcpConnection
highWaterMarkCallback_	muduo/net/TcpConnection.h	/^  HighWaterMarkCallback highWaterMarkCallback_; \/\/outbuffer快满了的高水位回调函数 $/;"	m	class:muduo::net::TcpConnection
highWaterMark_	muduo/net/TcpConnection.h	/^  size_t highWaterMark_;  \/\/\/\/发送缓冲区数据“上限阀值”，超过这个值$/;"	m	class:muduo::net::TcpConnection
inputBuffer	muduo/net/TcpConnection.h	/^  Buffer* inputBuffer()$/;"	f	class:muduo::net::TcpConnection
inputBuffer_	muduo/net/TcpConnection.h	/^  Buffer inputBuffer_;  \/\/每一个连接都会对应一对读写input\/output buffer$/;"	m	class:muduo::net::TcpConnection
isReading	muduo/net/TcpConnection.h	/^  bool isReading() const { return reading_; }; \/\/ NOT thread safe, may race with start\/stopReadInLoop$/;"	f	class:muduo::net::TcpConnection
kConnected	muduo/net/TcpConnection.h	/^  enum StateE { kDisconnected, kConnecting, kConnected, kDisconnecting };$/;"	e	enum:muduo::net::TcpConnection::StateE
kConnecting	muduo/net/TcpConnection.h	/^  enum StateE { kDisconnected, kConnecting, kConnected, kDisconnecting };$/;"	e	enum:muduo::net::TcpConnection::StateE
kDisconnected	muduo/net/TcpConnection.h	/^  enum StateE { kDisconnected, kConnecting, kConnected, kDisconnecting };$/;"	e	enum:muduo::net::TcpConnection::StateE
kDisconnecting	muduo/net/TcpConnection.h	/^  enum StateE { kDisconnected, kConnecting, kConnected, kDisconnecting };$/;"	e	enum:muduo::net::TcpConnection::StateE
localAddr_	muduo/net/TcpConnection.h	/^  const InetAddress localAddr_; \/\/本地服务器地址$/;"	m	class:muduo::net::TcpConnection
localAddress	muduo/net/TcpConnection.h	/^  const InetAddress& localAddress() const { return localAddr_; }$/;"	f	class:muduo::net::TcpConnection
loop_	muduo/net/TcpConnection.h	/^  EventLoop* loop_;$/;"	m	class:muduo::net::TcpConnection
messageCallback_	muduo/net/TcpConnection.h	/^  MessageCallback messageCallback_; \/\/接收消息到达时的回调$/;"	m	class:muduo::net::TcpConnection
muduo	muduo/net/TcpConnection.h	/^namespace muduo$/;"	n
name	muduo/net/TcpConnection.h	/^  const string& name() const { return name_; }$/;"	f	class:muduo::net::TcpConnection
name_	muduo/net/TcpConnection.h	/^  const string name_;$/;"	m	class:muduo::net::TcpConnection
net	muduo/net/TcpConnection.h	/^namespace net$/;"	n	namespace:muduo
outputBuffer	muduo/net/TcpConnection.h	/^  Buffer* outputBuffer()$/;"	f	class:muduo::net::TcpConnection
outputBuffer_	muduo/net/TcpConnection.h	/^  Buffer outputBuffer_; \/\/ FIXME: use list<Buffer> as output buffer.$/;"	m	class:muduo::net::TcpConnection
peerAddr_	muduo/net/TcpConnection.h	/^  const InetAddress peerAddr_;  \/\/对方客户端地址$/;"	m	class:muduo::net::TcpConnection
peerAddress	muduo/net/TcpConnection.h	/^  const InetAddress& peerAddress() const { return peerAddr_; }$/;"	f	class:muduo::net::TcpConnection
reading_	muduo/net/TcpConnection.h	/^  bool reading_;$/;"	m	class:muduo::net::TcpConnection
setCloseCallback	muduo/net/TcpConnection.h	/^  void setCloseCallback(const CloseCallback& cb)$/;"	f	class:muduo::net::TcpConnection
setConnectionCallback	muduo/net/TcpConnection.h	/^  void setConnectionCallback(const ConnectionCallback& cb)$/;"	f	class:muduo::net::TcpConnection
setContext	muduo/net/TcpConnection.h	/^  void setContext(const boost::any& context)  \/\/boost::any是一个能保存任意类型值的类$/;"	f	class:muduo::net::TcpConnection
setHighWaterMarkCallback	muduo/net/TcpConnection.h	/^  void setHighWaterMarkCallback(const HighWaterMarkCallback& cb, size_t highWaterMark)$/;"	f	class:muduo::net::TcpConnection
setMessageCallback	muduo/net/TcpConnection.h	/^  void setMessageCallback(const MessageCallback& cb)$/;"	f	class:muduo::net::TcpConnection
setState	muduo/net/TcpConnection.h	/^  void setState(StateE s) { state_ = s; }$/;"	f	class:muduo::net::TcpConnection
setWriteCompleteCallback	muduo/net/TcpConnection.h	/^  void setWriteCompleteCallback(const WriteCompleteCallback& cb)$/;"	f	class:muduo::net::TcpConnection
socket_	muduo/net/TcpConnection.h	/^  boost::scoped_ptr<Socket> socket_;  \/\/套接字类$/;"	m	class:muduo::net::TcpConnection
state_	muduo/net/TcpConnection.h	/^  StateE state_;  \/\/ FIXME: use atomic variable$/;"	m	class:muduo::net::TcpConnection
writeCompleteCallback_	muduo/net/TcpConnection.h	/^  WriteCompleteCallback writeCompleteCallback_; \/\/ 低水位回调函数$/;"	m	class:muduo::net::TcpConnection
TcpServer	muduo/net/TcpServer.cc	/^TcpServer::TcpServer(EventLoop* loop,$/;"	f	class:TcpServer
newConnection	muduo/net/TcpServer.cc	/^void TcpServer::newConnection(int sockfd, const InetAddress& peerAddr)$/;"	f	class:TcpServer
removeConnection	muduo/net/TcpServer.cc	/^void TcpServer::removeConnection(const TcpConnectionPtr& conn)$/;"	f	class:TcpServer
removeConnectionInLoop	muduo/net/TcpServer.cc	/^void TcpServer::removeConnectionInLoop(const TcpConnectionPtr& conn)$/;"	f	class:TcpServer
setThreadNum	muduo/net/TcpServer.cc	/^void TcpServer::setThreadNum(int numThreads)  \/\/设置线程池大小$/;"	f	class:TcpServer
start	muduo/net/TcpServer.cc	/^void TcpServer::start() $/;"	f	class:TcpServer
~TcpServer	muduo/net/TcpServer.cc	/^TcpServer::~TcpServer()$/;"	f	class:TcpServer
ConnectionMap	muduo/net/TcpServer.h	/^  typedef std::map<string, TcpConnectionPtr> ConnectionMap; \/\/通过每一个连接的名字来找到对应的连接来维护管理TcpConnection的$/;"	t	class:muduo::net::TcpServer
MUDUO_NET_TCPSERVER_H	muduo/net/TcpServer.h	12;"	d
Option	muduo/net/TcpServer.h	/^  enum Option$/;"	g	class:muduo::net::TcpServer
TcpServer	muduo/net/TcpServer.h	/^class TcpServer : boost::noncopyable$/;"	c	namespace:muduo::net
ThreadInitCallback	muduo/net/TcpServer.h	/^  typedef boost::function<void(EventLoop*)> ThreadInitCallback;$/;"	t	class:muduo::net::TcpServer
acceptor_	muduo/net/TcpServer.h	/^  boost::scoped_ptr<Acceptor> acceptor_; \/\/ avoid revealing Acceptor 使用该类来监听连接，并通过处理该套接字来获得新连接sockfd$/;"	m	class:muduo::net::TcpServer
connectionCallback_	muduo/net/TcpServer.h	/^  ConnectionCallback connectionCallback_;$/;"	m	class:muduo::net::TcpServer
connections_	muduo/net/TcpServer.h	/^  ConnectionMap connections_; \/\/Map的key为connection的name(name与TcpConnectionPtr作映射)$/;"	m	class:muduo::net::TcpServer
getLoop	muduo/net/TcpServer.h	/^  EventLoop* getLoop() const { return loop_; }$/;"	f	class:muduo::net::TcpServer
ipPort	muduo/net/TcpServer.h	/^  const string& ipPort() const { return ipPort_; }$/;"	f	class:muduo::net::TcpServer
ipPort_	muduo/net/TcpServer.h	/^  const string ipPort_; \/\/端口号$/;"	m	class:muduo::net::TcpServer
kNoReusePort	muduo/net/TcpServer.h	/^    kNoReusePort,$/;"	e	enum:muduo::net::TcpServer::Option
kReusePort	muduo/net/TcpServer.h	/^    kReusePort,$/;"	e	enum:muduo::net::TcpServer::Option
loop_	muduo/net/TcpServer.h	/^  EventLoop* loop_;  \/\/ the acceptor loop I\/O复用抽象之后的EventLoop类变量loop_,只用来接受连接，而新连接会用线程池返回的EventLoop来执行IO$/;"	m	class:muduo::net::TcpServer
messageCallback_	muduo/net/TcpServer.h	/^  MessageCallback messageCallback_;$/;"	m	class:muduo::net::TcpServer
muduo	muduo/net/TcpServer.h	/^namespace muduo$/;"	n
name	muduo/net/TcpServer.h	/^  const string& name() const { return name_; }$/;"	f	class:muduo::net::TcpServer
name_	muduo/net/TcpServer.h	/^  const string name_; \/\/主机名,为创建TcpServer时传入$/;"	m	class:muduo::net::TcpServer
net	muduo/net/TcpServer.h	/^namespace net$/;"	n	namespace:muduo
nextConnId_	muduo/net/TcpServer.h	/^  int nextConnId_;  \/\/用来计算标记Connection的名字$/;"	m	class:muduo::net::TcpServer
setConnectionCallback	muduo/net/TcpServer.h	/^  void setConnectionCallback(const ConnectionCallback& cb)  \/\/保存用户自定义连接回调$/;"	f	class:muduo::net::TcpServer
setMessageCallback	muduo/net/TcpServer.h	/^  void setMessageCallback(const MessageCallback& cb)  \/\/保存用户自定义消息回调$/;"	f	class:muduo::net::TcpServer
setThreadInitCallback	muduo/net/TcpServer.h	/^  void setThreadInitCallback(const ThreadInitCallback& cb)$/;"	f	class:muduo::net::TcpServer
setWriteCompleteCallback	muduo/net/TcpServer.h	/^  void setWriteCompleteCallback(const WriteCompleteCallback& cb)  \/\/调用该接口用来设置用户自定义写完成回调$/;"	f	class:muduo::net::TcpServer
started_	muduo/net/TcpServer.h	/^  AtomicInt32 started_;$/;"	m	class:muduo::net::TcpServer
threadInitCallback_	muduo/net/TcpServer.h	/^  ThreadInitCallback threadInitCallback_;$/;"	m	class:muduo::net::TcpServer
threadPool	muduo/net/TcpServer.h	/^  boost::shared_ptr<EventLoopThreadPool> threadPool()$/;"	f	class:muduo::net::TcpServer
threadPool_	muduo/net/TcpServer.h	/^  boost::shared_ptr<EventLoopThreadPool> threadPool_; \/\/实现多个”one loop per thread$/;"	m	class:muduo::net::TcpServer
writeCompleteCallback_	muduo/net/TcpServer.h	/^  WriteCompleteCallback writeCompleteCallback_;$/;"	m	class:muduo::net::TcpServer
restart	muduo/net/Timer.cc	/^void Timer::restart(Timestamp now)$/;"	f	class:Timer
MUDUO_NET_TIMER_H	muduo/net/Timer.h	12;"	d
Timer	muduo/net/Timer.h	/^  Timer(TimerCallback&& cb, Timestamp when, double interval)$/;"	f	class:muduo::net::Timer
Timer	muduo/net/Timer.h	/^  Timer(const TimerCallback& cb, Timestamp when, double interval)$/;"	f	class:muduo::net::Timer
Timer	muduo/net/Timer.h	/^class Timer : boost::noncopyable       $/;"	c	namespace:muduo::net
callback_	muduo/net/Timer.h	/^  const TimerCallback callback_;    \/\/回调函数$/;"	m	class:muduo::net::Timer
expiration	muduo/net/Timer.h	/^  Timestamp expiration() const  { return expiration_; }$/;"	f	class:muduo::net::Timer
expiration_	muduo/net/Timer.h	/^  Timestamp expiration_;    \/\/超时时间（绝对时间）$/;"	m	class:muduo::net::Timer
interval_	muduo/net/Timer.h	/^  const double interval_;   \/\/间隔多久重新闹铃$/;"	m	class:muduo::net::Timer
muduo	muduo/net/Timer.h	/^namespace muduo$/;"	n
net	muduo/net/Timer.h	/^namespace net$/;"	n	namespace:muduo
numCreated	muduo/net/Timer.h	/^  static int64_t numCreated() { return s_numCreated_.get(); }$/;"	f	class:muduo::net::Timer
repeat	muduo/net/Timer.h	/^  bool repeat() const { return repeat_; }$/;"	f	class:muduo::net::Timer
repeat_	muduo/net/Timer.h	/^  const bool repeat_;   \/\/是否重复$/;"	m	class:muduo::net::Timer
run	muduo/net/Timer.h	/^  void run() const        \/\/超时时调用的回调函数$/;"	f	class:muduo::net::Timer
s_numCreated_	muduo/net/Timer.h	/^  static AtomicInt64 s_numCreated_;   \/\/创建Timer序列号使用，static$/;"	m	class:muduo::net::Timer
sequence	muduo/net/Timer.h	/^  int64_t sequence() const { return sequence_; }$/;"	f	class:muduo::net::Timer
sequence_	muduo/net/Timer.h	/^  const int64_t sequence_;    \/\/Timer序号$/;"	m	class:muduo::net::Timer
MUDUO_NET_TIMERID_H	muduo/net/TimerId.h	12;"	d
TimerId	muduo/net/TimerId.h	/^  TimerId()$/;"	f	class:muduo::net::TimerId
TimerId	muduo/net/TimerId.h	/^  TimerId(Timer* timer, int64_t seq)$/;"	f	class:muduo::net::TimerId
TimerId	muduo/net/TimerId.h	/^class TimerId : public muduo::copyable$/;"	c	namespace:muduo::net
muduo	muduo/net/TimerId.h	/^namespace muduo$/;"	n
net	muduo/net/TimerId.h	/^namespace net$/;"	n	namespace:muduo
sequence_	muduo/net/TimerId.h	/^  int64_t sequence_;  \/\/序列号$/;"	m	class:muduo::net::TimerId
timer_	muduo/net/TimerId.h	/^  Timer* timer_;        \/\/一个Timer*指针$/;"	m	class:muduo::net::TimerId
TimerQueue	muduo/net/TimerQueue.cc	/^TimerQueue::TimerQueue(EventLoop* loop)$/;"	f	class:TimerQueue
__STDC_LIMIT_MACROS	muduo/net/TimerQueue.cc	10;"	d	file:
addTimer	muduo/net/TimerQueue.cc	/^TimerId TimerQueue::addTimer(TimerCallback&& cb,$/;"	f	class:TimerQueue
addTimer	muduo/net/TimerQueue.cc	/^TimerId TimerQueue::addTimer(const TimerCallback& cb,   \/\/添加新的定时器$/;"	f	class:TimerQueue
addTimerInLoop	muduo/net/TimerQueue.cc	/^void TimerQueue::addTimerInLoop(Timer* timer)$/;"	f	class:TimerQueue
cancel	muduo/net/TimerQueue.cc	/^void TimerQueue::cancel(TimerId timerId)$/;"	f	class:TimerQueue
cancelInLoop	muduo/net/TimerQueue.cc	/^void TimerQueue::cancelInLoop(TimerId timerId)$/;"	f	class:TimerQueue
createTimerfd	muduo/net/TimerQueue.cc	/^int createTimerfd()   \/\/创建非阻塞timerfd$/;"	f	namespace:muduo::net::detail
detail	muduo/net/TimerQueue.cc	/^namespace detail$/;"	n	namespace:muduo::net	file:
getExpired	muduo/net/TimerQueue.cc	/^std::vector<TimerQueue::Entry> TimerQueue::getExpired(Timestamp now)    \/\/找到now之前的超时的定时器列表$/;"	f	class:TimerQueue
handleRead	muduo/net/TimerQueue.cc	/^void TimerQueue::handleRead()   \/\/处理timerfd读事件$/;"	f	class:TimerQueue
howMuchTimeFromNow	muduo/net/TimerQueue.cc	/^struct timespec howMuchTimeFromNow(Timestamp when)  \/\/现在距离超时时间when还有多久$/;"	f	namespace:muduo::net::detail
insert	muduo/net/TimerQueue.cc	/^bool TimerQueue::insert(Timer* timer) \/\/插入一个timer$/;"	f	class:TimerQueue
muduo	muduo/net/TimerQueue.cc	/^namespace muduo$/;"	n	file:
net	muduo/net/TimerQueue.cc	/^namespace net$/;"	n	namespace:muduo	file:
readTimerfd	muduo/net/TimerQueue.cc	/^void readTimerfd(int timerfd, Timestamp now)  \/\/处理超时事件。超时后，timerfd变为可读$/;"	f	namespace:muduo::net::detail
reset	muduo/net/TimerQueue.cc	/^void TimerQueue::reset(const std::vector<Entry>& expired, Timestamp now)  \/\/把要重复设置的定时器重新加入到定时器中$/;"	f	class:TimerQueue
resetTimerfd	muduo/net/TimerQueue.cc	/^void resetTimerfd(int timerfd, Timestamp expiration)    \/\/重新设置timerfd表示的定时器,超时时间为expiration，并启动$/;"	f	namespace:muduo::net::detail
~TimerQueue	muduo/net/TimerQueue.cc	/^TimerQueue::~TimerQueue()$/;"	f	class:TimerQueue
ActiveTimer	muduo/net/TimerQueue.h	/^  typedef std::pair<Timer*, int64_t> ActiveTimer; \/\/Timer*指针和定时器序列号$/;"	t	class:muduo::net::TimerQueue
ActiveTimerSet	muduo/net/TimerQueue.h	/^  typedef std::set<ActiveTimer> ActiveTimerSet; \/\/元素为定时器和其序列号$/;"	t	class:muduo::net::TimerQueue
Entry	muduo/net/TimerQueue.h	/^  typedef std::pair<Timestamp, Timer*> Entry;  \/\/std::pair支持比较运算,存储超时事件和Timer*指针$/;"	t	class:muduo::net::TimerQueue
MUDUO_NET_TIMERQUEUE_H	muduo/net/TimerQueue.h	12;"	d
TimerList	muduo/net/TimerQueue.h	/^  typedef std::set<Entry> TimerList;  \/\/元素为超时时间和指向超时的定时器$/;"	t	class:muduo::net::TimerQueue
TimerQueue	muduo/net/TimerQueue.h	/^class TimerQueue : boost::noncopyable$/;"	c	namespace:muduo::net
activeTimers_	muduo/net/TimerQueue.h	/^  ActiveTimerSet activeTimers_;$/;"	m	class:muduo::net::TimerQueue
callingExpiredTimers_	muduo/net/TimerQueue.h	/^  bool callingExpiredTimers_; \/* atomic *\/  \/\/是否正在处理超时事件$/;"	m	class:muduo::net::TimerQueue
cancelingTimers_	muduo/net/TimerQueue.h	/^  ActiveTimerSet cancelingTimers_;  \/\/取消了的定时器的集合$/;"	m	class:muduo::net::TimerQueue
loop_	muduo/net/TimerQueue.h	/^  EventLoop* loop_;$/;"	m	class:muduo::net::TimerQueue
muduo	muduo/net/TimerQueue.h	/^namespace muduo$/;"	n
net	muduo/net/TimerQueue.h	/^namespace net$/;"	n	namespace:muduo
timerfdChannel_	muduo/net/TimerQueue.h	/^  Channel timerfdChannel_;  \/\/用于观察timerfd_的readable事件（超时则可读）$/;"	m	class:muduo::net::TimerQueue
timerfd_	muduo/net/TimerQueue.h	/^  const int timerfd_;$/;"	m	class:muduo::net::TimerQueue
timers_	muduo/net/TimerQueue.h	/^  TimerList timers_;    \/\/定时器集合$/;"	m	class:muduo::net::TimerQueue
ZlibInputStream	muduo/net/ZlibStream.h	/^  explicit ZlibInputStream(Buffer* output)$/;"	f	class:muduo::net::ZlibInputStream
ZlibInputStream	muduo/net/ZlibStream.h	/^class ZlibInputStream : boost::noncopyable$/;"	c	namespace:muduo::net
ZlibOutputStream	muduo/net/ZlibStream.h	/^  explicit ZlibOutputStream(Buffer* output)$/;"	f	class:muduo::net::ZlibOutputStream
ZlibOutputStream	muduo/net/ZlibStream.h	/^class ZlibOutputStream : boost::noncopyable$/;"	c	namespace:muduo::net
bufferSize_	muduo/net/ZlibStream.h	/^  int bufferSize_;$/;"	m	class:muduo::net::ZlibOutputStream
compress	muduo/net/ZlibStream.h	/^  int compress(int flush)$/;"	f	class:muduo::net::ZlibOutputStream
finish	muduo/net/ZlibStream.h	/^  bool finish()$/;"	f	class:muduo::net::ZlibOutputStream
inputBytes	muduo/net/ZlibStream.h	/^  int64_t inputBytes() const { return zstream_.total_in; }$/;"	f	class:muduo::net::ZlibOutputStream
internalOutputBufferSize	muduo/net/ZlibStream.h	/^  int internalOutputBufferSize() const { return bufferSize_; }$/;"	f	class:muduo::net::ZlibOutputStream
muduo	muduo/net/ZlibStream.h	/^namespace muduo$/;"	n
net	muduo/net/ZlibStream.h	/^namespace net$/;"	n	namespace:muduo
outputBytes	muduo/net/ZlibStream.h	/^  int64_t outputBytes() const { return zstream_.total_out; }$/;"	f	class:muduo::net::ZlibOutputStream
output_	muduo/net/ZlibStream.h	/^  Buffer* output_;$/;"	m	class:muduo::net::ZlibInputStream
output_	muduo/net/ZlibStream.h	/^  Buffer* output_;$/;"	m	class:muduo::net::ZlibOutputStream
write	muduo/net/ZlibStream.h	/^  bool write(Buffer* input)$/;"	f	class:muduo::net::ZlibOutputStream
write	muduo/net/ZlibStream.h	/^  bool write(StringPiece buf)$/;"	f	class:muduo::net::ZlibOutputStream
zerror_	muduo/net/ZlibStream.h	/^  int zerror_;$/;"	m	class:muduo::net::ZlibInputStream
zerror_	muduo/net/ZlibStream.h	/^  int zerror_;$/;"	m	class:muduo::net::ZlibOutputStream
zlibErrorCode	muduo/net/ZlibStream.h	/^  int zlibErrorCode() const { return zerror_; }$/;"	f	class:muduo::net::ZlibOutputStream
zlibErrorMessage	muduo/net/ZlibStream.h	/^  const char* zlibErrorMessage() const { return zstream_.msg; }$/;"	f	class:muduo::net::ZlibOutputStream
zstream_	muduo/net/ZlibStream.h	/^  z_stream zstream_;$/;"	m	class:muduo::net::ZlibInputStream
zstream_	muduo/net/ZlibStream.h	/^  z_stream zstream_;$/;"	m	class:muduo::net::ZlibOutputStream
~ZlibInputStream	muduo/net/ZlibStream.h	/^  ~ZlibInputStream()$/;"	f	class:muduo::net::ZlibInputStream
~ZlibOutputStream	muduo/net/ZlibStream.h	/^  ~ZlibOutputStream()$/;"	f	class:muduo::net::ZlibOutputStream
BoilerPlate	muduo/net/boilerplate.h	/^class BoilerPlate : boost::noncopyable$/;"	c	namespace:muduo::net
MUDUO_NET_BOILERPLATE_H	muduo/net/boilerplate.h	13;"	d
muduo	muduo/net/boilerplate.h	/^namespace muduo$/;"	n
net	muduo/net/boilerplate.h	/^namespace net$/;"	n	namespace:muduo
parseRequest	muduo/net/http/HttpContext.cc	/^bool HttpContext::parseRequest(Buffer* buf, Timestamp receiveTime)  \/\/处理请求，利用状态机编程$/;"	f	class:HttpContext
processRequestLine	muduo/net/http/HttpContext.cc	/^bool HttpContext::processRequestLine(const char* begin, const char* end)  \/\/解析请求行  格式 : GET http:\/\/....  HTTP\/1.1$/;"	f	class:HttpContext
HttpContext	muduo/net/http/HttpContext.h	/^  HttpContext()$/;"	f	class:muduo::net::HttpContext
HttpContext	muduo/net/http/HttpContext.h	/^class HttpContext : public muduo::copyable    $/;"	c	namespace:muduo::net
HttpRequestParseState	muduo/net/http/HttpContext.h	/^  enum HttpRequestParseState  \/\/解析请求状态的枚举常量$/;"	g	class:muduo::net::HttpContext
MUDUO_NET_HTTP_HTTPCONTEXT_H	muduo/net/http/HttpContext.h	12;"	d
gotAll	muduo/net/http/HttpContext.h	/^  bool gotAll() const$/;"	f	class:muduo::net::HttpContext
kExpectBody	muduo/net/http/HttpContext.h	/^    kExpectBody,  \/\/当前正处于解析请求实体的状态$/;"	e	enum:muduo::net::HttpContext::HttpRequestParseState
kExpectHeaders	muduo/net/http/HttpContext.h	/^    kExpectHeaders,  \/\/当前正处于解析请求头部的状态$/;"	e	enum:muduo::net::HttpContext::HttpRequestParseState
kExpectRequestLine	muduo/net/http/HttpContext.h	/^    kExpectRequestLine,  \/\/当前正处于解析请求行的状态$/;"	e	enum:muduo::net::HttpContext::HttpRequestParseState
kGotAll	muduo/net/http/HttpContext.h	/^    kGotAll,   \/\/解析完毕$/;"	e	enum:muduo::net::HttpContext::HttpRequestParseState
muduo	muduo/net/http/HttpContext.h	/^namespace muduo$/;"	n
net	muduo/net/http/HttpContext.h	/^namespace net$/;"	n	namespace:muduo
request	muduo/net/http/HttpContext.h	/^  HttpRequest& request()$/;"	f	class:muduo::net::HttpContext
request	muduo/net/http/HttpContext.h	/^  const HttpRequest& request() const  \/\/返回request$/;"	f	class:muduo::net::HttpContext
request_	muduo/net/http/HttpContext.h	/^  HttpRequest request_;  \/\/ http请求$/;"	m	class:muduo::net::HttpContext
reset	muduo/net/http/HttpContext.h	/^  void reset()   \/\/重置HttpContext状态$/;"	f	class:muduo::net::HttpContext
state_	muduo/net/http/HttpContext.h	/^  HttpRequestParseState state_;  \/\/ 请求解析状态$/;"	m	class:muduo::net::HttpContext
HttpRequest	muduo/net/http/HttpRequest.h	/^  HttpRequest()$/;"	f	class:muduo::net::HttpRequest
HttpRequest	muduo/net/http/HttpRequest.h	/^class HttpRequest : public muduo::copyable$/;"	c	namespace:muduo::net
MUDUO_NET_HTTP_HTTPREQUEST_H	muduo/net/http/HttpRequest.h	12;"	d
Method	muduo/net/http/HttpRequest.h	/^  enum Method   \/\/请求方法$/;"	g	class:muduo::net::HttpRequest
Version	muduo/net/http/HttpRequest.h	/^  enum Version   \/\/请求方法$/;"	g	class:muduo::net::HttpRequest
addHeader	muduo/net/http/HttpRequest.h	/^  void addHeader(const char* start, const char* colon, const char* end)$/;"	f	class:muduo::net::HttpRequest
getHeader	muduo/net/http/HttpRequest.h	/^  string getHeader(const string& field) const  \/\/根据头部字段返回值内容$/;"	f	class:muduo::net::HttpRequest
getVersion	muduo/net/http/HttpRequest.h	/^  Version getVersion() const$/;"	f	class:muduo::net::HttpRequest
headers	muduo/net/http/HttpRequest.h	/^  const std::map<string, string>& headers() const    \/\/返回头部列表$/;"	f	class:muduo::net::HttpRequest
headers_	muduo/net/http/HttpRequest.h	/^  std::map<string, string> headers_;  \/\/头部列表$/;"	m	class:muduo::net::HttpRequest
kDelete	muduo/net/http/HttpRequest.h	/^    kInvalid, kGet, kPost, kHead, kPut, kDelete$/;"	e	enum:muduo::net::HttpRequest::Method
kGet	muduo/net/http/HttpRequest.h	/^    kInvalid, kGet, kPost, kHead, kPut, kDelete$/;"	e	enum:muduo::net::HttpRequest::Method
kHead	muduo/net/http/HttpRequest.h	/^    kInvalid, kGet, kPost, kHead, kPut, kDelete$/;"	e	enum:muduo::net::HttpRequest::Method
kHttp10	muduo/net/http/HttpRequest.h	/^    kUnknown, kHttp10, kHttp11$/;"	e	enum:muduo::net::HttpRequest::Version
kHttp11	muduo/net/http/HttpRequest.h	/^    kUnknown, kHttp10, kHttp11$/;"	e	enum:muduo::net::HttpRequest::Version
kInvalid	muduo/net/http/HttpRequest.h	/^    kInvalid, kGet, kPost, kHead, kPut, kDelete$/;"	e	enum:muduo::net::HttpRequest::Method
kPost	muduo/net/http/HttpRequest.h	/^    kInvalid, kGet, kPost, kHead, kPut, kDelete$/;"	e	enum:muduo::net::HttpRequest::Method
kPut	muduo/net/http/HttpRequest.h	/^    kInvalid, kGet, kPost, kHead, kPut, kDelete$/;"	e	enum:muduo::net::HttpRequest::Method
kUnknown	muduo/net/http/HttpRequest.h	/^    kUnknown, kHttp10, kHttp11$/;"	e	enum:muduo::net::HttpRequest::Version
method	muduo/net/http/HttpRequest.h	/^  Method method() const   \/\/返回请求方法$/;"	f	class:muduo::net::HttpRequest
methodString	muduo/net/http/HttpRequest.h	/^  const char* methodString() const  \/\/请求方法转换成字符串$/;"	f	class:muduo::net::HttpRequest
method_	muduo/net/http/HttpRequest.h	/^  Method method_; \/\/请求方法$/;"	m	class:muduo::net::HttpRequest
muduo	muduo/net/http/HttpRequest.h	/^namespace muduo$/;"	n
net	muduo/net/http/HttpRequest.h	/^namespace net$/;"	n	namespace:muduo
path	muduo/net/http/HttpRequest.h	/^  const string& path() const$/;"	f	class:muduo::net::HttpRequest
path_	muduo/net/http/HttpRequest.h	/^  string path_; \/\/请求路径$/;"	m	class:muduo::net::HttpRequest
query	muduo/net/http/HttpRequest.h	/^  const string& query() const$/;"	f	class:muduo::net::HttpRequest
query_	muduo/net/http/HttpRequest.h	/^  string query_;  \/\/请求参数$/;"	m	class:muduo::net::HttpRequest
receiveTime	muduo/net/http/HttpRequest.h	/^  Timestamp receiveTime() const$/;"	f	class:muduo::net::HttpRequest
receiveTime_	muduo/net/http/HttpRequest.h	/^  Timestamp receiveTime_; \/\/请求时间$/;"	m	class:muduo::net::HttpRequest
setMethod	muduo/net/http/HttpRequest.h	/^  bool setMethod(const char* start, const char* end)  \/\/设置方法$/;"	f	class:muduo::net::HttpRequest
setPath	muduo/net/http/HttpRequest.h	/^  void setPath(const char* start, const char* end)  \/\/设置路径 $/;"	f	class:muduo::net::HttpRequest
setQuery	muduo/net/http/HttpRequest.h	/^  void setQuery(const char* start, const char* end)  \/\/设置参数$/;"	f	class:muduo::net::HttpRequest
setReceiveTime	muduo/net/http/HttpRequest.h	/^  void setReceiveTime(Timestamp t)  \/\/设置接收时间$/;"	f	class:muduo::net::HttpRequest
setVersion	muduo/net/http/HttpRequest.h	/^  void setVersion(Version v)  \/\/设置版本$/;"	f	class:muduo::net::HttpRequest
swap	muduo/net/http/HttpRequest.h	/^  void swap(HttpRequest& that)  \/\/交换HttpRequest内容$/;"	f	class:muduo::net::HttpRequest
version_	muduo/net/http/HttpRequest.h	/^  Version version_; \/\/协议版本1.0\/1.1$/;"	m	class:muduo::net::HttpRequest
appendToBuffer	muduo/net/http/HttpResponse.cc	/^void HttpResponse::appendToBuffer(Buffer* output) const$/;"	f	class:HttpResponse
HttpResponse	muduo/net/http/HttpResponse.h	/^  explicit HttpResponse(bool close)$/;"	f	class:muduo::net::HttpResponse
HttpResponse	muduo/net/http/HttpResponse.h	/^class HttpResponse : public muduo::copyable$/;"	c	namespace:muduo::net
HttpStatusCode	muduo/net/http/HttpResponse.h	/^  enum HttpStatusCode   \/\/HTTP状态码$/;"	g	class:muduo::net::HttpResponse
MUDUO_NET_HTTP_HTTPRESPONSE_H	muduo/net/http/HttpResponse.h	12;"	d
addHeader	muduo/net/http/HttpResponse.h	/^  void addHeader(const string& key, const string& value)$/;"	f	class:muduo::net::HttpResponse
body_	muduo/net/http/HttpResponse.h	/^  string body_; \/\/实体(响应报文)$/;"	m	class:muduo::net::HttpResponse
closeConnection	muduo/net/http/HttpResponse.h	/^  bool closeConnection() const$/;"	f	class:muduo::net::HttpResponse
closeConnection_	muduo/net/http/HttpResponse.h	/^  bool closeConnection_;  \/\/\/\/是否 keep-alive$/;"	m	class:muduo::net::HttpResponse
headers_	muduo/net/http/HttpResponse.h	/^  std::map<string, string> headers_;  \/\/头列表$/;"	m	class:muduo::net::HttpResponse
k200Ok	muduo/net/http/HttpResponse.h	/^    k200Ok = 200,   \/\/请求成功$/;"	e	enum:muduo::net::HttpResponse::HttpStatusCode
k301MovedPermanently	muduo/net/http/HttpResponse.h	/^    k301MovedPermanently = 301, \/\/资源被转移，请求将被重定向$/;"	e	enum:muduo::net::HttpResponse::HttpStatusCode
k400BadRequest	muduo/net/http/HttpResponse.h	/^    k400BadRequest = 400, \/\/通用客户请求错误$/;"	e	enum:muduo::net::HttpResponse::HttpStatusCode
k404NotFound	muduo/net/http/HttpResponse.h	/^    k404NotFound = 404, \/\/资源未找到$/;"	e	enum:muduo::net::HttpResponse::HttpStatusCode
kUnknown	muduo/net/http/HttpResponse.h	/^    kUnknown,$/;"	e	enum:muduo::net::HttpResponse::HttpStatusCode
muduo	muduo/net/http/HttpResponse.h	/^namespace muduo$/;"	n
net	muduo/net/http/HttpResponse.h	/^namespace net$/;"	n	namespace:muduo
setBody	muduo/net/http/HttpResponse.h	/^  void setBody(const string& body)$/;"	f	class:muduo::net::HttpResponse
setCloseConnection	muduo/net/http/HttpResponse.h	/^  void setCloseConnection(bool on)  $/;"	f	class:muduo::net::HttpResponse
setContentType	muduo/net/http/HttpResponse.h	/^  void setContentType(const string& contentType)$/;"	f	class:muduo::net::HttpResponse
setStatusCode	muduo/net/http/HttpResponse.h	/^  void setStatusCode(HttpStatusCode code)   \/\/设置状态码$/;"	f	class:muduo::net::HttpResponse
setStatusMessage	muduo/net/http/HttpResponse.h	/^  void setStatusMessage(const string& message)  \/\/设置状态码对应的文本信息$/;"	f	class:muduo::net::HttpResponse
statusCode_	muduo/net/http/HttpResponse.h	/^  HttpStatusCode statusCode_; \/\/状态码$/;"	m	class:muduo::net::HttpResponse
statusMessage_	muduo/net/http/HttpResponse.h	/^  string statusMessage_;  \/\/状态响应码对应的文本信息$/;"	m	class:muduo::net::HttpResponse
HttpServer	muduo/net/http/HttpServer.cc	/^HttpServer::HttpServer(EventLoop* loop,$/;"	f	class:HttpServer
defaultHttpCallback	muduo/net/http/HttpServer.cc	/^void defaultHttpCallback(const HttpRequest&, HttpResponse* resp)  \/\/默认HTTP回调，返回错误码$/;"	f	namespace:muduo::net::detail
detail	muduo/net/http/HttpServer.cc	/^namespace detail$/;"	n	namespace:muduo::net	file:
muduo	muduo/net/http/HttpServer.cc	/^namespace muduo$/;"	n	file:
net	muduo/net/http/HttpServer.cc	/^namespace net$/;"	n	namespace:muduo	file:
onConnection	muduo/net/http/HttpServer.cc	/^void HttpServer::onConnection(const TcpConnectionPtr& conn)$/;"	f	class:HttpServer
onMessage	muduo/net/http/HttpServer.cc	/^void HttpServer::onMessage(const TcpConnectionPtr& conn,$/;"	f	class:HttpServer
onRequest	muduo/net/http/HttpServer.cc	/^void HttpServer::onRequest(const TcpConnectionPtr& conn, const HttpRequest& req)$/;"	f	class:HttpServer
start	muduo/net/http/HttpServer.cc	/^void HttpServer::start()$/;"	f	class:HttpServer
~HttpServer	muduo/net/http/HttpServer.cc	/^HttpServer::~HttpServer()$/;"	f	class:HttpServer
HttpCallback	muduo/net/http/HttpServer.h	/^                                HttpResponse*)> HttpCallback;  \/\/http回调类型$/;"	t	class:muduo::net::HttpServer
HttpServer	muduo/net/http/HttpServer.h	/^class HttpServer : boost::noncopyable$/;"	c	namespace:muduo::net
MUDUO_NET_HTTP_HTTPSERVER_H	muduo/net/http/HttpServer.h	12;"	d
getLoop	muduo/net/http/HttpServer.h	/^  EventLoop* getLoop() const { return server_.getLoop(); }$/;"	f	class:muduo::net::HttpServer
httpCallback_	muduo/net/http/HttpServer.h	/^  HttpCallback httpCallback_;  \/\/在处理http请求时(即调用onRequest)的过程中回调此函数，对请求进行具体的处理。$/;"	m	class:muduo::net::HttpServer
muduo	muduo/net/http/HttpServer.h	/^namespace muduo$/;"	n
net	muduo/net/http/HttpServer.h	/^namespace net$/;"	n	namespace:muduo
server_	muduo/net/http/HttpServer.h	/^  TcpServer server_;  \/\/http服务器也是一个Tcp服务器，所以包含一个TcpServer$/;"	m	class:muduo::net::HttpServer
setHttpCallback	muduo/net/http/HttpServer.h	/^  void setHttpCallback(const HttpCallback& cb)$/;"	f	class:muduo::net::HttpServer
setThreadNum	muduo/net/http/HttpServer.h	/^  void setThreadNum(int numThreads)$/;"	f	class:muduo::net::HttpServer
BOOST_AUTO_TEST_CASE	muduo/net/http/tests/HttpRequest_unittest.cc	/^BOOST_AUTO_TEST_CASE(testParseRequestAllInOne)$/;"	f
BOOST_AUTO_TEST_CASE	muduo/net/http/tests/HttpRequest_unittest.cc	/^BOOST_AUTO_TEST_CASE(testParseRequestEmptyHeaderValue)$/;"	f
BOOST_AUTO_TEST_CASE	muduo/net/http/tests/HttpRequest_unittest.cc	/^BOOST_AUTO_TEST_CASE(testParseRequestInTwoPieces)$/;"	f
BOOST_TEST_DYN_LINK	muduo/net/http/tests/HttpRequest_unittest.cc	6;"	d	file:
BOOST_TEST_MAIN	muduo/net/http/tests/HttpRequest_unittest.cc	5;"	d	file:
benchmark	muduo/net/http/tests/HttpServer_test.cc	/^bool benchmark = false;$/;"	v
favicon	muduo/net/http/tests/HttpServer_test.cc	/^char favicon[555] = {$/;"	v
main	muduo/net/http/tests/HttpServer_test.cc	/^int main(int argc, char* argv[])$/;"	f
onRequest	muduo/net/http/tests/HttpServer_test.cc	/^void onRequest(const HttpRequest& req, HttpResponse* resp)$/;"	f
Inspector	muduo/net/inspect/Inspector.cc	/^Inspector::Inspector(EventLoop* loop,$/;"	f	class:Inspector
add	muduo/net/inspect/Inspector.cc	/^void Inspector::add(const string& module,$/;"	f	class:Inspector
favicon	muduo/net/inspect/Inspector.cc	/^char favicon[1743] =$/;"	v
g_globalInspector	muduo/net/inspect/Inspector.cc	/^Inspector* g_globalInspector = 0;$/;"	m	namespace:__anon6	file:
onRequest	muduo/net/inspect/Inspector.cc	/^void Inspector::onRequest(const HttpRequest& req, HttpResponse* resp)$/;"	f	class:Inspector
remove	muduo/net/inspect/Inspector.cc	/^void Inspector::remove(const string& module, const string& command)$/;"	f	class:Inspector
split	muduo/net/inspect/Inspector.cc	/^std::vector<string> split(const string& str)$/;"	f	namespace:__anon6
start	muduo/net/inspect/Inspector.cc	/^void Inspector::start()$/;"	f	class:Inspector
~Inspector	muduo/net/inspect/Inspector.cc	/^Inspector::~Inspector()$/;"	f	class:Inspector
ArgList	muduo/net/inspect/Inspector.h	/^  typedef std::vector<string> ArgList;$/;"	t	class:muduo::net::Inspector
Callback	muduo/net/inspect/Inspector.h	/^  typedef boost::function<string (HttpRequest::Method, const ArgList& args)> Callback;$/;"	t	class:muduo::net::Inspector
CommandList	muduo/net/inspect/Inspector.h	/^  typedef std::map<string, Callback> CommandList;$/;"	t	class:muduo::net::Inspector
HelpList	muduo/net/inspect/Inspector.h	/^  typedef std::map<string, string> HelpList;$/;"	t	class:muduo::net::Inspector
Inspector	muduo/net/inspect/Inspector.h	/^class Inspector : boost::noncopyable$/;"	c	namespace:muduo::net
MUDUO_NET_INSPECT_INSPECTOR_H	muduo/net/inspect/Inspector.h	12;"	d
helps_	muduo/net/inspect/Inspector.h	/^  std::map<string, HelpList> helps_;$/;"	m	class:muduo::net::Inspector
modules_	muduo/net/inspect/Inspector.h	/^  std::map<string, CommandList> modules_;$/;"	m	class:muduo::net::Inspector
muduo	muduo/net/inspect/Inspector.h	/^namespace muduo$/;"	n
mutex_	muduo/net/inspect/Inspector.h	/^  MutexLock mutex_;$/;"	m	class:muduo::net::Inspector
net	muduo/net/inspect/Inspector.h	/^namespace net$/;"	n	namespace:muduo
performanceInspector_	muduo/net/inspect/Inspector.h	/^  boost::scoped_ptr<PerformanceInspector> performanceInspector_;$/;"	m	class:muduo::net::Inspector
processInspector_	muduo/net/inspect/Inspector.h	/^  boost::scoped_ptr<ProcessInspector> processInspector_;$/;"	m	class:muduo::net::Inspector
server_	muduo/net/inspect/Inspector.h	/^  HttpServer server_;$/;"	m	class:muduo::net::Inspector
systemInspector_	muduo/net/inspect/Inspector.h	/^  boost::scoped_ptr<SystemInspector> systemInspector_;$/;"	m	class:muduo::net::Inspector
cmdline	muduo/net/inspect/PerformanceInspector.cc	/^string PerformanceInspector::cmdline(HttpRequest::Method, const Inspector::ArgList&)$/;"	f	class:PerformanceInspector
growth	muduo/net/inspect/PerformanceInspector.cc	/^string PerformanceInspector::growth(HttpRequest::Method, const Inspector::ArgList&)$/;"	f	class:PerformanceInspector
heap	muduo/net/inspect/PerformanceInspector.cc	/^string PerformanceInspector::heap(HttpRequest::Method, const Inspector::ArgList&)$/;"	f	class:PerformanceInspector
memhistogram	muduo/net/inspect/PerformanceInspector.cc	/^string PerformanceInspector::memhistogram(HttpRequest::Method, const Inspector::ArgList&)$/;"	f	class:PerformanceInspector
memstats	muduo/net/inspect/PerformanceInspector.cc	/^string PerformanceInspector::memstats(HttpRequest::Method, const Inspector::ArgList&)$/;"	f	class:PerformanceInspector
profile	muduo/net/inspect/PerformanceInspector.cc	/^string PerformanceInspector::profile(HttpRequest::Method, const Inspector::ArgList&)$/;"	f	class:PerformanceInspector
registerCommands	muduo/net/inspect/PerformanceInspector.cc	/^void PerformanceInspector::registerCommands(Inspector* ins)$/;"	f	class:PerformanceInspector
releaseFreeMemory	muduo/net/inspect/PerformanceInspector.cc	/^string PerformanceInspector::releaseFreeMemory(HttpRequest::Method, const Inspector::ArgList&)$/;"	f	class:PerformanceInspector
MUDUO_NET_INSPECT_PERFORMANCEINSPECTOR_H	muduo/net/inspect/PerformanceInspector.h	12;"	d
PerformanceInspector	muduo/net/inspect/PerformanceInspector.h	/^class PerformanceInspector : boost::noncopyable$/;"	c	namespace:muduo::net
muduo	muduo/net/inspect/PerformanceInspector.h	/^namespace muduo$/;"	n
net	muduo/net/inspect/PerformanceInspector.h	/^namespace net$/;"	n	namespace:muduo
getCpuTime	muduo/net/inspect/ProcessInspector.cc	/^ProcessInfo::CpuTime getCpuTime(StringPiece data)$/;"	f	namespace:muduo::inspect
getLong	muduo/net/inspect/ProcessInspector.cc	/^long getLong(const string& procStatus, const char* key)$/;"	f	namespace:muduo::inspect
getProcessName	muduo/net/inspect/ProcessInspector.cc	/^string getProcessName(const string& procStatus)$/;"	f	namespace:muduo::inspect
inspect	muduo/net/inspect/ProcessInspector.cc	/^namespace inspect$/;"	n	namespace:muduo	file:
muduo	muduo/net/inspect/ProcessInspector.cc	/^namespace muduo$/;"	n	file:
next	muduo/net/inspect/ProcessInspector.cc	/^StringPiece next(StringPiece data)$/;"	f	namespace:muduo::inspect
openedFiles	muduo/net/inspect/ProcessInspector.cc	/^string ProcessInspector::openedFiles(HttpRequest::Method, const Inspector::ArgList&)$/;"	f	class:ProcessInspector
overview	muduo/net/inspect/ProcessInspector.cc	/^string ProcessInspector::overview(HttpRequest::Method, const Inspector::ArgList&)$/;"	f	class:ProcessInspector
pid	muduo/net/inspect/ProcessInspector.cc	/^string ProcessInspector::pid(HttpRequest::Method, const Inspector::ArgList&)$/;"	f	class:ProcessInspector
procStatus	muduo/net/inspect/ProcessInspector.cc	/^string ProcessInspector::procStatus(HttpRequest::Method, const Inspector::ArgList&)$/;"	f	class:ProcessInspector
registerCommands	muduo/net/inspect/ProcessInspector.cc	/^void ProcessInspector::registerCommands(Inspector* ins)$/;"	f	class:ProcessInspector
stringPrintf	muduo/net/inspect/ProcessInspector.cc	/^int stringPrintf(string* out, const char* fmt, ...)$/;"	f	namespace:muduo::inspect
threads	muduo/net/inspect/ProcessInspector.cc	/^string ProcessInspector::threads(HttpRequest::Method, const Inspector::ArgList&)$/;"	f	class:ProcessInspector
uptime	muduo/net/inspect/ProcessInspector.cc	/^string uptime(Timestamp now, Timestamp start, bool showMicroseconds)$/;"	f	namespace:muduo::inspect
MUDUO_NET_INSPECT_PROCESSINSPECTOR_H	muduo/net/inspect/ProcessInspector.h	12;"	d
ProcessInspector	muduo/net/inspect/ProcessInspector.h	/^class ProcessInspector : boost::noncopyable$/;"	c	namespace:muduo::net
muduo	muduo/net/inspect/ProcessInspector.h	/^namespace muduo$/;"	n
net	muduo/net/inspect/ProcessInspector.h	/^namespace net$/;"	n	namespace:muduo
username_	muduo/net/inspect/ProcessInspector.h	/^  static string username_;$/;"	m	class:muduo::net::ProcessInspector
cpuinfo	muduo/net/inspect/SystemInspector.cc	/^string SystemInspector::cpuinfo(HttpRequest::Method, const Inspector::ArgList&)$/;"	f	class:SystemInspector
inspect	muduo/net/inspect/SystemInspector.cc	/^namespace inspect$/;"	n	namespace:muduo	file:
loadavg	muduo/net/inspect/SystemInspector.cc	/^string SystemInspector::loadavg(HttpRequest::Method, const Inspector::ArgList&)$/;"	f	class:SystemInspector
meminfo	muduo/net/inspect/SystemInspector.cc	/^string SystemInspector::meminfo(HttpRequest::Method, const Inspector::ArgList&)$/;"	f	class:SystemInspector
muduo	muduo/net/inspect/SystemInspector.cc	/^namespace muduo$/;"	n	file:
overview	muduo/net/inspect/SystemInspector.cc	/^string SystemInspector::overview(HttpRequest::Method, const Inspector::ArgList&)$/;"	f	class:SystemInspector
registerCommands	muduo/net/inspect/SystemInspector.cc	/^void SystemInspector::registerCommands(Inspector* ins)$/;"	f	class:SystemInspector
stat	muduo/net/inspect/SystemInspector.cc	/^string SystemInspector::stat(HttpRequest::Method, const Inspector::ArgList&)$/;"	f	class:SystemInspector
version	muduo/net/inspect/SystemInspector.cc	/^string SystemInspector::version(HttpRequest::Method, const Inspector::ArgList&)$/;"	f	class:SystemInspector
MUDUO_NET_INSPECT_SYSTEMINSPECTOR_H	muduo/net/inspect/SystemInspector.h	12;"	d
SystemInspector	muduo/net/inspect/SystemInspector.h	/^class SystemInspector : boost::noncopyable$/;"	c	namespace:muduo::net
muduo	muduo/net/inspect/SystemInspector.h	/^namespace muduo$/;"	n
net	muduo/net/inspect/SystemInspector.h	/^namespace net$/;"	n	namespace:muduo
main	muduo/net/inspect/tests/Inspector_test.cc	/^int main()$/;"	f
newDefaultPoller	muduo/net/poller/DefaultPoller.cc	/^Poller* Poller::newDefaultPoller(EventLoop* loop)$/;"	f	class:Poller
EPollPoller	muduo/net/poller/EPollPoller.cc	/^EPollPoller::EPollPoller(EventLoop* loop)$/;"	f	class:EPollPoller
fillActiveChannels	muduo/net/poller/EPollPoller.cc	/^void EPollPoller::fillActiveChannels(int numEvents,$/;"	f	class:EPollPoller
kAdded	muduo/net/poller/EPollPoller.cc	/^const int kAdded = 1;  \/\/要关注的通道$/;"	m	namespace:__anon9	file:
kDeleted	muduo/net/poller/EPollPoller.cc	/^const int kDeleted = 2;  \/\/将已不关注事件的fd重新关注事件$/;"	m	namespace:__anon9	file:
kNew	muduo/net/poller/EPollPoller.cc	/^const int kNew = -1;  \/\/表示有新通道要增加$/;"	m	namespace:__anon9	file:
operationToString	muduo/net/poller/EPollPoller.cc	/^const char* EPollPoller::operationToString(int op)  \/\/调试用的函数$/;"	f	class:EPollPoller
poll	muduo/net/poller/EPollPoller.cc	/^Timestamp EPollPoller::poll(int timeoutMs, ChannelList* activeChannels)$/;"	f	class:EPollPoller
removeChannel	muduo/net/poller/EPollPoller.cc	/^void EPollPoller::removeChannel(Channel* channel)$/;"	f	class:EPollPoller
update	muduo/net/poller/EPollPoller.cc	/^void EPollPoller::update(int operation, Channel* channel)$/;"	f	class:EPollPoller
updateChannel	muduo/net/poller/EPollPoller.cc	/^void EPollPoller::updateChannel(Channel* channel)  $/;"	f	class:EPollPoller
~EPollPoller	muduo/net/poller/EPollPoller.cc	/^EPollPoller::~EPollPoller()$/;"	f	class:EPollPoller
EPollPoller	muduo/net/poller/EPollPoller.h	/^class EPollPoller : public Poller     \/\/注意，这里时继承了Poller类$/;"	c	namespace:muduo::net
EventList	muduo/net/poller/EPollPoller.h	/^  typedef std::vector<struct epoll_event> EventList;$/;"	t	class:muduo::net::EPollPoller
MUDUO_NET_POLLER_EPOLLPOLLER_H	muduo/net/poller/EPollPoller.h	12;"	d
epollfd_	muduo/net/poller/EPollPoller.h	/^  int epollfd_;  \/\/文件描述符 = epoll_create1(EPOLL_CLOEXEC)，用来表示要  关注事件的fd的集合的描述符$/;"	m	class:muduo::net::EPollPoller
events_	muduo/net/poller/EPollPoller.h	/^  EventList events_;  \/\/ epoll_wait返回的活动的通道channelList$/;"	m	class:muduo::net::EPollPoller
kInitEventListSize	muduo/net/poller/EPollPoller.h	/^  static const int kInitEventListSize = 16;  \/\/ EventList的初始空间大小 $/;"	m	class:muduo::net::EPollPoller
muduo	muduo/net/poller/EPollPoller.h	/^namespace muduo$/;"	n
net	muduo/net/poller/EPollPoller.h	/^namespace net$/;"	n	namespace:muduo
PollPoller	muduo/net/poller/PollPoller.cc	/^PollPoller::PollPoller(EventLoop* loop)$/;"	f	class:PollPoller
fillActiveChannels	muduo/net/poller/PollPoller.cc	/^void PollPoller::fillActiveChannels(int numEvents,$/;"	f	class:PollPoller
poll	muduo/net/poller/PollPoller.cc	/^Timestamp PollPoller::poll(int timeoutMs, ChannelList* activeChannels)$/;"	f	class:PollPoller
removeChannel	muduo/net/poller/PollPoller.cc	/^void PollPoller::removeChannel(Channel* channel)$/;"	f	class:PollPoller
updateChannel	muduo/net/poller/PollPoller.cc	/^void PollPoller::updateChannel(Channel* channel)    \/\/负责维护和更新pollfds_数组$/;"	f	class:PollPoller
~PollPoller	muduo/net/poller/PollPoller.cc	/^PollPoller::~PollPoller()$/;"	f	class:PollPoller
MUDUO_NET_POLLER_POLLPOLLER_H	muduo/net/poller/PollPoller.h	12;"	d
PollFdList	muduo/net/poller/PollPoller.h	/^  typedef std::vector<struct pollfd> PollFdList;$/;"	t	class:muduo::net::PollPoller
PollPoller	muduo/net/poller/PollPoller.h	/^class PollPoller : public Poller$/;"	c	namespace:muduo::net
muduo	muduo/net/poller/PollPoller.h	/^namespace muduo$/;"	n
net	muduo/net/poller/PollPoller.h	/^namespace net$/;"	n	namespace:muduo
pollfds_	muduo/net/poller/PollPoller.h	/^  PollFdList pollfds_;$/;"	m	class:muduo::net::PollPoller
BackUp	muduo/net/protobuf/BufferStream.h	/^  virtual void BackUp(int count) \/\/ override$/;"	f	class:muduo::net::BufferOutputStream
BufferOutputStream	muduo/net/protobuf/BufferStream.h	/^  BufferOutputStream(Buffer* buf)$/;"	f	class:muduo::net::BufferOutputStream
BufferOutputStream	muduo/net/protobuf/BufferStream.h	/^class BufferOutputStream : public google::protobuf::io::ZeroCopyOutputStream$/;"	c	namespace:muduo::net
ByteCount	muduo/net/protobuf/BufferStream.h	/^  virtual int64_t ByteCount() const \/\/ override$/;"	f	class:muduo::net::BufferOutputStream
Next	muduo/net/protobuf/BufferStream.h	/^  virtual bool Next(void** data, int* size) \/\/ override$/;"	f	class:muduo::net::BufferOutputStream
buffer_	muduo/net/protobuf/BufferStream.h	/^  Buffer* buffer_;$/;"	m	class:muduo::net::BufferOutputStream
muduo	muduo/net/protobuf/BufferStream.h	/^namespace muduo$/;"	n
net	muduo/net/protobuf/BufferStream.h	/^namespace net$/;"	n	namespace:muduo
originalSize_	muduo/net/protobuf/BufferStream.h	/^  size_t originalSize_;$/;"	m	class:muduo::net::BufferOutputStream
ProtobufVersionCheck	muduo/net/protobuf/ProtobufCodecLite.cc	/^  int ProtobufVersionCheck()$/;"	f	namespace:__anon4
asInt32	muduo/net/protobuf/ProtobufCodecLite.cc	/^int32_t ProtobufCodecLite::asInt32(const char* buf)$/;"	f	class:ProtobufCodecLite
checksum	muduo/net/protobuf/ProtobufCodecLite.cc	/^int32_t ProtobufCodecLite::checksum(const void* buf, int len)$/;"	f	class:ProtobufCodecLite
defaultErrorCallback	muduo/net/protobuf/ProtobufCodecLite.cc	/^void ProtobufCodecLite::defaultErrorCallback(const TcpConnectionPtr& conn,$/;"	f	class:ProtobufCodecLite
dummy	muduo/net/protobuf/ProtobufCodecLite.cc	/^  int __attribute__ ((unused)) dummy = ProtobufVersionCheck();$/;"	m	namespace:__anon4	file:
errorCodeToString	muduo/net/protobuf/ProtobufCodecLite.cc	/^const string& ProtobufCodecLite::errorCodeToString(ErrorCode errorCode)$/;"	f	class:ProtobufCodecLite
fillEmptyBuffer	muduo/net/protobuf/ProtobufCodecLite.cc	/^void ProtobufCodecLite::fillEmptyBuffer(muduo::net::Buffer* buf,$/;"	f	class:ProtobufCodecLite
kCheckSumErrorStr	muduo/net/protobuf/ProtobufCodecLite.cc	/^  const string kCheckSumErrorStr = "CheckSumError";$/;"	m	namespace:__anon5	file:
kInvalidLengthStr	muduo/net/protobuf/ProtobufCodecLite.cc	/^  const string kInvalidLengthStr = "InvalidLength";$/;"	m	namespace:__anon5	file:
kInvalidNameLenStr	muduo/net/protobuf/ProtobufCodecLite.cc	/^  const string kInvalidNameLenStr = "InvalidNameLen";$/;"	m	namespace:__anon5	file:
kNoErrorStr	muduo/net/protobuf/ProtobufCodecLite.cc	/^  const string kNoErrorStr = "NoError";$/;"	m	namespace:__anon5	file:
kParseErrorStr	muduo/net/protobuf/ProtobufCodecLite.cc	/^  const string kParseErrorStr = "ParseError";$/;"	m	namespace:__anon5	file:
kUnknownErrorStr	muduo/net/protobuf/ProtobufCodecLite.cc	/^  const string kUnknownErrorStr = "UnknownError";$/;"	m	namespace:__anon5	file:
kUnknownMessageTypeStr	muduo/net/protobuf/ProtobufCodecLite.cc	/^  const string kUnknownMessageTypeStr = "UnknownMessageType";$/;"	m	namespace:__anon5	file:
onMessage	muduo/net/protobuf/ProtobufCodecLite.cc	/^void ProtobufCodecLite::onMessage(const TcpConnectionPtr& conn,$/;"	f	class:ProtobufCodecLite
parse	muduo/net/protobuf/ProtobufCodecLite.cc	/^ProtobufCodecLite::ErrorCode ProtobufCodecLite::parse(const char* buf,$/;"	f	class:ProtobufCodecLite
parseFromBuffer	muduo/net/protobuf/ProtobufCodecLite.cc	/^bool ProtobufCodecLite::parseFromBuffer(StringPiece buf, google::protobuf::Message* message)$/;"	f	class:ProtobufCodecLite
send	muduo/net/protobuf/ProtobufCodecLite.cc	/^void ProtobufCodecLite::send(const TcpConnectionPtr& conn,$/;"	f	class:ProtobufCodecLite
serializeToBuffer	muduo/net/protobuf/ProtobufCodecLite.cc	/^int ProtobufCodecLite::serializeToBuffer(const google::protobuf::Message& message, Buffer* buf)$/;"	f	class:ProtobufCodecLite
validateChecksum	muduo/net/protobuf/ProtobufCodecLite.cc	/^bool ProtobufCodecLite::validateChecksum(const char* buf, int len)$/;"	f	class:ProtobufCodecLite
ConcreteMessagePtr	muduo/net/protobuf/ProtobufCodecLite.h	/^  typedef boost::shared_ptr<MSG> ConcreteMessagePtr;$/;"	t	class:muduo::net::ProtobufCodecLiteT
ErrorCallback	muduo/net/protobuf/ProtobufCodecLite.h	/^                                ErrorCode)> ErrorCallback;$/;"	t	class:muduo::net::ProtobufCodecLite
ErrorCallback	muduo/net/protobuf/ProtobufCodecLite.h	/^  typedef ProtobufCodecLite::ErrorCallback ErrorCallback;$/;"	t	class:muduo::net::ProtobufCodecLiteT
ErrorCode	muduo/net/protobuf/ProtobufCodecLite.h	/^  enum ErrorCode$/;"	g	class:muduo::net::ProtobufCodecLite
MUDUO_NET_PROTOBUF_CODEC_H	muduo/net/protobuf/ProtobufCodecLite.h	15;"	d
MessagePtr	muduo/net/protobuf/ProtobufCodecLite.h	/^typedef boost::shared_ptr<google::protobuf::Message> MessagePtr;$/;"	t	namespace:muduo::net
ProtobufCodecLite	muduo/net/protobuf/ProtobufCodecLite.h	/^  ProtobufCodecLite(const ::google::protobuf::Message* prototype,$/;"	f	class:muduo::net::ProtobufCodecLite
ProtobufCodecLite	muduo/net/protobuf/ProtobufCodecLite.h	/^class ProtobufCodecLite : boost::noncopyable$/;"	c	namespace:muduo::net
ProtobufCodecLiteT	muduo/net/protobuf/ProtobufCodecLite.h	/^  explicit ProtobufCodecLiteT(const ProtobufMessageCallback& messageCb,$/;"	f	class:muduo::net::ProtobufCodecLiteT
ProtobufCodecLiteT	muduo/net/protobuf/ProtobufCodecLite.h	/^class ProtobufCodecLiteT$/;"	c	namespace:muduo::net
ProtobufMessageCallback	muduo/net/protobuf/ProtobufCodecLite.h	/^                                Timestamp)> ProtobufMessageCallback;$/;"	t	class:muduo::net::ProtobufCodecLite
ProtobufMessageCallback	muduo/net/protobuf/ProtobufCodecLite.h	/^                                Timestamp)> ProtobufMessageCallback;$/;"	t	class:muduo::net::ProtobufCodecLiteT
RawMessageCallback	muduo/net/protobuf/ProtobufCodecLite.h	/^                                Timestamp)> RawMessageCallback;$/;"	t	class:muduo::net::ProtobufCodecLite
RawMessageCallback	muduo/net/protobuf/ProtobufCodecLite.h	/^  typedef ProtobufCodecLite::RawMessageCallback RawMessageCallback;$/;"	t	class:muduo::net::ProtobufCodecLiteT
TcpConnectionPtr	muduo/net/protobuf/ProtobufCodecLite.h	/^typedef boost::shared_ptr<TcpConnection> TcpConnectionPtr;$/;"	t	namespace:muduo::net
codec_	muduo/net/protobuf/ProtobufCodecLite.h	/^  CODEC codec_;$/;"	m	class:muduo::net::ProtobufCodecLiteT
errorCallback_	muduo/net/protobuf/ProtobufCodecLite.h	/^  ErrorCallback errorCallback_;$/;"	m	class:muduo::net::ProtobufCodecLite
fillEmptyBuffer	muduo/net/protobuf/ProtobufCodecLite.h	/^  void fillEmptyBuffer(muduo::net::Buffer* buf, const MSG& message)$/;"	f	class:muduo::net::ProtobufCodecLiteT
google	muduo/net/protobuf/ProtobufCodecLite.h	/^namespace google$/;"	n
kCheckSumError	muduo/net/protobuf/ProtobufCodecLite.h	/^    kCheckSumError,$/;"	e	enum:muduo::net::ProtobufCodecLite::ErrorCode
kChecksumLen	muduo/net/protobuf/ProtobufCodecLite.h	/^  const static int kChecksumLen = sizeof(int32_t);$/;"	m	class:muduo::net::ProtobufCodecLite
kHeaderLen	muduo/net/protobuf/ProtobufCodecLite.h	/^  const static int kHeaderLen = sizeof(int32_t);$/;"	m	class:muduo::net::ProtobufCodecLite
kInvalidLength	muduo/net/protobuf/ProtobufCodecLite.h	/^    kInvalidLength,$/;"	e	enum:muduo::net::ProtobufCodecLite::ErrorCode
kInvalidNameLen	muduo/net/protobuf/ProtobufCodecLite.h	/^    kInvalidNameLen,$/;"	e	enum:muduo::net::ProtobufCodecLite::ErrorCode
kMaxMessageLen	muduo/net/protobuf/ProtobufCodecLite.h	/^  const static int kMaxMessageLen = 64*1024*1024; \/\/ same as codec_stream.h kDefaultTotalBytesLimit$/;"	m	class:muduo::net::ProtobufCodecLite
kMinMessageLen	muduo/net/protobuf/ProtobufCodecLite.h	/^  const int kMinMessageLen;$/;"	m	class:muduo::net::ProtobufCodecLite
kNoError	muduo/net/protobuf/ProtobufCodecLite.h	/^    kNoError = 0,$/;"	e	enum:muduo::net::ProtobufCodecLite::ErrorCode
kParseError	muduo/net/protobuf/ProtobufCodecLite.h	/^    kParseError,$/;"	e	enum:muduo::net::ProtobufCodecLite::ErrorCode
kUnknownMessageType	muduo/net/protobuf/ProtobufCodecLite.h	/^    kUnknownMessageType,$/;"	e	enum:muduo::net::ProtobufCodecLite::ErrorCode
messageCallback_	muduo/net/protobuf/ProtobufCodecLite.h	/^  ProtobufMessageCallback messageCallback_;$/;"	m	class:muduo::net::ProtobufCodecLite
messageCallback_	muduo/net/protobuf/ProtobufCodecLite.h	/^  ProtobufMessageCallback messageCallback_;$/;"	m	class:muduo::net::ProtobufCodecLiteT
muduo	muduo/net/protobuf/ProtobufCodecLite.h	/^namespace muduo$/;"	n
net	muduo/net/protobuf/ProtobufCodecLite.h	/^namespace net$/;"	n	namespace:muduo
onMessage	muduo/net/protobuf/ProtobufCodecLite.h	/^  void onMessage(const TcpConnectionPtr& conn,$/;"	f	class:muduo::net::ProtobufCodecLiteT
onRpcMessage	muduo/net/protobuf/ProtobufCodecLite.h	/^  void onRpcMessage(const TcpConnectionPtr& conn,$/;"	f	class:muduo::net::ProtobufCodecLiteT
protobuf	muduo/net/protobuf/ProtobufCodecLite.h	/^namespace protobuf$/;"	n	namespace:google
prototype_	muduo/net/protobuf/ProtobufCodecLite.h	/^  const ::google::protobuf::Message* prototype_;$/;"	m	class:muduo::net::ProtobufCodecLite
rawCb_	muduo/net/protobuf/ProtobufCodecLite.h	/^  RawMessageCallback rawCb_;$/;"	m	class:muduo::net::ProtobufCodecLite
send	muduo/net/protobuf/ProtobufCodecLite.h	/^  void send(const TcpConnectionPtr& conn,$/;"	f	class:muduo::net::ProtobufCodecLiteT
tag	muduo/net/protobuf/ProtobufCodecLite.h	/^  const string& tag() const { return codec_.tag(); }$/;"	f	class:muduo::net::ProtobufCodecLiteT
tag	muduo/net/protobuf/ProtobufCodecLite.h	/^  const string& tag() const { return tag_; }$/;"	f	class:muduo::net::ProtobufCodecLite
tag_	muduo/net/protobuf/ProtobufCodecLite.h	/^  const string tag_;$/;"	m	class:muduo::net::ProtobufCodecLite
~ProtobufCodecLite	muduo/net/protobuf/ProtobufCodecLite.h	/^  virtual ~ProtobufCodecLite() { }$/;"	f	class:muduo::net::ProtobufCodecLite
CallMethod	muduo/net/protorpc/RpcChannel.cc	/^void RpcChannel::CallMethod(const ::google::protobuf::MethodDescriptor* method,$/;"	f	class:RpcChannel
RpcChannel	muduo/net/protorpc/RpcChannel.cc	/^RpcChannel::RpcChannel()$/;"	f	class:RpcChannel
RpcChannel	muduo/net/protorpc/RpcChannel.cc	/^RpcChannel::RpcChannel(const TcpConnectionPtr& conn)$/;"	f	class:RpcChannel
doneCallback	muduo/net/protorpc/RpcChannel.cc	/^void RpcChannel::doneCallback(::google::protobuf::Message* response, int64_t id)$/;"	f	class:RpcChannel
onMessage	muduo/net/protorpc/RpcChannel.cc	/^void RpcChannel::onMessage(const TcpConnectionPtr& conn,$/;"	f	class:RpcChannel
onRpcMessage	muduo/net/protorpc/RpcChannel.cc	/^void RpcChannel::onRpcMessage(const TcpConnectionPtr& conn,$/;"	f	class:RpcChannel
~RpcChannel	muduo/net/protorpc/RpcChannel.cc	/^RpcChannel::~RpcChannel()$/;"	f	class:RpcChannel
MUDUO_NET_PROTORPC_RPCCHANNEL_H	muduo/net/protorpc/RpcChannel.h	12;"	d
OutstandingCall	muduo/net/protorpc/RpcChannel.h	/^  struct OutstandingCall$/;"	s	class:muduo::net::RpcChannel
RpcChannel	muduo/net/protorpc/RpcChannel.h	/^class RpcChannel : public ::google::protobuf::RpcChannel$/;"	c	namespace:muduo::net
RpcChannelPtr	muduo/net/protorpc/RpcChannel.h	/^typedef boost::shared_ptr<RpcChannel> RpcChannelPtr;$/;"	t	namespace:muduo::net
codec_	muduo/net/protorpc/RpcChannel.h	/^  RpcCodec codec_;$/;"	m	class:muduo::net::RpcChannel
conn_	muduo/net/protorpc/RpcChannel.h	/^  TcpConnectionPtr conn_;$/;"	m	class:muduo::net::RpcChannel
done	muduo/net/protorpc/RpcChannel.h	/^    ::google::protobuf::Closure* done;$/;"	m	struct:muduo::net::RpcChannel::OutstandingCall
google	muduo/net/protorpc/RpcChannel.h	/^namespace google {$/;"	n
id_	muduo/net/protorpc/RpcChannel.h	/^  AtomicInt64 id_;$/;"	m	class:muduo::net::RpcChannel
muduo	muduo/net/protorpc/RpcChannel.h	/^namespace muduo$/;"	n
mutex_	muduo/net/protorpc/RpcChannel.h	/^  MutexLock mutex_;$/;"	m	class:muduo::net::RpcChannel
net	muduo/net/protorpc/RpcChannel.h	/^namespace net$/;"	n	namespace:muduo
outstandings_	muduo/net/protorpc/RpcChannel.h	/^  std::map<int64_t, OutstandingCall> outstandings_;$/;"	m	class:muduo::net::RpcChannel
protobuf	muduo/net/protorpc/RpcChannel.h	/^namespace protobuf {$/;"	n	namespace:google
response	muduo/net/protorpc/RpcChannel.h	/^    ::google::protobuf::Message* response;$/;"	m	struct:muduo::net::RpcChannel::OutstandingCall
services_	muduo/net/protorpc/RpcChannel.h	/^  const std::map<std::string, ::google::protobuf::Service*>* services_;$/;"	m	class:muduo::net::RpcChannel
setConnection	muduo/net/protorpc/RpcChannel.h	/^  void setConnection(const TcpConnectionPtr& conn)$/;"	f	class:muduo::net::RpcChannel
setServices	muduo/net/protorpc/RpcChannel.h	/^  void setServices(const std::map<std::string, ::google::protobuf::Service*>* services)$/;"	f	class:muduo::net::RpcChannel
ProtobufVersionCheck	muduo/net/protorpc/RpcCodec.cc	/^  int ProtobufVersionCheck()$/;"	f	namespace:__anon7
dummy	muduo/net/protorpc/RpcCodec.cc	/^  int dummy __attribute__ ((unused)) = ProtobufVersionCheck();$/;"	m	namespace:__anon7	file:
muduo	muduo/net/protorpc/RpcCodec.cc	/^namespace muduo$/;"	n	file:
net	muduo/net/protorpc/RpcCodec.cc	/^namespace net$/;"	n	namespace:muduo	file:
rpctag	muduo/net/protorpc/RpcCodec.cc	/^const char rpctag [] = "RPC0";$/;"	m	namespace:muduo::net	file:
MUDUO_NET_PROTORPC_RPCCODEC_H	muduo/net/protorpc/RpcCodec.h	12;"	d
RpcCodec	muduo/net/protorpc/RpcCodec.h	/^typedef ProtobufCodecLiteT<RpcMessage, rpctag> RpcCodec;$/;"	t	namespace:muduo::net
RpcMessagePtr	muduo/net/protorpc/RpcCodec.h	/^typedef boost::shared_ptr<RpcMessage> RpcMessagePtr;$/;"	t	namespace:muduo::net
TcpConnectionPtr	muduo/net/protorpc/RpcCodec.h	/^typedef boost::shared_ptr<TcpConnection> TcpConnectionPtr;$/;"	t	namespace:muduo::net
muduo	muduo/net/protorpc/RpcCodec.h	/^namespace muduo$/;"	n
net	muduo/net/protorpc/RpcCodec.h	/^namespace net$/;"	n	namespace:muduo
NDEBUG	muduo/net/protorpc/RpcCodec_test.cc	1;"	d	file:
g_msgptr	muduo/net/protorpc/RpcCodec_test.cc	/^MessagePtr g_msgptr;$/;"	v
main	muduo/net/protorpc/RpcCodec_test.cc	/^int main()$/;"	f
messageCallback	muduo/net/protorpc/RpcCodec_test.cc	/^void messageCallback(const TcpConnectionPtr&,$/;"	f
print	muduo/net/protorpc/RpcCodec_test.cc	/^void print(const Buffer& buf)$/;"	f
rpcMessageCallback	muduo/net/protorpc/RpcCodec_test.cc	/^void rpcMessageCallback(const TcpConnectionPtr&,$/;"	f
rpctag	muduo/net/protorpc/RpcCodec_test.cc	/^char rpctag[] = "RPC0";$/;"	v
RpcServer	muduo/net/protorpc/RpcServer.cc	/^RpcServer::RpcServer(EventLoop* loop,$/;"	f	class:RpcServer
onConnection	muduo/net/protorpc/RpcServer.cc	/^void RpcServer::onConnection(const TcpConnectionPtr& conn)$/;"	f	class:RpcServer
registerService	muduo/net/protorpc/RpcServer.cc	/^void RpcServer::registerService(google::protobuf::Service* service)$/;"	f	class:RpcServer
start	muduo/net/protorpc/RpcServer.cc	/^void RpcServer::start()$/;"	f	class:RpcServer
MUDUO_NET_PROTORPC_RPCSERVER_H	muduo/net/protorpc/RpcServer.h	12;"	d
RpcServer	muduo/net/protorpc/RpcServer.h	/^class RpcServer$/;"	c	namespace:muduo::net
google	muduo/net/protorpc/RpcServer.h	/^namespace google {$/;"	n
muduo	muduo/net/protorpc/RpcServer.h	/^namespace muduo$/;"	n
net	muduo/net/protorpc/RpcServer.h	/^namespace net$/;"	n	namespace:muduo
protobuf	muduo/net/protorpc/RpcServer.h	/^namespace protobuf {$/;"	n	namespace:google
server_	muduo/net/protorpc/RpcServer.h	/^  TcpServer server_;$/;"	m	class:muduo::net::RpcServer
services_	muduo/net/protorpc/RpcServer.h	/^  std::map<std::string, ::google::protobuf::Service*> services_;$/;"	m	class:muduo::net::RpcServer
setThreadNum	muduo/net/protorpc/RpcServer.h	/^  void setThreadNum(int numThreads)$/;"	f	class:muduo::net::RpcServer
ByteSizeConsistencyError	muduo/net/protorpc/google-inl.h	/^void ByteSizeConsistencyError(int byte_size_before_serialization,$/;"	f
InitializationErrorMessage	muduo/net/protorpc/google-inl.h	/^std::string InitializationErrorMessage(const char* action,$/;"	f
BOOST_AUTO_TEST_CASE	muduo/net/tests/Buffer_unittest.cc	/^BOOST_AUTO_TEST_CASE(testBufferAppendRetrieve)$/;"	f
BOOST_AUTO_TEST_CASE	muduo/net/tests/Buffer_unittest.cc	/^BOOST_AUTO_TEST_CASE(testBufferFindEOL)$/;"	f
BOOST_AUTO_TEST_CASE	muduo/net/tests/Buffer_unittest.cc	/^BOOST_AUTO_TEST_CASE(testBufferGrow)$/;"	f
BOOST_AUTO_TEST_CASE	muduo/net/tests/Buffer_unittest.cc	/^BOOST_AUTO_TEST_CASE(testBufferInsideGrow)$/;"	f
BOOST_AUTO_TEST_CASE	muduo/net/tests/Buffer_unittest.cc	/^BOOST_AUTO_TEST_CASE(testBufferPrepend)$/;"	f
BOOST_AUTO_TEST_CASE	muduo/net/tests/Buffer_unittest.cc	/^BOOST_AUTO_TEST_CASE(testBufferReadInt)$/;"	f
BOOST_AUTO_TEST_CASE	muduo/net/tests/Buffer_unittest.cc	/^BOOST_AUTO_TEST_CASE(testBufferShrink)$/;"	f
BOOST_AUTO_TEST_CASE	muduo/net/tests/Buffer_unittest.cc	/^BOOST_AUTO_TEST_CASE(testMove)$/;"	f
BOOST_TEST_DYN_LINK	muduo/net/tests/Buffer_unittest.cc	5;"	d	file:
BOOST_TEST_MAIN	muduo/net/tests/Buffer_unittest.cc	4;"	d	file:
output	muduo/net/tests/Buffer_unittest.cc	/^void output(Buffer&& buf, const void* inner)$/;"	f
PeriodicTimer	muduo/net/tests/Channel_test.cc	/^  PeriodicTimer(EventLoop* loop, double interval, const TimerCallback& cb)$/;"	f	class:PeriodicTimer
PeriodicTimer	muduo/net/tests/Channel_test.cc	/^class PeriodicTimer$/;"	c	file:
cb_	muduo/net/tests/Channel_test.cc	/^  TimerCallback cb_;$/;"	m	class:PeriodicTimer	file:
detail	muduo/net/tests/Channel_test.cc	/^namespace detail$/;"	n	namespace:muduo::net	file:
handleRead	muduo/net/tests/Channel_test.cc	/^  void handleRead()$/;"	f	class:PeriodicTimer	file:
interval_	muduo/net/tests/Channel_test.cc	/^  const double interval_; \/\/ in seconds$/;"	m	class:PeriodicTimer	file:
loop_	muduo/net/tests/Channel_test.cc	/^  EventLoop* loop_;$/;"	m	class:PeriodicTimer	file:
main	muduo/net/tests/Channel_test.cc	/^int main(int argc, char* argv[])$/;"	f
muduo	muduo/net/tests/Channel_test.cc	/^namespace muduo$/;"	n	file:
net	muduo/net/tests/Channel_test.cc	/^namespace net$/;"	n	namespace:muduo	file:
print	muduo/net/tests/Channel_test.cc	/^void print(const char* msg)$/;"	f
start	muduo/net/tests/Channel_test.cc	/^  void start()$/;"	f	class:PeriodicTimer
timerfdChannel_	muduo/net/tests/Channel_test.cc	/^  Channel timerfdChannel_;$/;"	m	class:PeriodicTimer	file:
timerfd_	muduo/net/tests/Channel_test.cc	/^  const int timerfd_;$/;"	m	class:PeriodicTimer	file:
toTimeSpec	muduo/net/tests/Channel_test.cc	/^  static struct timespec toTimeSpec(double seconds)$/;"	f	class:PeriodicTimer	file:
~PeriodicTimer	muduo/net/tests/Channel_test.cc	/^  ~PeriodicTimer()$/;"	f	class:PeriodicTimer
EchoClient	muduo/net/tests/EchoClient_unittest.cc	/^  EchoClient(EventLoop* loop, const InetAddress& listenAddr, const string& id)$/;"	f	class:EchoClient
EchoClient	muduo/net/tests/EchoClient_unittest.cc	/^class EchoClient : boost::noncopyable$/;"	c	file:
client_	muduo/net/tests/EchoClient_unittest.cc	/^  TcpClient client_;$/;"	m	class:EchoClient	file:
clients	muduo/net/tests/EchoClient_unittest.cc	/^boost::ptr_vector<EchoClient> clients;$/;"	v
connect	muduo/net/tests/EchoClient_unittest.cc	/^  void connect()$/;"	f	class:EchoClient
current	muduo/net/tests/EchoClient_unittest.cc	/^int current = 0;$/;"	v
loop_	muduo/net/tests/EchoClient_unittest.cc	/^  EventLoop* loop_;$/;"	m	class:EchoClient	file:
main	muduo/net/tests/EchoClient_unittest.cc	/^int main(int argc, char* argv[])$/;"	f
numThreads	muduo/net/tests/EchoClient_unittest.cc	/^int numThreads = 0;$/;"	v
onConnection	muduo/net/tests/EchoClient_unittest.cc	/^  void onConnection(const TcpConnectionPtr& conn)$/;"	f	class:EchoClient	file:
onMessage	muduo/net/tests/EchoClient_unittest.cc	/^  void onMessage(const TcpConnectionPtr& conn, Buffer* buf, Timestamp time)$/;"	f	class:EchoClient	file:
EchoServer	muduo/net/tests/EchoServer_unittest.cc	/^  EchoServer(EventLoop* loop, const InetAddress& listenAddr)$/;"	f	class:EchoServer
EchoServer	muduo/net/tests/EchoServer_unittest.cc	/^class EchoServer$/;"	c	file:
loop_	muduo/net/tests/EchoServer_unittest.cc	/^  EventLoop* loop_;$/;"	m	class:EchoServer	file:
main	muduo/net/tests/EchoServer_unittest.cc	/^int main(int argc, char* argv[])$/;"	f
numThreads	muduo/net/tests/EchoServer_unittest.cc	/^int numThreads = 0;$/;"	v
onConnection	muduo/net/tests/EchoServer_unittest.cc	/^  void onConnection(const TcpConnectionPtr& conn)$/;"	f	class:EchoServer	file:
onMessage	muduo/net/tests/EchoServer_unittest.cc	/^  void onMessage(const TcpConnectionPtr& conn, Buffer* buf, Timestamp time)$/;"	f	class:EchoServer	file:
server_	muduo/net/tests/EchoServer_unittest.cc	/^  TcpServer server_;$/;"	m	class:EchoServer	file:
start	muduo/net/tests/EchoServer_unittest.cc	/^  void start()$/;"	f	class:EchoServer
init	muduo/net/tests/EventLoopThreadPool_unittest.cc	/^void init(EventLoop* p)$/;"	f
main	muduo/net/tests/EventLoopThreadPool_unittest.cc	/^int main()$/;"	f
print	muduo/net/tests/EventLoopThreadPool_unittest.cc	/^void print(EventLoop* p = NULL)$/;"	f
main	muduo/net/tests/EventLoopThread_unittest.cc	/^int main()$/;"	f
print	muduo/net/tests/EventLoopThread_unittest.cc	/^void print(EventLoop* p = NULL)$/;"	f
quit	muduo/net/tests/EventLoopThread_unittest.cc	/^void quit(EventLoop* p)$/;"	f
callback	muduo/net/tests/EventLoop_unittest.cc	/^void callback()$/;"	f
main	muduo/net/tests/EventLoop_unittest.cc	/^int main()$/;"	f
threadFunc	muduo/net/tests/EventLoop_unittest.cc	/^void threadFunc()$/;"	f
BOOST_AUTO_TEST_CASE	muduo/net/tests/InetAddress_unittest.cc	/^BOOST_AUTO_TEST_CASE(testInetAddress)$/;"	f
BOOST_AUTO_TEST_CASE	muduo/net/tests/InetAddress_unittest.cc	/^BOOST_AUTO_TEST_CASE(testInetAddressResolve)$/;"	f
BOOST_TEST_DYN_LINK	muduo/net/tests/InetAddress_unittest.cc	7;"	d	file:
BOOST_TEST_MAIN	muduo/net/tests/InetAddress_unittest.cc	6;"	d	file:
main	muduo/net/tests/TcpClient_reg1.cc	/^int main(int argc, char* argv[])$/;"	f
timeout	muduo/net/tests/TcpClient_reg1.cc	/^void timeout()$/;"	f
main	muduo/net/tests/TcpClient_reg2.cc	/^int main(int argc, char* argv[])$/;"	f
threadFunc	muduo/net/tests/TcpClient_reg2.cc	/^void threadFunc(EventLoop* loop)$/;"	f
main	muduo/net/tests/TcpClient_reg3.cc	/^int main(int argc, char* argv[])$/;"	f
cancel	muduo/net/tests/TimerQueue_unittest.cc	/^void cancel(TimerId timer)$/;"	f
cnt	muduo/net/tests/TimerQueue_unittest.cc	/^int cnt = 0;$/;"	v
g_loop	muduo/net/tests/TimerQueue_unittest.cc	/^EventLoop* g_loop;$/;"	v
main	muduo/net/tests/TimerQueue_unittest.cc	/^int main()$/;"	f
print	muduo/net/tests/TimerQueue_unittest.cc	/^void print(const char* msg)$/;"	f
printTid	muduo/net/tests/TimerQueue_unittest.cc	/^void printTid()$/;"	f
BOOST_AUTO_TEST_CASE	muduo/net/tests/ZlibStream_unittest.cc	/^BOOST_AUTO_TEST_CASE(testZlibOutputStream)$/;"	f
BOOST_AUTO_TEST_CASE	muduo/net/tests/ZlibStream_unittest.cc	/^BOOST_AUTO_TEST_CASE(testZlibOutputStream1)$/;"	f
BOOST_AUTO_TEST_CASE	muduo/net/tests/ZlibStream_unittest.cc	/^BOOST_AUTO_TEST_CASE(testZlibOutputStream2)$/;"	f
BOOST_AUTO_TEST_CASE	muduo/net/tests/ZlibStream_unittest.cc	/^BOOST_AUTO_TEST_CASE(testZlibOutputStream3)$/;"	f
BOOST_AUTO_TEST_CASE	muduo/net/tests/ZlibStream_unittest.cc	/^BOOST_AUTO_TEST_CASE(testZlibOutputStream4)$/;"	f
BOOST_AUTO_TEST_CASE	muduo/net/tests/ZlibStream_unittest.cc	/^BOOST_AUTO_TEST_CASE(testZlibOutputStream5)$/;"	f
BOOST_TEST_DYN_LINK	muduo/net/tests/ZlibStream_unittest.cc	6;"	d	file:
BOOST_TEST_MAIN	muduo/net/tests/ZlibStream_unittest.cc	5;"	d	file:
headers	premake4.lua	/^    function headers(files)$/;"	f
headersdir	premake4.lua	/^    function headersdir(dir)$/;"	f
